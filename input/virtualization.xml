<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<!-- to do
    
    - figure 1 from page 9
    
    - fix all of the objective-refer tags in the threats
    - fix all of the objective-refer tags in the assumptions
    - fix all of the component-refer tags in the security objectives
    - check the sel-based requirements and make sure I used the correct selection-depends reqs

    - Incorporate TLS Package
        - DONE: Remove TLSC and TLSS requirements
        - DONE: Fix all references to TLSC and PLSS requirements
        - DONE: Edit FTP_ITC_EXT.1

    - Incorporate TDs
    - DONE: 0139 Clarification of testing for FDP_RIP_EXT.2
    - OBEV: 0166 Optional authentication of TLS Client
    - DONE: 0206 Testing for Non-Existence of Disconnected Virtual Devices
    - DONE: 0213 Corrections to App Note references to FCS_TLS, FCS_IPSEC, and FTP_ITC
    - DONE: 0230 ALC Assurance Activities for Server Virtualization and Base Virtualization PPs
    - OBEV: 0244 FCS_TLSC_EXT - TLS Client Curves Allowed
    - PART: 0247 FPT_VDP_EXT.1 Clarification for Assurance Activity
    - DONE: 0249 Applicability of FTP_ITC_EXT.1
    - DONE: 0250 Hypercall Controls - FPT_HCL_EXT.1 Clarification
    - OBEV: 0252 Inaccurate statement in application note of FCS_TLSC_EXT.2.4
    - DONE: 0264 Clarification of Auditable Events for FPT_RDM_EXT.1
    - DONE: 0265 Audit of TLS and HTTPS Session Terminations
    - OBEV: 0267 TLSS testing - Empty Certificate Authorities list
    - 0360 AD Server configuration in FMT_MOF_EXT.1
    - DONE: 0363 Access Banner and applicability to programmatic interfaces
    - OBEV: 0403 Conditional Testing with TLS Session IDs
    - 0432: Corrections to FIA_AFL_EXT.1

    - Translate SV and CV packages into XML
    - Somehow indicate that the SV or CV package must be selected. Currently there is no SFR that does this.
    
    -->
<?xml-model href="CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<PP xmlns="http://niap-ccevs.org/cc/v1" name="Virtualization"
    xmlns:htm="http://www.w3.org/1999/xhtml" boilerplate="yes">
    <PPReference title="PP Reference" id="ID003">
        <ReferenceTable>
            <PPTitle>Protection Profile for Virtualization</PPTitle>
            <PPVersion>1.0</PPVersion>
            <PPAuthor>National Information Assurance Partnership</PPAuthor>
            <PPPubDate>2016-11-17</PPPubDate>
            <PPCertificationID>unassigned</PPCertificationID>
            <CCVersion>Version 3.1R5</CCVersion>
            <Keywords>Virtualization</Keywords>
            <entry>
                <name>Registration</name>
                <description>National Information Assurance Partnership</description>
            </entry>
        </ReferenceTable>
    </PPReference>

    <RevisionHistory role="draft">
        <entry>
            <version>1.0</version>
            <date>2016-11-17</date>
            <subject>Initial Publication</subject>
        </entry>
        <entry>
            <version>1.1</version>
            <date>2019-07-16</date>
            <subject>Incorporate TDs and reference TLS Package</subject>
        </entry>
    </RevisionHistory>
    
    <chapter id="intro" title="Introduction">
        <section id="overview" title="Overview">
            The scope of this Protection Profile (PP) is to describe the security functionality of virtualization technologies in terms of [CC] and to define security functional and assurance requirements for such products. This PP is not complete in itself, but rather provides a set of requirements that are common to the Extended Packages (<abbr linkend="EP"/>) for Server Virtualization and for Client Virtualization. These capabilities have been broken out into this generic ‘base’ PP due to the high degree of similarity between the two product types.<htm:br></htm:br><htm:br></htm:br>
            Due to the increasing prevalence of virtualization technology in enterprise computing environments, it is essential to ensure that this technology is implemented securely in order to mitigate the risk introduced by sharing multiple computers and their data across a single physical system.<htm:br></htm:br><htm:br></htm:br>
        </section>
        <section id="terms" title="Terms">
            The following sections provide both Common Criteria and technology terms used in this PP.
            <glossary>
                <entry><term>Administrator</term><description>Administrators perform management activities on the VS. These management functions do not include administration of software running within Guest <abbr linkend="VM"/>s, such as the Guest OS. Administrators need not be human as in the case of embedded or headless <abbr linkend="VM"/>s. Administrators are often nothing more than software entities that operate within the <abbr linkend="VM"/>.</description></entry>
                <entry><term>Auditor</term><description>Auditors are responsible for managing the audit capabilities of the <abbr linkend="TOE"/>. An Auditor may also be an Administrator. It is not a requirement that the <abbr linkend="TOE"/> be capable of supporting an Auditor role that is separate from that of an Administrator.</description></entry>
                <entry><term><abbr title="Common Criteria">CC</abbr></term><description>Common Criteria for Information Technology Security Evaluation (International Standard ISO/IEC 15408).</description></entry>
                <entry><term>Common Criteria Testing Laboratory</term><description>Within the context of the Common Criteria Evaluation and Validation Scheme (CCEVS), an IT security evaluation facility, accredited by the National Voluntary Laboratory Accreditation Program (NVLAP) and approved by the NIAP Validation Body to conduct Common Criteria-based evaluations.</description></entry>
                <entry><term><abbr title="Common Evaluation Methodology">CEM</abbr></term><description>Common Evaluation Methodology for Information Technology Security Evaluation.</description></entry>
                <entry><term>Domain</term><description>A Domain or Information Domain is a policy construct that groups together execution environments and networks by sensitivity of information and access control policy. For example, classification levels represent information domains. Within classification levels, there might be other domains representing communities of interest or coalitions. In the context of a VS, information domains are generally implemented as collections of <abbr linkend="VM"/>s connected by virtual networks. The VS itself can be considered an Information Domain, as can its Management Subsystem.</description></entry>
                <entry><term><abbr title="Extended Package">EP</abbr></term><description>An implementation-independent set of security requirements for a specific subset of products described by a PP.</description></entry>
                <entry><term>Guest Network</term><description>See Operational Network.</description></entry>
                <entry><term>Guest Operating System (OS)</term><description>An operating system that runs within a Guest <abbr linkend="VM"/>.</description></entry>
                <entry><term>Guest <abbr linkend="VM"/></term><description>A Guest <abbr linkend="VM"/> is a <abbr linkend="VM"/> that contains a virtual environment for the execution of an independent computing system. Virtual environments execute mission workloads and implement customer-specific client or server functionality in Guest <abbr linkend="VM"/>s, such as a web server or desktop productivity applications.</description></entry>
                <entry><term>Helper <abbr linkend="VM"/></term><description>A Helper <abbr linkend="VM"/> is a <abbr linkend="VM"/> that performs services on behalf of one or more Guest <abbr linkend="VM"/>s, but does not qualify as a Service <abbr linkend="VM"/>—and therefore is not part of the <abbr linkend="VMM"/>. Helper <abbr linkend="VM"/>s implement functions or services that are particular to the workloads of Guest <abbr linkend="VM"/>s. For example, a <abbr linkend="VM"/> that provides a virus scanning service for a Guest <abbr linkend="VM"/> would be considered a Helper <abbr linkend="VM"/>. For the purposes of this document, Helper <abbr linkend="VM"/>s are considered a type of Guest <abbr linkend="VM"/>, and are therefore subject to all the same requirements, unless specifically stated otherwise.</description></entry>
                <entry><term>Host Operating System (OS)</term><description>An operating system onto which a VS is installed. Relative to the VS, the Host OS is part of the Platform.</description></entry>
                <entry><term>Hypervisor</term><description>The Hypervisor is part of the <abbr linkend="VMM"/>. It is the software executive of the physical platform of a VS. A Hypervisor’s primary function is to mediate access to all CPU and memory resources, but it is also responsible for either the direct management or the delegation of the management of all other hardware devices on the hardware platform.</description></entry>
                <entry><term>Hypercall</term><description>An API function that allows <abbr linkend="VM"/>-aware software running within a <abbr linkend="VM"/> to invoke <abbr linkend="VMM"/> functionality.</description></entry>
                <entry><term>Information Domain</term><description>See Domain.</description></entry>
                <entry><term>Introspection</term><description>A capability that allows a specially designated and privileged domain to have visibility into another domain for purposes of anomaly detection or monitoring.</description></entry>
                <entry><term>Management Network</term><description>A network, which may have both physical and virtualized components, used to manage and administer a VS. Management networks include networks used by VS Administrators to communicate with management components of the VS, and networks used by the VS for communications between VS components. For purposes of this document, networks that connect physical hosts for purposes of <abbr linkend="VM"/> transfer or coordinate, and backend storage networks are considered management networks. </description></entry>
                <entry><term>Management Subsystem</term><description>Components of the VS that allow VS Administrators to configure and manage the <abbr linkend="VMM"/>, as well as configure Guest <abbr linkend="VM"/>s. <abbr linkend="VMM"/> management functions include <abbr linkend="VM"/> configuration, virtualized network configuration, and allocation of physical resources.</description></entry>
                <entry><term>Operational Network</term><description>An Operational Network is a network, which may have both physical and virtualized components, used to connect Guest <abbr linkend="VM"/>s to each other and potentially to other entities outside of the VS. Operational Networks support mission workloads and customer-specific client or server functionality. Also called a “Guest Network.”</description></entry>
                <entry><term>Physical Platform</term><description>The hardware environment on which a VS executes. Physical platform resources include processors, memory, devices, and associated firmware.</description></entry>
                <entry><term>Platform</term><description>The hardware, firmware, and software environment into which a VS is installed and executes.</description></entry>
                <entry><term>Protection Profile (PP)</term><description>An implementation-independent set of security requirements for a category of products.</description></entry>
                <entry><term>Security Assurance Requirement (SAR)</term><description>A requirement for how the <abbr linkend="TOE"/>’s proper implementation of the SFRs is verified by an evaluator.</description></entry>
                <entry><term>Security Functional Requirement (SFR)</term><description>A requirement for security enforcement by the <abbr linkend="TOE"/>.</description></entry>
                <entry><term><abbr title="Security Target">ST</abbr></term><description>A set of implementation-dependent security requirements for a specific product.</description></entry>
                <entry><term>Service <abbr linkend="VM"/></term><description>A Service <abbr linkend="VM"/> is a <abbr linkend="VM"/> whose purpose is to support the Hypervisor in providing the resources or services necessary to support Guest <abbr linkend="VM"/>s. Service <abbr linkend="VM"/>s may implement some portion of Hypervisor functionality, but also may contain important system functionality that is not necessary for Hypervisor operation. As with any <abbr linkend="VM"/>, Service <abbr linkend="VM"/>s necessarily execute without full Hypervisor privileges—only the privileges required to perform its designed functionality. Examples of Service <abbr linkend="VM"/>s include device driver <abbr linkend="VM"/>s that manage access to a physical devices, and name-service <abbr linkend="VM"/>s that help establish communication paths between <abbr linkend="VM"/>s.</description></entry>
                <entry><term><abbr title="System Security Policy">SSP</abbr></term><description>The overall policy enforced by the VS defining constraints on the behavior of <abbr linkend="VM"/>s and users.</description></entry>
                <entry><term><abbr title="Target of Evaluation">TOE</abbr></term><description>The product under evaluation.</description></entry>
                <entry><term><abbr title="TOE Security Functionality">TSF</abbr></term><description>The security functionality of the product under evaluation.</description></entry>
                <entry><term><abbr title="TOE Summary Specification">TSS</abbr></term><description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in an <abbr linkend="ST"/>.</description></entry>
                <entry><term>User</term><description>Users operate Guest <abbr linkend="VM"/>s and are subject to configuration policies applied to the VS by Administrators. Users need not be human as in the case of embedded or headless <abbr linkend="VM"/>s, users are often nothing more than software entities that operate within the <abbr linkend="VM"/>.</description></entry>
                <entry><term><abbr title="Virtual Machine">VM</abbr></term><description>A Virtual Machine is a virtualized hardware environment in which an operating system may execute.</description></entry>
                <entry><term><abbr title="Virtual Machine Manager">VMM</abbr></term><description>A <abbr linkend="VMM"/> is a collection of software components responsible for enabling <abbr linkend="VM"/>s to function as expected by the software executing within them. Generally, the <abbr linkend="VMM"/> consists of a Hypervisor, Service <abbr linkend="VM"/>s, and other components of the VS, such as virtual devices, binary translation systems, and physical device drivers. It manages concurrent execution of all <abbr linkend="VM"/>s and virtualizes platform resources as needed.</description></entry>
                <entry><term>Virtualization System (VS)</term><description>A software product that enables multiple independent computing systems to execute on the same physical hardware platform without interference from one other. For the purposes of this document, the VS consists of a Virtual Machine Manager (<abbr linkend="VMM"/>), Virtual Machine (<abbr linkend="VM"/>) abstractions, a management subsystem, and other components.</description></entry>
                </glossary>
           </section>
        <section id="complianttargets" title="Compliant Targets of Evaluation">
            A Virtualization System (VS) is a software product that enables multiple independent computing systems to execute on the same physical hardware platform without interference from one other. A VS creates a virtualized hardware environment (virtual machines or <abbr linkend="VM"/>s) for each instance of an operating system permitting these environments to execute concurrently while maintaining isolation and the appearance of exclusive control over assigned computing resources. For the purposes of this document, the VS consists of a Virtual Machine Manager (<abbr linkend="VMM"/>), Virtual Machine (<abbr linkend="VM"/>) abstractions, a management subsystem, and other components.<htm:br></htm:br><htm:br></htm:br>
            A <abbr linkend="VMM"/> is a collection of software components responsible for enabling <abbr linkend="VM"/>s to function as expected by the software executing within them. Generally, the <abbr linkend="VMM"/> consists of a Hypervisor, Service <abbr linkend="VM"/>s, and other components of the VS, such as virtual devices, binary translation systems, and physical device drivers. It manages concurrent execution of all <abbr linkend="VM"/>s and virtualizes platform resources as needed.<htm:br></htm:br><htm:br></htm:br>
            The Hypervisor is the software executive of the physical platform of a Virtualization System. A hypervisor operates at the highest CPU privilege level and manages access to all of the physical resources of the hardware platform. It exports a well-defined, protected interface for access to the resources it manages. A Hypervisor’s primary function is to mediate access to all CPU and memory resources, but it is also responsible for either the direct management or the delegation of the management of all other hardware devices on the hardware platform. This document does not specify any Hypervisor-specific requirements, though many <abbr linkend="VMM"/> requirements would naturally apply to a Hypervisor.<htm:br></htm:br><htm:br></htm:br>
            A Service <abbr linkend="VM"/> is a <abbr linkend="VM"/> whose purpose is to support the Hypervisor in providing the resources or services necessary to support Guest <abbr linkend="VM"/>s. Service <abbr linkend="VM"/>s may implement some portion of Hypervisor functionality, but also may contain important system functionality that is not necessary for Hypervisor operation. As with any <abbr linkend="VM"/>, Service <abbr linkend="VM"/>s necessarily execute without full Hypervisor privileges—only the privileges required to perform its designed functionality. Examples of Service <abbr linkend="VM"/>s include device driver <abbr linkend="VM"/>s that manage access to physical devices, and name-service <abbr linkend="VM"/>s that help establish communication paths between <abbr linkend="VM"/>s.<htm:br></htm:br><htm:br></htm:br>
            A Guest <abbr linkend="VM"/> is a <abbr linkend="VM"/> that contains a virtual environment for the execution of an independent computing system. Virtual environments execute mission workloads and implement customer-specific client or server functionality in Guest <abbr linkend="VM"/>s, such as a web server or desktop productivity applications. A Helper <abbr linkend="VM"/> is a <abbr linkend="VM"/> that performs services on behalf of one or more Guest <abbr linkend="VM"/>s, but does not qualify as a Service <abbr linkend="VM"/>—and therefore is not part of the <abbr linkend="VMM"/>. Helper <abbr linkend="VM"/>s implement functions or services that are particular to the workloads of Guest <abbr linkend="VM"/>s. For example, a <abbr linkend="VM"/> that provides a virus scanning service for a Guest <abbr linkend="VM"/> would be considered a Helper <abbr linkend="VM"/>. The line between Helper and Service <abbr linkend="VM"/>s can easily be blurred. For instance, a <abbr linkend="VM"/> that implements a cryptographic function—such as an in-line encryption <abbr linkend="VM"/>—could be identified as either a Service or Helper <abbr linkend="VM"/> depending on the particular virtualization solution. If the cryptographic functions are necessary only for the privacy of Guest <abbr linkend="VM"/> data in support of the Guest’s mission applications, it would be proper to classify the encryption <abbr linkend="VM"/> as a Helper. But if the encryption <abbr linkend="VM"/> is necessary for the <abbr linkend="VMM"/> to isolate Guest <abbr linkend="VM"/>s, it would be proper to classify the encryption <abbr linkend="VM"/> as a Service <abbr linkend="VM"/>. For the purposes of this document, Helper <abbr linkend="VM"/>s are subject to all requirements that apply to Guest <abbr linkend="VM"/>s, unless specifically stated otherwise.<htm:br></htm:br><htm:br></htm:br>
            <subsection id="toeboundary" title="TOE Boundary">
                Figure 1 shows a greatly simplified view of a generic Virtualization System and Platform. <abbr linkend="TOE"/> components are displayed in Red. Non-<abbr linkend="TOE"/> components are in Blue. The Platform is the hardware, firmware, and software onto which the VS is installed. The <abbr linkend="VMM"/> includes the Hypervisor, Service <abbr linkend="VM"/>s, and <abbr linkend="VM"/> containers, but not the software that runs inside Guest <abbr linkend="VM"/>s or Helper <abbr linkend="VM"/>s. The Management Subsystem is part of the <abbr linkend="TOE"/>, but may or may not be part of the <abbr linkend="VMM"/>.   <htm:br></htm:br><htm:br></htm:br>
                <figure entity="images/figure1.png" title="Figure 1: Virtualization System and Platform " id="vsplatform"/> 
                
               
                For purposes of this Protection Profile, the Virtualization System is the <abbr linkend="TOE"/>, subject to some caveats. The Platform onto which the VS is installed (which includes hardware, platform firmware, and Host Operating System) is not part of the <abbr linkend="TOE"/>. Software installed with the VS on the Host OS specifically to support the VS or implement VS functionality is part of the <abbr linkend="TOE"/>. General purpose software—such as device drivers for physical devices and the Host OS itself—is not part of the <abbr linkend="TOE"/>, regardless of whether it supports VS functionality or runs inside a Service <abbr linkend="VM"/> or control domain. Software that runs within Guest and Helper <abbr linkend="VM"/>s is not part of the <abbr linkend="TOE"/>.<htm:br></htm:br><htm:br></htm:br>
                In general, for virtualization products that are installed onto “bare metal,” the entire set of installed components constitute the <abbr linkend="TOE"/>, and the hardware constitute the Platform. Also in general, for products that are hosted by or integrated into a commodity operating system, the components installed expressly for implementing and supporting virtualization are in the <abbr linkend="TOE"/>, and the Platform comprises the hardware and Host OS.
            </subsection>
            <subsection id="platformreqs" title="Requirements Met by the Platform">
                Depending on the way the VS is installed, functions tested under this PP may be implemented by the <abbr linkend="TOE"/> or by the Platform. There is no difference in the testing required whether the function is implemented by the <abbr linkend="TOE"/> or by the Platform. In either case, the tests determine whether the function being tested provides a level of assurance acceptable to meet the goals of this Profile with respect to a particular product and platform. The equivalency guidelines are intended in part to address this <abbr linkend="TOE"/> vs. Platform distinction, and to ensure that the assurance level does not change between instances of equivalent products on equivalent platforms—and also, of course, to ensure that the appropriate testing is done when the distinction is significant.
            </subsection>
            <subsection id="scopecert" title="Scope of Certification">
                Successful evaluation of a Virtualization System against this profile does not constitute or imply successful evaluation of any Host Operating System or Platform—no matter how tightly integrated with the VS. The Platform, including any Host OS, supports the VS through provision of services and resources. Specialized VS components installed on or in a Host OS to support the VS may be considered part of the <abbr linkend="TOE"/>. But general-purpose OS components and functions—whether or not they support the VS—are not part of the <abbr linkend="TOE"/>, and thus are not evaluated under this PP.
            </subsection>
            <subsection id="attestation" title="Vendor Attestation">
                This PP includes several SFRs that include elements that are met via vendor attestation. Attestation assurance activities are reserved for SFRs that define properties that are critical to the system’s security functionality, but that are impossible or impractical to test in a repeatable and consistent manner. These Attestation assurance activities require the vendor to make an assertion in the <abbr linkend="ST"/> that their product meets the specified SFR—no further testing or assessment of the product regarding these SFRs or elements is performed by the CCTL. The CCTL will simply verify that the <abbr linkend="ST"/> includes a pre-determined Attestation statement. By including this statement in the <abbr linkend="ST"/>, the vendor is accepting responsibility for the assurance of their product in these particular areas. If at any time evidence is produced that indicates that these statements are false (and the product does not meet the specified security functionality), the CC certificate may be revoked. See FDP_VMS_EXT.1, FDP_VNC_EXT.1, FPT_VDP_EXT.1, and FPT_VIV_EXT.1 for the associated Attestation statements.
            </subsection>
            <subsection id="equiv" title="Product and Platform Equivalence">
                The tests in this Protection Profile must be run on all product versions and Platforms with which the Vendor would like to claim compliance—subject to this Profile’s equivalency guidelines (to be published).
            </subsection>
            
        </section>
        <section id="usecases" title="Use Cases">
            This base PP does not define any use cases for virtualization technology. Client Virtualization and Server Virtualization products have different use cases and so these are defined in their respective <abbr linkend="EP"/>s.
        </section>
    </chapter>
    <chapter id="claims" title="Conformance Claims">
        <cclaims>
            <cclaim id="statement">
                <description>
                    To be conformant to this PP, an <abbr linkend="ST"/> must demonstrate Exact Conformance, a subset of Strict Conformance as defined in [<abbr linkend="CC"/>] Part 1 (ASE_CCL). The <abbr linkend="ST"/> must include all components in this PP that are:
                    <htm:ul>    
                        <htm:li>Unconditional (which are always required)</htm:li>
                        <htm:li>Selection-based (which are required when certain selections are chosen in the unconditional requirements)
                            and may include components that are</htm:li>
                        <htm:li>Optional</htm:li>
                        <htm:li>Objective.</htm:li>
                    </htm:ul>
                    Unconditional requirements are found in the main body of the document (Section 5), while appendices contain the selection-based, optional, and objective requirements. The <abbr linkend="ST"/> may iterate any of these components but it must not introduce any additional component (e.g., from <abbr linkend="CC"/> Part 2 or 3) that is not defined in this PP.
                </description>
            </cclaim>
            <cclaim id="claims">
                <description>
                    This PP is conformant to Parts 2 (extended) and 3 (extended) of Common Criteria Version 3.1, Revision 4 [<abbr linkend="CC"/>].
                </description>
            </cclaim>
            <cclaim id="ppclaim">
                <description>
                    This PP does not claim conformance to any Protection Profile.
                </description>
            </cclaim>
            <cclaim id="packageclaim">
                <description>
                    This PP does not claim conformance to any packages.
                </description>
            </cclaim>
        </cclaims>
    </chapter>
    <chapter id="desc" title="Security Problem Description">
        <section id="threats" title="Threats">
            <threats>
                <threat id="T.DATA_LEAKAGE">
                    <description>
                        It is a fundamental property of <abbr linkend="VM"/>s that the domains encapsulated by different <abbr linkend="VM"/>s remain separate unless data sharing is permitted by policy. For this reason, all Virtualization Systems shall support a policy that prohibits information transfer between <abbr linkend="VM"/>s.<htm:br></htm:br><htm:br></htm:br>
                        It shall be possible to configure <abbr linkend="VM"/>s such that data cannot be moved between domains from <abbr linkend="VM"/> to <abbr linkend="VM"/>, or through virtual or physical network components under the control of the VS. When <abbr linkend="VM"/>s are configured as such, it shall not be possible for data to leak between domains, neither by the express efforts of software or users of a <abbr linkend="VM"/>, nor because of vulnerabilities or errors in the implementation of the <abbr linkend="VMM"/> or other VS components.<htm:br></htm:br><htm:br></htm:br>
                        If it is possible for data to leak between domains when prohibited by policy, then an adversary on one domain or network can obtain data from another domain. Such cross-domain data leakage can, for example, cause classified information, corporate proprietary information, or personally identifiable information to be made accessible to unauthorized entities.<htm:br></htm:br><htm:br></htm:br>
                    </description>
                    <objective-refer ref="O.VM_ISOLATION">
                        <rationale>Logical separation of <abbr linkend="VM"/>s and enforcement of domain integrity prevent unauthorized transmission of data from one <abbr linkend="VM"/> to another.</rationale>
                    </objective-refer>
                    <objective-refer ref="O.DOMAIN_INTEGRITY">
                        <rationale>Logical separation of <abbr linkend="VM"/>s and enforcement of domain integrity prevent unauthorized transmission of data from one <abbr linkend="VM"/> to another.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNAUTHORIZED_UPDATE">
                    <description>
                        It is common for attackers to target outdated versions of software containing known flaws. This means it is extremely important to update Virtualization System software as soon as possible when updates are available. But the source of the updates and the updates themselves must be trusted. If an attacker can write their own update containing malicious code they can take control of the VS.
                    </description>
                    <objective-refer ref="O.VMM_INTEGRITY">
                        <rationale>System integrity prevents the <abbr linkend="TOE"/> from installing a software patch containing unknown and potentially malicious code.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNAUTHORIZED_MODIFICATION">
                    <description>
                        System integrity is a core security objective for Virtualization Systems. To achieve system integrity, the integrity of each <abbr linkend="VMM"/> component must be established and maintained. Malware running on the platform must not be able to undetectably modify Virtualization System components while the system is running or at rest. Likewise, malicious code running within a virtual machine must not be able to modify Virtualization System components.  
                    </description>
                    <objective-refer ref="O.VMM_INTEGRITY">
                        <rationale>Enforcement of <abbr linkend="VMM"/> integrity prevents the bypass of enforcement mechanisms and auditing ensures that abuse of legitimate authority can be detected.</rationale>
                    </objective-refer>
                    <objective-refer ref="O.AUDIT">
                        <rationale>Enforcement of <abbr linkend="VMM"/> integrity prevents the bypass of enforcement mechanisms and auditing ensures that abuse of legitimate authority can be detected.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.USER_ERROR">
                    <description>
                        If a Virtualization System is capable of simultaneously displaying <abbr linkend="VM"/>s of different domains to the same user at the same time, there is always the chance that the user will become confused and unintentionally leak information between domains. This is especially likely if <abbr linkend="VM"/>s belonging to different domains are indistinguishable. Malicious code may also attempt to interfere with the user’s ability to distinguish between domains. The VS must take measures to minimize the likelihood of such confusion. 
                    </description>
                    <objective-refer ref="O.VM_ISOLATION">
                        <rationale>Isolation of <abbr linkend="VM"/>s includes clear attribution of those <abbr linkend="VM"/>s to their respective domains which reduces the likelihood that a user inadvertently inputs or transfers data meant for one <abbr linkend="VM"/> into another.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.3P_SOFTWARE">
                    <description>
                        In some VS implementations, critical functions are by necessity performed by software not produced by the virtualization vendor. Such software may include Host Operating Systems and physical device drivers. Vulnerabilities in this software can be exploited by an adversary and result in <abbr linkend="VMM"/> compromise. Where possible, the VS should mitigate the results of potential vulnerabilities or malicious content in third-party code.
                    </description>
                    <objective-refer ref="O.VMM_INTEGRITY">
                        <rationale>The <abbr linkend="VMM"/> integrity mechanisms include environment-based vulnerability mitigation and potentially support for introspection and device driver isolation, all of which reduce the likelihood that any vulnerabilities in third-party software can be used to exploit the <abbr linkend="TOE"/>.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.VMM_COMPROMISE">
                    <description>
                        The Virtualization System is designed to provide the appearance of exclusivity to the <abbr linkend="VM"/>s and is designed to separate or isolate their functions except where specifically shared. Failure of security mechanisms could lead to unauthorized intrusion into or modification of the <abbr linkend="VMM"/>, or bypass of the <abbr linkend="VMM"/> altogether. This must be prevented to avoid compromising the Virtualization System.
                    </description>
                    <objective-refer ref="O.VMM_INTEGRITY">
                        <rationale>Maintaining the integrity of the <abbr linkend="VMM"/> and ensuring that <abbr linkend="VM"/>s execute in isolated domains mitigate the risk that the <abbr linkend="VMM"/> can be compromised or bypassed.</rationale>
                    </objective-refer>
                    <objective-refer ref="O.VM_ISOLATION">
                        <rationale>Maintaining the integrity of the <abbr linkend="VMM"/> and ensuring that <abbr linkend="VM"/>s execute in isolated domains mitigate the risk that the <abbr linkend="VMM"/> can be compromised or bypassed.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.PLATFORM_COMPROMISE">
                    <description>
                        The VS must be capable of protecting the platform from threats that originate within <abbr linkend="VM"/>s and operational networks connected to the VS. The hosting of untrusted—even malicious—domains by the VS cannot be permitted to compromise the security and integrity of the platform on which the VS executes. If an attacker can access the underlying platform in a manner not controlled by the <abbr linkend="VMM"/>, the attacker might be able to modify system firmware or software—compromising both the Virtualization System and the underlying platform.
                    </description>
                    <objective-refer ref="O.PLATFORM_INTEGRITY">
                        <rationale>Platform integrity mechanisms used by the <abbr linkend="TOE"/> reduce the risk that an attacker can ‘break out’ of a <abbr linkend="VM"/> and affect the platform on which the VS is running.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNAUTHORIZED_ACCESS">
                    <description>
                        Functions performed by the management layer include <abbr linkend="VM"/> configuration, virtualized network configuration, allocation of physical resources, and reporting. Only certain authorized system users (administrators) are allowed to exercise management functions.<htm:br></htm:br><htm:br></htm:br>
                        Virtualization Systems are often managed remotely over communication networks. Members of these networks can be both geographically and logically separated from each other, and pass through a variety of other systems which may be under the control of an adversary, and offer the opportunity for communications to be compromised. An adversary with access to an open management network could inject commands into the management infrastructure. This would provide an adversary with administrator privilege on the platform, and administrative control over the <abbr linkend="VM"/>s and virtual network connections. The adversary could also gain access to the management network by hijacking the management network channel.
                    </description>
                    <objective-refer ref="O.MANAGEMENT_ACCESS">
                        <rationale>Ensuring that <abbr linkend="TSF"/> management functions cannot be executed without authorization prevents untrusted subjects from modifying the behavior of the <abbr linkend="TOE"/> in an unanticipated manner.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.WEAK_CRYPTO">
                    <description>
                        To the extent that <abbr linkend="VM"/>s appear isolated within the Virtualization System, a threat of weak cryptography may arise if the <abbr linkend="VMM"/> does not provide good entropy to support security-related features that depend on entropy to implement cryptographic algorithms. For example, a random number generator keeps an estimate of the number of bits of noise in the entropy pool. From this entropy pool random numbers are created. Good random numbers are essential to implementing strong cryptography. Cryptography implemented using poor random numbers can be defeated by a sophisticated adversary.
                    </description>
                    <objective-refer ref="O.VM_ENTROPY">
                        <rationale>Acquisition of good entropy is necessary to support the <abbr linkend="TOE"/>’s security-related cryptographic algorithms.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNPATCHED_SOFTWARE">
                    <description>
                        Vulnerabilities in outdated or unpatched software can be exploited by adversaries to compromise the Virtualization System or platform.
                    </description>
                    <objective-refer ref="O.PATCHED_SOFTWARE">
                        <rationale>The ability to patch the <abbr linkend="TOE"/> software ensures that protections against vulnerabilities can be applied as they become available.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.MISCONFIGURATION">
                    <description>
                        The Virtualization System may be misconfigured, which could impact its functioning and security. This misconfiguration could be due to an administrative error or the use of faulty configuration data.
                    </description>
                    <objective-refer ref="O.CORRECTLY_APPLIED_CONFIGURATION">
                        <rationale>Mechanisms to prevent the application of configurations that violate the current security policy help prevent misconfigurations.</rationale>
                    </objective-refer>
                </threat>
                <threat id="T.DENIAL_OF_SERVICE">
                    <description>
                        A <abbr linkend="VM"/> may block others from system resources (e.g., system memory, persistent storage, and processing time) via a resource exhaustion attack.
                    </description>
                    <objective-refer ref="O.RESOURCE_ALLOCATION">
                        <rationale>The ability of the <abbr linkend="TSF"/> to ensure the proper allocation of resources makes denial of service attacks more difficult.</rationale>
                    </objective-refer>
                </threat>
            </threats>
        </section>
        <section id="assumptions" title="Assumptions">
            <assumptions>
                <assumption id="A.PLATFORM_INTEGRITY">
                    <description>The platform has not been compromised prior to installation of the Virtualization System.</description>
                    <objective-refer ref="OE.PLATFORM_INTEGRITY">
                        <rationale>If the underlying platform has not been compromised prior to installation of the <abbr linkend="TOE"/>, its integrity can be assumed to be intact.</rationale>
                    </objective-refer>
                </assumption>
                <assumption id="A.PHYSICAL">
                    <description>Physical security commensurate with the value of the <abbr linkend="TOE"/> and the data it contains is assumed to be provided by the environment.</description>
                    <objective-refer ref="OE.PHYSICAL">
                        <rationale>If the <abbr linkend="TOE"/> is deployed in a location that has appropriate physical safeguards, it can be assumed to be physically secure.</rationale>
                    </objective-refer>
                </assumption>
                <assumption id="A.TRUSTED_ADMIN">
                    <description><abbr linkend="TOE"/> Administrators are trusted to follow and apply all administrator guidance.</description>
                    <objective-refer ref="OE.TRUSTED_ADMIN">
                        <rationale>Providing guidance to administrators and ensuring that individuals are properly trained and vetted before being given administrative responsibilities will ensure that they are trusted.</rationale>
                    </objective-refer>
                </assumption>
                <assumption id="A.COVERT_CHANNELS">
                    <description>If the <abbr linkend="TOE"/> has covert storage or timing channels, then for all <abbr linkend="VM"/>s executing on that <abbr linkend="TOE"/>, it is assumed that relative to the IT assets to which they have access, those <abbr linkend="VM"/>s will have assurance sufficient to outweigh the risk that they will violate the security policy of the <abbr linkend="TOE"/> by using those covert channels.</description>
                    <objective-refer ref="OE.COVERT_CHANNELS">
                        <rationale>It is expected that any data contained within <abbr linkend="VM"/>s is commensurate with the security provided by the <abbr linkend="TOE"/>, which includes any vulnerabilities due to the potential presence of covert storage and/or timing channels.</rationale>
                    </objective-refer>
                </assumption>
                <assumption id="A.NON_MALICIOUS_USER">
                    <description>The user of the VS is not willfully negligent or hostile, and uses the VS in compliance with the applied enterprise security policy and guidance. At the same time, malicious applications could act as the user, so requirements which confine malicious applications are still in scope.</description>
                    <objective-refer ref="OE.NON_MALICIOUS_USER">
                        <rationale>If the organization properly vets and trains users, it is expected that they will be non-malicious.</rationale>
                    </objective-refer>
                </assumption>
            </assumptions>
        </section>
        <section id="secpolicies" title="Organizational Security Policies">
            There are no organizational security policies defined for this PP.
        </section>
    </chapter>
    <chapter id="obj" title="Security Objectives">
        <section id="secobjtoe" title="Security Objectives for the TOE">
            <SOs>
                <SO id="O.VM_ISOLATION">
                    <description><abbr linkend="VM"/>s are the fundamental subject of the system. The <abbr linkend="VMM"/> is responsible for applying the system security policy (<abbr linkend="SSP"/>) to the <abbr linkend="VM"/> and all resources. As basic functionality, the <abbr linkend="VMM"/> must support a security policy that mandates no information transfer between <abbr linkend="VM"/>s.<htm:br></htm:br><htm:br></htm:br>
                        The <abbr linkend="VMM"/> must support the necessary mechanisms to isolate the resources of all <abbr linkend="VM"/>s. The <abbr linkend="VMM"/> partitions a platform's physical resources for use by the supported virtual environments. Depending on the use case, a <abbr linkend="VM"/> may require a completely isolated environment with exclusive access to system resources, or share some of its resources with other <abbr linkend="VM"/>s. It must be possible to enforce a security policy that prohibits the transfer of data between <abbr linkend="VM"/>s through shared devices. When the platform security policy allows the sharing of resources across <abbr linkend="VM"/> boundaries, the <abbr linkend="VMM"/> must ensure that all access to those resources is consistent with the policy. The <abbr linkend="VMM"/> may delegate the responsibility for the mediation of sharing of particular resources to select Service <abbr linkend="VM"/>s; however in doing so, it remains responsible for mediating access to the Service <abbr linkend="VM"/>s, and each Service <abbr linkend="VM"/> must mediate all access to any shared resource that has been delegated to it in accordance with the <abbr linkend="SSP"/>.<htm:br></htm:br><htm:br></htm:br>
                        Devices, whether virtual or physical, are resources requiring access control. The <abbr linkend="VMM"/> must enforce access control in accordance to system security policy. Physical devices are platform devices with access mediated via the <abbr linkend="VMM"/> per the O.VMM_Integrity objective. Virtual devices may include virtual storage devices and virtual network devices. Some of the access control restrictions must be enforced internal to Service <abbr linkend="VM"/>s, as may be the case for isolating virtual networks. <abbr linkend="VMM"/>s may also expose purely virtual interfaces. These are <abbr linkend="VMM"/> specific, and while they are not analogous to a physical device, they are also subject to access control.<htm:br></htm:br><htm:br></htm:br>
                        The <abbr linkend="VMM"/> must support the mechanisms to isolate all resources associated with virtual networks and to limit a <abbr linkend="VM"/>'s access to only those virtual networks for which it has been configured. The <abbr linkend="VMM"/> must also support the mechanisms to control the configurations of virtual networks according to the <abbr linkend="SSP"/>.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.VMM_INTEGRITY">
                    <description>Integrity is a core security objective for Virtualization Systems. To achieve system integrity, the integrity of each <abbr linkend="VMM"/> component must be established and maintained. This objective concerns only the integrity of the Virtualization System—not the integrity of software running inside of Guest <abbr linkend="VM"/>s or of the physical platform. The overall objective is to ensure the integrity of critical components of a Virtualization System.<htm:br></htm:br><htm:br></htm:br>
                        Initial integrity of a VS can be established through mechanisms such as a digitally signed installation or update package, or through integrity measurements made at launch. Integrity is maintained in a running system by careful protection of the <abbr linkend="VMM"/> from untrusted users and software. For example, it must not be possible for software running within a Guest <abbr linkend="VM"/> to exploit a vulnerability in a device or hypercall interface and gain control of the <abbr linkend="VMM"/>. The vendor must release patches for vulnerabilities as soon as practicable after discovery.<htm:br></htm:br><htm:br></htm:br>
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.PLATFORM_INTEGRITY">
                    <description>The integrity of the <abbr linkend="VMM"/> depends on the integrity of the hardware and software on which the <abbr linkend="VMM"/> relies. Although the VS does not have complete control over the integrity of the platform, the VS should as much as possible try to ensure that no users or software hosted by the VS is capable of undermining the integrity of the platform.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.DOMAIN_INTEGRITY">
                    <description>While the VS is not responsible for the contents or correct functioning of software that runs within Guest <abbr linkend="VM"/>s, it is responsible for ensuring that the correct functioning of the software within a Guest <abbr linkend="VM"/> is not interfered with by other <abbr linkend="VM"/>s.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.MANAGEMENT_ACCESS">
                    <description><abbr linkend="VMM"/> management functions include <abbr linkend="VM"/> configuration, virtualized network configuration, allocation of physical resources, and reporting. Only certain authorized system users (administrators) are allowed to exercise management functions.<htm:br></htm:br><htm:br></htm:br>
                        Because of the privileges exercised by the <abbr linkend="VMM"/> management functions, it must not be possible for the <abbr linkend="VMM"/>’s management components to be compromised without administrator notification. This means that unauthorized users cannot be permitted access to the management functions, and the management components must not be interfered with by Guest <abbr linkend="VM"/>s or unprivileged users on other networks—including operational networks connected to the <abbr linkend="TOE"/>.<htm:br></htm:br><htm:br></htm:br>
                        <abbr linkend="VMM"/>s include a set of management functions that collectively allow administrators to configure and manage the <abbr linkend="VMM"/>, as well as configure Guest <abbr linkend="VM"/>s. These management functions are specific to the virtualization system, distinct from any other management functions that might exist for the internal management of any given Guest <abbr linkend="VM"/>. These <abbr linkend="VMM"/> management functions are privileged, with the security of the entire system relying on their proper use. The <abbr linkend="VMM"/> management functions can be classified into different categories and the policy for their use and the impact to security may vary accordingly.<htm:br></htm:br><htm:br></htm:br>
                        The management functions might be distributed throughout the <abbr linkend="VMM"/> (within the <abbr linkend="VMM"/> and Service <abbr linkend="VM"/>s). The <abbr linkend="VMM"/> must support the necessary mechanisms to enable the control of all management functions according to the system security policy. When a management function is distributed among multiple Service <abbr linkend="VM"/>s, the <abbr linkend="VM"/>s must be protected using the security mechanisms of the Hypervisor and any Service <abbr linkend="VM"/>s involved to ensure that the intent of the system security policy is not compromised. Additionally, since hypercalls permit Guest <abbr linkend="VM"/>s to invoke the Hypervisor, and often allow the passing of data to the Hypervisor, it is important that the hypercall interface is well-guarded and that all parameters be validated.<htm:br></htm:br><htm:br></htm:br>
                        The <abbr linkend="VMM"/> maintains configuration data for every <abbr linkend="VM"/> on the system. This configuration data, whether of Service or Guest <abbr linkend="VM"/>s, must be protected. The mechanisms used to establish, modify and verify configuration data are part of the VS management functions and must be protected as such. The proper internal configuration of Service <abbr linkend="VM"/>s that provide critical security functions can also greatly impact VS security. These configurations must also be protected. Internal configuration of Guest <abbr linkend="VM"/>s should not impact overall VS security. The overall goal is to ensure that the <abbr linkend="VMM"/>, including the environments internal to Service <abbr linkend="VM"/>s, is properly configured and that all Guest <abbr linkend="VM"/> configurations are maintained consistent with the system security policy throughout their lifecycle.<htm:br></htm:br><htm:br></htm:br>
                        Virtualization Systems are often managed remotely. For example, an administrator can remotely update virtualization software, start and shut down <abbr linkend="VM"/>s, and manage virtualized network connections. If a console is required, it could be run on a separate machine or it could itself run in a <abbr linkend="VM"/>. When performing remote management, an administrator must communicate with a privileged management agent over a network. Communications with the management infrastructure must be protected from Guest <abbr linkend="VM"/>s and operational networks.<htm:br></htm:br><htm:br></htm:br>
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.PATCHED_SOFTWARE">
                    <description>The Virtualization System must be updated and patched when needed in order to prevent the potential compromise of the <abbr linkend="VMM"/>, as well as the networks and <abbr linkend="VM"/>s that it hosts. Identifying and applying needed updates must be a normal part of the operating procedure to ensure that patches are applied in a timely and thorough manner. In order to facilitate this, the VS must support standards and protocols that help enhance the manageability of the VS as an IT product, enabling it to be integrated as part of a manageable network (e.g., reporting current patch level and patchability).
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.VM_ENTROPY">
                    <description><abbr linkend="VM"/>s must have access to good entropy sources to support security-related features that implement cryptographic algorithms. For example, in order to function as members of operational networks, <abbr linkend="VM"/>s must be able to communicate securely with other network entities—whether virtual or physical. They must therefore have access to sources of good entropy to support that secure communication.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.AUDIT">
                    <description>The purpose of audit is to capture and protect data about what happens on a system so that it can later be examined to determine what has happened in the past.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.CORRECTLY_APPLIED_CONFIGURATION">
                    <description>The <abbr linkend="TOE"/> must not apply configurations that violate the current security policy.<htm:br></htm:br><htm:br></htm:br>
                        The <abbr linkend="TOE"/> must correctly apply configurations and policies to newly created Guest <abbr linkend="VM"/>s, as well as to existing Guest <abbr linkend="VM"/>s when applicable configuration or policy changes are made. All changes to configuration and to policy must conform to the existing security policy. Similarly, changes made to the configuration of the <abbr linkend="TOE"/> itself must not violate the existing security policy.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="O.RESOURCE_ALLOCATION">
                    <description>The <abbr linkend="TOE"/> will provide mechanisms that enforce constraints on the allocation of system resources in accordance with existing security policy.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                
            </SOs>
        </section>
        <section id="secobjoe" title="Security Objectives for the Operational Environment">
            <SOs>
                <SO id="OE.CONFIG">
                    <description><abbr linkend="TOE"/> administrators will configure the Virtualization System correctly to create the intended security policy.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="OE.PHYSICAL">
                    <description>Physical security, commensurate with the value of the <abbr linkend="TOE"/> and the data it contains, is provided by the environment.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="OE.TRUSTED_ADMIN">
                    <description><abbr linkend="TOE"/> Administrators are trusted to follow and apply all administrator guidance in a trusted manner.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="OE.COVERT_CHANNELS">
                    <description>If the <abbr linkend="TOE"/> has covert storage or timing channels, then for all <abbr linkend="VM"/>s executing on that <abbr linkend="TOE"/>, it is assumed that those <abbr linkend="VM"/>s will have sufficient assurance relative to the IT assets to which they have access, to outweigh the risk that they will violate the security policy of the <abbr linkend="TOE"/> by using those covert channels.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                <SO id="OE.NON_MALICIOUS_USER">
                    <description>Users are trusted to be not willfully negligent or hostile and use the VS in compliance with the applied enterprise security policy and guidance.
                    </description>
                    <component-refer ref="FAU_ALT_EXT.1"/><!-- HERE this is incorrect, I just grabbed something for filler -->
                </SO>
                
            </SOs>
        </section>

    </chapter>
    <chapter id="req" title="Security Requirements">
        <section id="sfr" title="TOE Security Functional Requirements">
            The Security Functional Requirements (SFRs) included in this section are derived from Part 2 of the Common Criteria for Information Technology Security Evaluation, Version 3.1, Revision 4, with additional extended functional components.<htm:br></htm:br><htm:br></htm:br>
            The <abbr linkend="CC"/> defines operations on Security Functional Requirements: assignments, selections, assignments within selections and refinements. This document uses the following font conventions to identify the operations defined by the <abbr linkend="CC"/>:<htm:br></htm:br><htm:br></htm:br>
            <htm:ul>
                <htm:li>
                    <htm:b>Refinement</htm:b> operation (denoted by <htm:b>bold text</htm:b>): is used to add details to a
                    requirement, and thus further restricts a requirement.</htm:li>
                <htm:li>
                    <htm:b>Selection</htm:b> (denoted by <htm:i>italicized text</htm:i>): is used to select one or more options
                    provided by the [<abbr linkend="CC"/>] in stating a requirement.</htm:li>
                <htm:li>
                    <htm:b>Assignment</htm:b> operation (denoted by <htm:span class="assignable-content">italicized text</htm:span>): is used to assign a specific value to an unspecified parameter, such as the length of a password. Showing the value in square brackets indicates assignment.</htm:li>
                <htm:li>
                    <htm:b>Iteration</htm:b> operation: are identified with a number inside parentheses (e.g. "(1)")</htm:li>
            </htm:ul>
            <subsection id="fau" title="Security Audit (FAU)">
                <f-component id="FAU_GEN.1" name="Audit Data Generation"  status="threshold">
                    <f-element id="FAU_GEN.1.1">
                        <title>The <abbr linkend="TSF"/> shall be able to generate an audit record of the following auditable events:
                            <htm:ol type="a">
                                <htm:li>Start-up and shutdown of audit functions</htm:li>
                                <htm:li>All administrative actions</htm:li>
                                <htm:li>[Specifically defined auditable events in Table 1]</htm:li>
                                <htm:li><selectables>
                                    <selectable>additional information defined in Table 2</selectable>
                                    <selectable>additional information defined in Table 3</selectable>
                                    <selectable>additional information defined in Table 4</selectable>
                                    <selectable>additional information defined in in Table 5</selectable>
                                    <selectable>no other information</selectable>
                                </selectables></htm:li>
                            </htm:ol> 
                        </title>
                    </f-element>
                    <f-element id="FAU_GEN.1.2">
                        <title>The <abbr linkend="TSF"/> shall record within each audit record at least the following information:
                            <htm:ol type="a">
                                <htm:li>Date and time of the event</htm:li>
                                <htm:li>Type of event</htm:li>
                                <htm:li>Subject and object identity (if applicable)</htm:li>
                                <htm:li>The outcome (success or failure) of the event</htm:li>
                                <htm:li>[Additional information defined in Table 1]</htm:li>
                                <htm:li><selectables>
                                    <selectable>additional information defined in Table 2</selectable>
                                    <selectable>additional information defined in Table 3</selectable>
                                    <selectable>additional information defined in Table 4</selectable>
                                    <selectable>additional information defined in in Table 5</selectable>
                                    <selectable>no other information</selectable>
                                </selectables></htm:li>
                            </htm:ol> 
                        </title>
                        <note role="application">
                            The <abbr linkend="ST"/> author can include other auditable events directly in Table 1; they are not limited to the list presented. The <abbr linkend="ST"/> author should update the table in FAU_GEN.1.2 with any additional information generated. “Subject identity” in FAU_GEN.1.2 could be a user id or an identifier specifying a <abbr linkend="VM"/>, for example.<htm:br></htm:br><htm:br></htm:br>
                            If ‘additional information defined in Table 3’ is selected, it is acceptable to include individual 
                            entries from Table 3 without including the entirety of Table 3.  Appropriate entries from Tables 2, 4,
                            and 5 should be included in the <abbr linkend="ST"/> if the associated SFRs and selections are included.<htm:br></htm:br><htm:br></htm:br>
                            The Table 1 entry for FDP_VNC_EXT.1 refers to configuration settings that attach <abbr linkend="VM"/>s to virtualized network components. Changes to these configurations can be made during <abbr linkend="VM"/> execution or when <abbr linkend="VM"/>s are not running. Audit records must be generated for either case.<htm:br></htm:br><htm:br></htm:br>
                            The intent of the audit requirement for FDP_PPR_EXT.1 is to log that the <abbr linkend="VM"/> is connected to a physical device (when the device becomes part of the <abbr linkend="VM"/>’s hardware view), not to log every time that the device is accessed. Generally, this is only once at <abbr linkend="VM"/> startup. However, some devices can be connected and disconnected during operation (e.g., virtual USB devices such as CD-ROMs). All such connection/disconnection events must be logged.
                        </note>
                        <aactivity>
                            The evaluator shall check the <abbr linkend="TSS"/> and ensure that it lists all of the auditable events and provides a format for audit records. Each audit record format type shall be covered, along with a brief description of each field. The evaluator shall check to make sure that every audit event type mandated by the PP is described in the <abbr linkend="TSS"/>.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall also make a determination of the administrative actions that are relevant in the context of this PP. The evaluator shall examine the administrative guide and make a determination of which administrative commands, including subcommands, scripts, and configuration files, are related to the configuration (including enabling or disabling) of the mechanisms implemented in the <abbr linkend="TOE"/> that are necessary to enforce the requirements specified in the PP. The evaluator shall document the methodology or approach taken while determining which actions in the administrative guide are security-relevant with respect to this PP.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the <abbr linkend="TOE"/>’s ability to correctly generate audit records by having the <abbr linkend="TOE"/> generate audit records for the events listed and administrative actions. For administrative actions, the evaluator shall test that each action determined by the evaluator above to be security relevant in the context of this PP is auditable. When verifying the test results, the evaluator shall ensure the audit records generated during testing match the format specified in the administrative guide, and that the fields in each audit record have the proper entries.<htm:br></htm:br><htm:br></htm:br>
                            Note that the testing here can be accomplished in conjunction with the testing of the security mechanisms directly.<htm:br></htm:br><htm:br></htm:br>
                            <!-- HERE do table 1 from page 22 -->
                            <htm:table border="1">
                                <htm:caption>Table 1: Auditable Events</htm:caption>
                                <htm:TR class="header">
                                    <htm:TH>Requirement</htm:TH>
                                    <htm:TH>Auditable Events</htm:TH>
                                    <htm:TH>Additional Audit Record Contents</htm:TH>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FAU_GEN.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FAU_SAR.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FAU_STG.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FAU_STG_EXT.1</htm:TD>
                                    <htm:TD>Failure of audit data capture due to lack of disk space or pre-defined limit.<htm:br></htm:br>
                                        On failure of logging function, capture record of failure and record upon restart of logging function.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_CKM.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_CKM.2</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_CKM_EXT.4</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_COP.1(1)</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_COP.1(2)</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_COP.1(3)</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_COP.1(4)</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_RBG_EXT.1</htm:TD>
                                    <htm:TD>Failure of the randomization process.</htm:TD>
                                    <htm:TD>No additional information.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FCS_ENT_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_HBI_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_PPR_EXT.1</htm:TD>
                                    <htm:TD>Successful and failed <abbr linkend="VM"/> connections to physical devices where connection is governed by configurable policy.<htm:br></htm:br>
                                        Security policy violations.</htm:TD>
                                    <htm:TD>VM and physical device identifiers.<htm:br></htm:br>
                                        Identifier for the security policy that was violated.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_RIP_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_RIP_EXT.2</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_VMS_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FDP_VNC_EXT.1</htm:TD>
                                    <htm:TD>Successful and failed attempts to connect <abbr linkend="VM"/>s to virtual and physical networking components.<htm:br></htm:br>
                                        Security policy violations.<htm:br></htm:br>
                                        Administrator configuration of inter-VM communications channels between <abbr linkend="VM"/>s.<htm:br></htm:br>
                                    </htm:TD>
                                    <htm:TD>VM and virtual or physical networking component identifiers.<htm:br></htm:br>
                                        Identifier for the security policy that was violated.<htm:br></htm:br></htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FIA_UAU.5</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FIA_UIA_EXT.1</htm:TD>
                                    <htm:TD>Administrator authentication attempts<htm:br></htm:br>
                                        All use of the identification and authentication mechanism.
                                    </htm:TD>
                                    <htm:TD>Provided user identity, origin of the attempt (e.g. console, remote IP address).</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FMT_MSA_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FMT_SMO_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FMT_SMR.2</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_DVD_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_HAS_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_EEM_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_HCL_EXT.1</htm:TD>
                                    <htm:TD>Attempts to access disabled hypercall interfaces<htm:br></htm:br>
                                        Security policy violations.</htm:TD>
                                    <htm:TD>Interface for which access was attempted.<htm:br></htm:br>
                                        Identifier for the security policy that was violated.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_RDM_EXT.1</htm:TD>
                                    <htm:TD>Connection/disconnection of removable media or device to/from a VM.<htm:br></htm:br><htm:br></htm:br>
                                        Ejection/insertion of removable media or device from/to an already connected VM.</htm:TD>
                                    <htm:TD>VM Identifier, Removable media/device identifier, event description or identifier (connect/disconnect, ejection/insertion, etc.)</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_TUD_EXT.1</htm:TD>
                                    <htm:TD>Initiation of update.<htm:br></htm:br>
                                        Failure of signature verification.
                                    </htm:TD>
                                    <htm:TD>No additional information.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_VDP_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FPT_VIV_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FTA_TAB.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FTP_ITC_EXT.1</htm:TD>
                                    <htm:TD>Initiation of the trusted channel.<htm:br></htm:br>
                                        Termination of the trusted channel.<htm:br></htm:br>
                                        Failures of the trusted path functions.</htm:TD>
                                    <htm:TD>User ID and remote source (IP Address) if feasible.</htm:TD>
                                </htm:TR>
                                
                                <htm:TR>
                                    <htm:TD>FTP_UIF_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FTP_UIF_EXT.2</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                             </htm:table>
                            
                            
                            
                            
                            <!-- HERE do the table on page 78 here??, Table 2: Auditable Events-->
                            <!-- HERE do the table on page 80 here???, Table 3: Auditable Events -->
                            <!-- HERE table from 114??-->
                            <!-- HERE table from 118??-->
                            
                            
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FAU_SAR.1" name="Audit Review"  status="threshold">
                    <f-element id="FAU_SAR.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide [administrators] with the capability to read [all information] from the audit records.
                        </title>
                    </f-element>
                    <f-element id="FAU_SAR.1.2">
                        <title>The <abbr linkend="TSF"/> shall provide the audit records in a manner suitable for the user to interpret the information.
                        </title>
                        <aactivity>The evaluator shall verify that the audit records provide all of the information specified in FAU_GEN.1 and that this information is suitable for human interpretation. The evaluator shall review the operational guidance for the procedure on how to review the audit records. The assurance activity for this requirement is performed in conjunction with the assurance activity for FAU_GEN.1.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FAU_STG.1" name="Protected Audit Trail Storage"  status="threshold">
                    <f-element id="FAU_STG.1.1">
                        <title>The <abbr linkend="TSF"/> shall protect the stored audit records in the audit trail from unauthorized deletion.
                        </title>
                    </f-element>
                    <f-element id="FAU_STG.1.2">
                        <title>The <abbr linkend="TSF"/> shall be able to [prevent] modifications to the stored audit records in the audit trail.
                        </title>
                        <note role="application">The assurance activity for this SFR is not intended to imply that the <abbr linkend="TOE"/> must support an administrator’s ability to designate individual audit records for deletion. That level of granularity is not required.</note>
                        <aactivity>The evaluator shall ensure that the <abbr linkend="TSS"/> describes how the audit records are protected from unauthorized modification or deletion. The evaluator shall ensure that the <abbr linkend="TSS"/> describes the conditions that must be met for authorized deletion of audit records. The evaluator shall perform the following tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall access the audit trail as an unauthorized Administrator and attempt to modify and delete the audit records. The evaluator shall verify that these attempts fail.</test>
                                <test>The evaluator shall access the audit trail as an authorized Administrator and attempt to delete the audit records. The evaluator shall verify that these attempts succeed. The evaluator shall verify that only the records authorized for deletion are deleted.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FAU_STG_EXT.1" name="Off-Loading of Audit Data"  status="threshold">
                    <f-element id="FAU_STG_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall be able to transmit the generated audit data to an external IT entity using a trusted channel as specified in FTP_ITC_EXT.1.
                        </title>
                        <aactivity>
                            Protocols used for implementing the trusted channel must be selected in FTP_ITC_EXT.1.
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure it describes the means by which the audit data are transferred to the external audit server, and how the trusted channel is provided. Testing of the trusted channel mechanism is to be performed as specified in the assurance activities for FTP_ITC_EXT.1. The evaluator shall also examine the operational guidance to ensure it describes how to establish the trusted channel to the audit server, as well as describe any requirements on the audit server (particular audit server protocol, version of the protocol required, etc.), as well as configuration of the <abbr linkend="TOE"/> needed to communicate with the audit server.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test for this requirement:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall establish a session between the <abbr linkend="TOE"/> and the audit server according to the configuration guidance provided. The evaluator shall then examine the traffic that passes between the audit server and the <abbr linkend="TOE"/> during several activities of the evaluator’s choice designed to generate audit data to be transferred to the audit server. The evaluator shall observe that these data are not able to be viewed in the clear during this transfer, and that they are successfully received by the audit server. The evaluator shall record the particular software (name, version) used on the audit server during testing.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FAU_STG_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall 
                            <selectables>
                                <selectable>drop new audit data</selectable>
                                <selectable>overwrite previous audit records according to the following rule: 
                                    <assignable>rule for overwriting previous audit records</assignable></selectable>
                                <selectable><assignable>other action</assignable></selectable>
                            </selectables>
                            when the local storage space for audit data is full.
                        </title>
                        <note role="application">An external log server, if available, might be used as alternative storage space in case the local storage space is full. An ‘other action’ could be defined in this case as ‘send the new audit data to an external IT entity’.</note>
                        <aactivity>
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure it describes what happens when the local audit data store is full. The evaluator shall also examine the operational guidance to determine that it describes the relationship between the local audit data and the audit data that are sent to the audit log server. For example, when an audit event is generated, is it simultaneously sent to the external server and the local store, or is the local store used as a buffer and “cleared” periodically by sending the data to the audit server.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform operations that generate audit data and verify that this data is stored locally. The evaluator shall perform operations that generate audit data until the local storage space is exceeded and verifies that the <abbr linkend="TOE"/> complies with the behavior defined in the <abbr linkend="ST"/> for FAU_STG_EXT.1.2.
                        </aactivity>
                    </f-element>
                </f-component>
                
                <f-component id="FAU_ARP.1" name="Security Audit Automatic Response"  status="optional">
                    <f-element id="FAU_ARP.1.1">
                        <title>The <abbr linkend="TSF"/> shall take <assignable>list of actions</assignable> upon detection of a potential security violation.
                        </title>
                        <note role="application">In certain cases, it may be useful for Virtualization Systems to perform automated responses to certain security events. An example may include halting a <abbr linkend="VM"/> which has taken some action to violate a key system security policy. This may be especially useful with headless endpoints when there is no human user in the loop.<htm:br></htm:br><htm:br></htm:br>
                            The potential security violation mentioned in FAU_ARP.1.1 refers to FAU_SAA.1. </note>
                        <aactivity>The evaluator shall generate a potential security violation as defined in FAU_SAA.1 and verify that each action in the assignment in FAU_ARP.1.1 is performed by the <abbr linkend="TSF"/> as a result. The evaluator shall perform this action for each security violation that is defined in FAU_SAA.1.
                        </aactivity>
                    </f-element>
                </f-component>               
                <f-component id="FAU_SAA.1" name="Security Audit Analysis"  status="optional">
                    <f-element id="FAU_SAA.1.1">
                        <title>The <abbr linkend="TSF"/> shall be able to apply a set of rules in monitoring the audited events and based upon these rules indicate a potential violation of the enforcement of the SFRs.
                        </title>
                    </f-element>
                    <f-element id="FAU_SAA.1.2">
                        <title>The <abbr linkend="TSF"/> shall enforce the following rules for monitoring audited events:
                            <htm:ol type="a">
                                <htm:li>accumulation or combination of <assignable>subset of defined auditable events</assignable> known to indicate a potential security violation</htm:li>
                                <htm:li><assignable>any other rules</assignable></htm:li>
                            </htm:ol>
                        </title>
                        <note role="application">The potential security violation described in FAU_SAA.1 can be used as a trigger for automated responses as defined in FAU_ARP.1.</note>
                        <aactivity>The evaluator shall cause each combination of auditable events defined in FAU_SAA.1.2 to occur, and verify that a potential security violation is indicated by the <abbr linkend="TSF"/>.
                        </aactivity>
                    </f-element>
                </f-component>               
            </subsection>
            <subsection id="fcs" title="Cryptographic Support">
                <f-component id="FCS_CKM.1" name="Cryptographic Key Generation" status="threshold">
                    <f-element id="FCS_CKM.1.1">
                        <title> The <abbr linkend="TSF"/> shall generate asymmetric cryptographic keys in accordance with a specified cryptographic key generation algorithm   
                            <selectables linebreak="yes">
                                <selectable>
                                    RSA schemes using cryptographic key sizes [2048-bit or greater] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.3]
                                </selectable>
                                <selectable>
                                    ECC schemes using [“NIST curves” P-256, P-384, and 
                                    <selectables>
                                        <selectable> P-521 </selectable>
                                        <selectable> no other curves </selectable>
                                    </selectables>
                                    that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.4]
                                    </selectable>
                                <selectable>
                                    FFC schemes using cryptographic key sizes [2048-bit or greater] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.1]].
                                </selectable>
                            </selectables>. 
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author selects all key generation schemes used for key establishment and device authentication. When key generation is used for key establishment, the schemes in FCS_CKM.2.1 and selected cryptographic protocols shall match the selection. When key generation is used for device authentication, the public key is expected to be associated with an X.509v3 certificate.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="TOE"/> acts as a receiver in the RSA key establishment scheme, the <abbr linkend="TOE"/> does not need to implement RSA key generation.
                        </note>
                        <aactivity>
                            The evaluator shall ensure that the <abbr linkend="TSS"/> identifies the key sizes supported by the <abbr linkend="TOE"/>. If the <abbr linkend="ST"/> specifies more than one scheme, the evaluator shall examine the <abbr linkend="TSS"/> to verify that it identifies the usage for each scheme.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify that the AGD guidance instructs the administrator how to configure the <abbr linkend="TOE"/> to use the selected key generation scheme(s) and key size(s) for all uses defined in this PP.<htm:br></htm:br><htm:br></htm:br>
                            Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Key Generation for FIPS PUB 186-4 RSA Schemes</htm:b><htm:br></htm:br> 
                            The evaluator shall verify the implementation of RSA Key Generation by the <abbr linkend="TOE"/> using the Key Generation test. This test verifies the ability of the <abbr linkend="TSF"/> to correctly produce values for the key components including the public verification exponent e, the private prime factors p and q, the public modulus n and the calculation of the private signature exponent d.<htm:br></htm:br><htm:br></htm:br>
                            Key Pair generation specifies 5 ways (or methods) to generate the primes p and q. These include:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li> Random Primes: 
                                    <htm:ul>
                                        <htm:li>Provable primes</htm:li>
                                        <htm:li>Probable primes</htm:li>
                                    </htm:ul>
                                </htm:li>
                                <htm:li> Primes with Conditions: 
                                    <htm:ul>
                                        <htm:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</htm:li>
                                        <htm:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be
                                            probable primes</htm:li>
                                        <htm:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</htm:li>
                                    </htm:ul>
                                </htm:li>
                            </htm:ul><htm:br></htm:br><htm:br></htm:br>
                            To test the key generation method for the Random Provable primes method and for all the Primes with Conditions methods, the evaluator shall seed the <abbr linkend="TSF"/> key generation routine with sufficient data to deterministically generate the RSA key pair. This includes the random seed(s), the public exponent of the RSA key, and the desired key length. For each key length supported, the evaluator shall have the <abbr linkend="TSF"/> generate 25 key pairs. The evaluator shall verify the correctness of the <abbr linkend="TSF"/>’s implementation by comparing values generated by the <abbr linkend="TSF"/> with those generated from a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Key Generation for Elliptic Curve Cryptography (ECC)</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:p> FIPS 186-4 ECC Key Generation Test</htm:p><htm:br></htm:br><htm:br></htm:br>
                            For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall require the implementation under test (IUT) to generate 10 private/public key pairs. The private key shall be generated using an approved random bit generator (RBG). To determine correctness, the evaluator shall submit the generated key pairs to the public key verification (PKV) function of a known good implementation.
                            <htm:br/>
                            <htm:p>FIPS 186-4 Public Key Verification (PKV) Test</htm:p> 
                            For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall generate 10 private/public key pairs using the key generation function of a known good implementation and modify five of the public key values so that they are incorrect, leaving five values unchanged (i.e., correct). The evaluator shall obtain in response a set of 10 PASS/FAIL values.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Key Generation for Finite-Field Cryptography (FFC)</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify the implementation of the Parameters Generation and the Key Generation for FFC by the <abbr linkend="TOE"/> using the Parameter Generation and Key Generation test. This test verifies the ability of the <abbr linkend="TSF"/> to correctly produce values for the field prime p, the cryptographic prime q (dividing p-1), the cryptographic group generator g, and the calculation of the private key x and public key y.<htm:br></htm:br><htm:br></htm:br>
                            The Parameter generation specifies 2 ways (or methods) to generate the cryptographic prime q and the field prime p:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>Primes q and p shall both be provable primes</htm:li>
                                <htm:li>Primes q and field prime p shall both be probable primes</htm:li>
                            </htm:ul>
                            and two ways to generate the cryptographic group generator g:
                            <htm:ul>
                                <htm:li>Generator g constructed through a verifiable process</htm:li>
                                <htm:li>Generator g constructed through an unverifiable process.</htm:li>
                            </htm:ul>
                            The Key generation specifies 2 ways to generate the private key x:
                            <htm:ul>
                                <htm:li>len(q) bit output of RBG where  1 &#2264; x &#2264; q-1 <!-- the special characters 1 <=x <= q-1 --></htm:li>
                                <htm:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 1 &#2264; x &#2264; q-1 <!-- 1<= x<=q-1. --></htm:li>
                            </htm:ul><htm:br></htm:br><htm:br></htm:br>
                            The security strength of the RBG shall be at least that of the security offered by the FFC parameter set.<htm:br></htm:br><htm:br></htm:br>
                            To test the cryptographic and field prime generation method for the provable primes method and/or the group generator g for a verifiable process, the evaluator shall seed the <abbr linkend="TSF"/> parameter generation routine with sufficient data to deterministically generate the parameter set.<htm:br></htm:br><htm:br></htm:br>
                            For each key length supported, the evaluator shall have the <abbr linkend="TSF"/> generate 25 parameter sets and key pairs. The evaluator shall verify the correctness of the <abbr linkend="TSF"/>’s implementation by comparing values generated by the <abbr linkend="TSF"/> with those generated from a known good implementation. Verification shall also confirm <htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>g != 0,1</htm:li>
                                <htm:li>q divides p-1</htm:li>
                                <htm:li>g^q mod p = 1</htm:li>
                                <htm:li>g^x mod p = y</htm:li>
                            </htm:ul>
                            for each FFC parameter set and key pair.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM.2" name="Cryptographic Key Establishment" status="threshold">
                    <f-element id="FCS_CKM.2.1">
                        <title>The <abbr linkend="TSF"/> shall perform cryptographic key establishment in accordance with a specified cryptographic key establishment method:
                            <selectables linebreak="yes">
                                <selectable>RSA-based key establishment schemes that meets the following: NIST Special Publication 800-56B, “Recommendation for Pair-Wise Key Establishment Schemes Using Integer Factorization Cryptography”</selectable>
                                <selectable>Elliptic curve-based key establishment schemes that meets the following: NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable>
                                <selectable>Finite field-based key establishment schemes that meets the following: NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”]</selectable>
                            </selectables>
                        </title>
                        <aactivity>
                            The evaluator shall ensure that the supported key establishment schemes correspond to the key generation schemes identified in FCS_CKM.1.1. If the <abbr linkend="ST"/> specifies more than one scheme, the evaluator shall examine the <abbr linkend="TSS"/> to verify that it identifies the usage for each scheme.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify that the AGD guidance instructs the administrator how to configure the <abbr linkend="TOE"/> to use the selected key establishment scheme(s).<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify the implementation of the key establishment schemes of the supported by the <abbr linkend="TOE"/> using the applicable tests below.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Key Establishment Schemes</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b>SP800-56A Key Establishment Schemes</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify a <abbr linkend="TOE"/>'s implementation of SP800-56A key agreement schemes using the following Function and Validity tests. These validation tests for each key agreement scheme verify that a <abbr linkend="TOE"/> has implemented the components of the key agreement scheme according to the specifications in the Recommendation. These components include the calculation of the DLC primitives (the shared secret value Z) and the calculation of the derived keying material (DKM) via the Key Derivation Function (KDF). If key confirmation is supported, the evaluator shall also verify that the components of key confirmation have been implemented correctly, using the test procedures described below. This includes the parsing of the DKM, the generation of MACdata and the calculation of MACtag.<htm:br></htm:br><htm:br></htm:br>
                            <htm:i>Function Test</htm:i><htm:br></htm:br><htm:br></htm:br>
                            The Function test verifies the ability of the <abbr linkend="TOE"/> to implement the key agreement schemes correctly. To conduct this test, the evaluator shall generate or obtain test vectors from a known good implementation of the <abbr linkend="TOE"/> supported schemes. For each supported key agreement scheme-key agreement role combination, KDF type, and, if supported, key confirmation role- key confirmation type combination, the tester shall generate 10 sets of test vectors. The data set consists of one set of domain parameter values (FFC) or the NIST approved curve (ECC) per 10 sets of public keys. These keys are static, ephemeral or both depending on the scheme being tested.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall obtain the DKM, the corresponding <abbr linkend="TOE"/>’s public keys (static and/or ephemeral), the MAC tag(s), and any inputs used in the KDF, such as the Other Information field OI and <abbr linkend="TOE"/> id fields.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="TOE"/> does not use a KDF defined in SP 800-56A, the evaluator shall obtain only the public keys and the hashed value of the shared secret.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify the correctness of the <abbr linkend="TSF"/>’s implementation of a given scheme by using a known good implementation to calculate the shared secret value, derive the keying material DKM, and compare hashes or MAC tags generated from these values.<htm:br></htm:br><htm:br></htm:br>
                            If key confirmation is supported, the <abbr linkend="TSF"/> shall perform the above for each implemented approved MAC algorithm.<htm:br></htm:br><htm:br></htm:br>
                            <htm:i>Validity Test</htm:i><htm:br></htm:br><htm:br></htm:br>
                            The Validity test verifies the ability of the <abbr linkend="TOE"/> to recognize another party’s valid and invalid key agreement results with or without key confirmation. To conduct this test, the evaluator shall obtain a list of the supporting cryptographic functions included in the SP800-56A key agreement implementation to determine which errors the <abbr linkend="TOE"/> should be able to recognize. The evaluator generates a set of 24 (FFC) or 30 (ECC) test vectors consisting of data sets including domain parameter values or NIST approved curves, the evaluator’s public keys, the <abbr linkend="TOE"/>’s public/private key pairs, MACTag, and any inputs used in the KDF, such as the other info and <abbr linkend="TOE"/> id fields.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall inject an error in some of the test vectors to test that the <abbr linkend="TOE"/> recognizes invalid key agreement results caused by the following fields being incorrect: the shared secret value Z, the DKM, the other information field OI, the data to be MACed, or the generated MACTag. If the <abbr linkend="TOE"/> contains the full or partial (only ECC) public key validation, the evaluator will also individually inject errors in both parties’ static public keys, both parties’ ephemeral public keys and the <abbr linkend="TOE"/>’s static private key to assure the <abbr linkend="TOE"/> detects errors in the public key validation function and/or the partial key validation function (in ECC only). At least two of the test vectors shall remain unmodified and therefore should result in valid key agreement results (they should pass).<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="TOE"/> shall use these modified test vectors to emulate the key agreement scheme using the corresponding parameters. The evaluator shall compare the <abbr linkend="TOE"/>’s results with the results using a known good implementation verifying that the <abbr linkend="TOE"/> detects these errors.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>SP800-56B Key Establishment Schemes</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify that the <abbr linkend="TSS"/> describes whether the <abbr linkend="TOE"/> acts as a sender, a recipient, or both for RSA-based key establishment schemes.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="TOE"/> acts as a sender, the following assurance activity shall be performed to ensure the proper operation of every <abbr linkend="TOE"/> supported combination of RSA-based key establishment scheme: <htm:br></htm:br><htm:br></htm:br>
                           <htm:ul>
                               <htm:li>To conduct this test, the evaluator shall generate or obtain test vectors from a known good implementation of the <abbr linkend="TOE"/> supported schemes. For each combination of supported key establishment scheme and its options (with or without key confirmation if supported, for each supported key confirmation MAC function if key confirmation is supported, and for each supported mask generation function if KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test vector shall include the RSA public key, the plaintext keying material, any additional input parameters if applicable, the MacKey and MacTag if key confirmation is incorporated, and the outputted ciphertext. For each test vector, the evaluator shall perform a key establishment encryption operation on the <abbr linkend="TOE"/> with the same inputs (in cases where key confirmation is incorporated, the test shall use the MacKey from the test vector instead of the randomly generated MacKey used in normal operation) and ensure that the outputted ciphertext is equivalent to the ciphertext in the test vector.</htm:li>
                           </htm:ul>
                            If the <abbr linkend="TOE"/> acts as a receiver, the following assurance activities shall be performed to ensure the proper operation of every <abbr linkend="TOE"/> supported combination of RSA-based key establishment scheme:<htm:br></htm:br><htm:br></htm:br>
                            To conduct this test, the evaluator shall generate or obtain test vectors from a known good implementation of the <abbr linkend="TOE"/> supported schemes. For each combination of supported key establishment scheme and its options (with our without key confirmation if supported, for each supported key confirmation MAC function if key confirmation is supported, and for each supported mask generation function if KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test vector shall include the RSA private key, the plaintext keying material (KeyData), any additional input parameters if applicable, the MacTag in cases where key confirmation is incorporated, and the outputted ciphertext. For each test vector, the evaluator shall perform the key establishment decryption operation on the <abbr linkend="TOE"/> and ensure that the outputted plaintext keying material (KeyData) is equivalent to the plaintext keying material in the test vector. In cases where key confirmation is incorporated, the evaluator shall perform the key confirmation steps and ensure that the outputted MacTag is equivalent to the MacTag in the test vector.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall ensure that the <abbr linkend="TSS"/> describes how the <abbr linkend="TOE"/> handles decryption errors. In accordance with NIST Special Publication 800-56B, the <abbr linkend="TOE"/> shall not reveal the particular error that occurred, either through the contents of any outputted or logged error message or through timing variations. If KTS-OAEP is supported, the evaluator shall create separate contrived ciphertext values that trigger each of the three decryption error checks described in NIST Special Publication 800-56B section 7.2.2.3, ensure that each decryption attempt results in an error, and ensure that any outputted or logged error message is identical for each. If KTS-KEM-KWS is supported, the evaluator shall create separate contrived ciphertext values that trigger each of the three decryption error checks described in NIST Special Publication 800-56B section 7.2.3.3, ensure that each decryption attempt results in an error, and ensure that any outputted or logged error message is identical for each.
                        </aactivity>
                    </f-element>
                </f-component>               

                <f-component id="FCS_CKM_EXT.4" name="Cryptographic Key Destruction"  status="threshold">
                    <f-element id="FCS_CKM_EXT.4.1">
                        <title>The <abbr linkend="TSF"/> shall cause disused cryptographic keys in volatile memory to be destroyed or rendered unrecoverable.
                        </title>
                        <note role="application">The threat addressed by this element is the recovery of disused cryptographic keys from volatile memory by unauthorized processes.<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="TSF"/> is expected to destroy or cause to be destroyed all copies of cryptographic keys created and managed by the <abbr linkend="TOE"/> once the keys are no longer needed. This requirement is the same for all instances of keys within <abbr linkend="TOE"/> volatile memory regardless of whether the memory is controlled by <abbr linkend="TOE"/> manufacturer software or by 3rd party <abbr linkend="TOE"/> modules. The assurance activities are designed with flexibility to address cases where the <abbr linkend="TOE"/> manufacturer has limited insight into the behavior of 3rd party <abbr linkend="TOE"/> components.<htm:br></htm:br><htm:br></htm:br>
                            The preferred method for destroying keys in <abbr linkend="TOE"/> volatile memory is by direct overwrite of the memory occupied by the keys. The values used for overwriting can be all zeros, all ones, or any other pattern or combination of values significantly different than the value of the key itself such that the keys are rendered inaccessible to running processes.<htm:br></htm:br><htm:br></htm:br>
                            Some implementations may find that direct overwriting of memory is not feasible or possible due to programming language constraints. Many memory- and type-safe languages provide no mechanism for programmers to specify that a particular memory location be accessed or written. The value of such languages is that it is much harder for a programming error to result in a buffer or heap overflow. The downside is that multiple copies of keys might be scattered throughout language-runtime memory. In such cases, the <abbr linkend="TOE"/> should take whatever actions are feasible to cause the keys to become inaccessible—freeing memory, destroying objects, closing applications, programming using the minimum possible scope for variables containing keys.<htm:br></htm:br><htm:br></htm:br>
                            Likewise, if keys reside in memory within the execution context of a third-party module, then the <abbr linkend="TOE"/> should take whatever feasible actions it can to cause the keys to be destroyed.<htm:br></htm:br><htm:br></htm:br>
                            Cryptographic keys in non-<abbr linkend="TOE"/> volatile memory are not covered by this requirement. This expressly includes keys created and used by Guest <abbr linkend="VM"/>s. The Guest is responsible for disposing of such keys.</note>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.4.2">
                        <title>The <abbr linkend="TSF"/> shall cause disused cryptographic keys in non-volatile storage to be destroyed or rendered unrecoverable.
                        </title>
                        <note role="application">
                            The ultimate goal of this element is to ensure that disused cryptographic keys are inaccessible not only to components of the running system, but are also unrecoverable through forensic analysis of discarded storage media. The element is designed to reflect the fact that the latter may not be wholly practical at this time due to the way some storage technologies are implemented (e.g., wear-leveling of flash storage).<htm:br></htm:br><htm:br></htm:br>
                            Key storage areas in non-volatile storage can be overwritten with any value that renders the keys unrecoverable. The value used can be all zeros, all ones, or any other pattern or combination of values significantly different than the value of the key itself.<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="TSF"/> is expected to destroy all copies of cryptographic keys created and managed by the <abbr linkend="TOE"/> once the keys are no longer needed. Since this is a software-only <abbr linkend="TOE"/>, the hardware controllers that manage non-volatile storage media are necessarily outside the <abbr linkend="TOE"/> boundary. Thus, the <abbr linkend="TOE"/> manufacturer is likely to have little control over—or insight into—the functioning of these storage devices. The <abbr linkend="TOE"/> is expected to make a “best-effort” to destroy disused cryptographic keys by invoking the appropriate platform interfaces—recognizing that the specific actions taken by the platform are out of the <abbr linkend="TOE"/>’s control.<htm:br></htm:br><htm:br></htm:br>
                            But in cases where the <abbr linkend="TOE"/> has insight into the non-volatile storage technologies used by the platform, or where the <abbr linkend="TOE"/> can specify a preference or method for destroying keys, the destruction should be executed by a single, direct overwrite consisting of pseudo-random data or a new key, by a repeating pattern of any static value, or by a block erase.<htm:br></htm:br><htm:br></htm:br>
                            For keys stored on encrypted media, it is sufficient for the media encryption keys to be destroyed for all keys stored on the media to be considered destroyed.
                        </note>
                        <aactivity>
                            The evaluator shall check to ensure the <abbr linkend="TSS"/> lists each type of key and its origin and location in memory or storage. The evaluator shall verify that the <abbr linkend="TSS"/> describes when each type of key is cleared.<htm:br></htm:br><htm:br></htm:br>
                           For each key clearing situation the evaluator shall perform one of the following activities:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>The evaluator shall use appropriate combinations of specialized operational or development environments, development tools (debuggers, emulators, simulators, etc.), or instrumented builds (developmental, debug, or release) to demonstrate that keys are cleared correctly, including all intermediate copies of the key that may have been created internally by the <abbr linkend="TOE"/> during normal cryptographic processing.</htm:li>
                                <htm:li>In cases where testing reveals that 3rd-party software modules or programming language run-time environments do not properly overwrite keys, this fact must be documented. Likewise, it must be documented if there is no practical way to determine whether such modules or environments destroy keys properly.</htm:li>
                                <htm:li>In cases where it is impossible or impracticable to perform the above tests, the evaluator shall describe how keys are destroyed in such cases, to include:
                                    <htm:ul>
                                        <htm:li>Which keys are affected</htm:li>
                                        <htm:li>The reasons why testing is impossible or impracticable</htm:li>
                                        <htm:li>Evidence that keys are destroyed appropriately (e.g., citations to component documentation, component developer/vendor attestation, component vendor test results)</htm:li>
                                        <htm:li>Aggravating and mitigating factors that may affect the timeliness or execution of key destruction (e.g., caching, garbage collection, operating system memory management)</htm:li>
                                    </htm:ul>
                                    </htm:li>
                            </htm:ul>
                            Note: using debug or instrumented builds of the <abbr linkend="TOE"/> and <abbr linkend="TOE"/> components is permitted in order to demonstrate that the <abbr linkend="TOE"/> takes appropriate action to destroy keys. It is expected that these builds are based on the same source code as are release builds (of course, with instrumentation and debug-specific code added).
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_COP.1(1)" name="Cryptographic Operation (AES Data Encryption/ Decryption)" status="threshold">
                    <f-element id="FCS_COP.1.1(1)">
                        <title>
                            The <abbr linkend="TSF"/> shall perform [encryption and decryption] in accordance with a specified cryptographic algorithm<htm:br></htm:br>
                            <selectables linebreak="yes">
                                <selectable>AES Key Wrap (KW) (as defined in NIST SP 800-38F)</selectable>
                                <selectable>AES Key Wrap with Padding (KWP) (as defined in NIST SP 800-38F)</selectable>
                                <selectable>AES-GCM (as defined in NIST SP 800-38D),</selectable>
                                <selectable>AES-CCM (as defined in NIST SP 800-38C),</selectable>
                                <selectable>AES-XTS (as defined in NIST SP 800-38E) mode,</selectable>
                                <selectable>AES-CCMP-256 (as defined in NIST SP800-38C and IEEE 802.11ac-2013),</selectable>
                                <selectable>AES-GCMP-256 (as defined in NIST SP800-38D and IEEE 802.11ac-2013),</selectable>
                                <selectable>AES-CCMP (as defined in FIPS PUB 197, NIST SP 800-38C and IEEE 802.11-2012),</selectable>
                                <selectable>AES-CBC (as defined in FIPS PUB 197, and NIST SP 800-38A) mode,</selectable>
                                <selectable>AES-CTR (as defined in NIST SP 800-38A) mode</selectable>
                            </selectables>
                            and cryptographic key sizes 
                            <selectables>
                                <selectable>128-bit key sizes</selectable>
                                <selectable>256-bit key sizes</selectable>
                            </selectables>.
                        </title>
                        <note role="application">For the first selection of FCS_COP.1.1(1), the <abbr linkend="ST"/> author should choose the mode or modes in which AES operates. For the second selection, the <abbr linkend="ST"/> author should choose the key sizes that are supported by this functionality.</note>
                        <aactivity>Assurance Activity Note: The following tests require the developer to provide 
                            access to a test platform that provides the evaluator with tools that are typically 
                            not found on factory products.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:u>AES-CBC Tests</htm:u></htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b>AES-CBC Known Answer Tests</htm:b><htm:br></htm:br><htm:br></htm:br>           
                            There are four Known Answer Tests (KATs), described below. In all KATs, the plaintext, ciphertext, and IV values shall be 128-bit blocks. The results from each test may either be obtained by the evaluator directly or by supplying the inputs to the implementer and receiving the results in response. To determine correctness, the evaluator shall compare the resulting values to those obtained by submitting the same inputs to a known good implementation.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>KAT-1.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10 plaintext values and obtain the ciphertext value that results from AES-CBC encryption of the given plaintext using a key value of all zeros and an IV of all zeros. Five plaintext values shall be encrypted with a 128-bit all-zeros key, and the other five shall be encrypted with a 256-bit all-zeros key.
                            <htm:br></htm:br><htm:br></htm:br>
                            To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using 10 ciphertext values as input and AES-CBC decryption.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>KAT-2.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10 key values and obtain the ciphertext value that results from AES-CBC encryption of an all-zeros plaintext using the given key value and an IV of all zeros. Five of the keys shall be 128-bit keys, and the other five shall be 256-bit keys.<htm:br></htm:br><htm:br></htm:br>
                            To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using an all-zero ciphertext value as input and AES-CBC decryption.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>KAT-3.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply the two sets of key values described below and obtain the ciphertext value that results from AES encryption of an all-zeros plaintext using the given key value and an IV of all zeros. The first set of keys shall have 128 128-bit keys, and the second set shall have 256 256-bit keys. Key i in each set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N].<htm:br></htm:br><htm:br></htm:br>
                            To test the decrypt functionality of AES-CBC, the evaluator shall supply the two sets of key and ciphertext value pairs described below and obtain the plaintext value that results from AES-CBC decryption of the given ciphertext using the given key and an IV of all zeros. The first set of key/ciphertext pairs shall have 128 128-bit key/ciphertext pairs, and the second set of key/ciphertext pairs shall have 256 256-bit key/ciphertext pairs. Key i in each set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. The ciphertext value in each pair shall be the value that results in an all-zeros plaintext when decrypted with its corresponding key.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>KAT-4.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply the set of 128 plaintext values described below and obtain the two ciphertext values that result from AES-CBC encryption of the given plaintext using a 128-bit key value of all zeros with an IV of all zeros and using a 256-bit key value of all zeros with an IV of all zeros, respectively. Plaintext value i in each set shall have the leftmost i bits be ones and the rightmost 128-i bits be zeros, for i in [1,128].<htm:br></htm:br><htm:br></htm:br>
                            To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using ciphertext values of the same form as the plaintext in the encrypt test as input and AES-CBC decryption.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>AES-CBC Multi-Block Message Test
                            </htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the encrypt functionality by encrypting an i-block message
                            where 1 &lt; i &#2264; 10 <!--   1 < i <=10-->. The evaluator shall choose a key, an IV and plaintext message of length i blocks and encrypt the message, using the mode to be tested, with the chosen key and IV. The ciphertext shall be compared to the result of encrypting the same plaintext message with the same key and IV using a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall also test the decrypt functionality for each mode by decrypting an 
                            i-block message where 1 &lt; i &#2264; 10 <!--   1 < i <=10 -->. The evaluator shall choose a key, an IV and a ciphertext message of length i blocks and decrypt the message, using the mode to be tested, with the chosen key and IV. The plaintext shall be compared to the result of decrypting the same ciphertext message with the same key and IV using a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>AES-CBC Monte Carlo Tests</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the encrypt functionality using a set of 200 plaintext, IV, and key 3-tuples. 100 of these shall use 128 bit keys, and 100 shall use 256 bit keys. The plaintext and IV values shall be 128-bit blocks. For each 3-tuple, 1000 iterations shall be run as follows:<htm:br></htm:br><htm:br></htm:br>
                            <!--  code -->
                            <htm:pre>
                                # Input: PT, IV, Key
                                for i = 1 to 1000:
                                    if i == 1:
                                        CT[1] = AES-CBC-Encrypt(Key, IV, PT)
                                        PT = IV
                                    else:
                                        CT[i] = AES-CBC-Encrypt(Key, PT) 
                                        PT = CT[i-1]
                            </htm:pre>
                            <!-- end code -->
                            The ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the result for that trial. This result shall be compared to the result of running 1000 iterations with the same values using a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the decrypt functionality using the same test as for encrypt, exchanging CT and PT and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:u>AES-CCM Tests</htm:u></htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the generation-encryption and decryption-verification functionality of AES-CCM for the following input parameter and tag lengths:<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>128 bit and 256 bit keys</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Two payload lengths.</htm:b>One payload length shall be the shortest supported payload length, greater than or equal to zero bytes. The other payload length shall be the longest supported payload length, less than or equal to 32 bytes (256 bits).<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Two or three associated data lengths.</htm:b>One associated data length shall be 0, if supported. One associated data length shall be the shortest supported payload length, greater than or equal to zero bytes. One associated data length shall be the longest supported payload length, less than or equal to 32 bytes (256 bits). If the implementation supports an associated data length of 
                            2<htm:sup>16</htm:sup> bytes, 
                            an associated data length of 2<htm:sup>16</htm:sup> bytes shall be tested.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Nonce lengths.</htm:b>All supported nonce lengths between 7 and 13 bytes, 
                            inclusive, shall be tested.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Tag lengths.</htm:b>All supported tag lengths of 4, 6, 8, 10, 12, 14 and 16 bytes 
                            shall be tested.<htm:br></htm:br><htm:br></htm:br>
                            To test the generation-encryption functionality of AES-CCM, the evaluator shall perform 
                            the following four tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>For EACH supported key and associated data length and ANY supported payload, nonce and tag length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.
                                </test>
                                <test>For EACH supported key and payload length and ANY supported associated data, nonce and tag length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.
                                </test>
                                <test>For EACH supported key and nonce length and ANY supported associated data, payload and tag length, the evaluator shall supply one key value and 10 associated data, payload and nonce value 3-tuples and obtain the resulting ciphertext.
                                </test>
                                <test>For EACH supported key and tag length and ANY supported associated data, payload and nonce length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.
                                </test>
                            </testlist>
                            To determine correctness in each of the above tests, the evaluator shall compare the ciphertext with the result of generation-encryption of the same inputs with a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            To test the decryption-verification functionality of AES-CCM, for EACH combination of supported associated data length, payload length, nonce length and tag length, the evaluator shall supply a key value and 15 nonce, associated data and ciphertext 3-tuples and obtain either a FAIL result or a PASS result with the decrypted payload. The evaluator shall supply 10 tuples that should FAIL and 5 that should PASS per set of 15.<htm:br></htm:br><htm:br></htm:br>
                            Additionally, the evaluator shall use tests from the IEEE 802.11-02/362r6 document “Proposed Test vectors for IEEE 802.11 TGi”, dated September 10, 2002, Section 2.1 AES-CCMP Encapsulation Example and Section 2.2 Additional AES CCMP Test Vectors to further verify the IEEE 802.11-2007 implementation of AES-CCMP.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:u>AES-GCM Test</htm:u></htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the authenticated encrypt functionality of AES-GCM for each combination of the following input parameter lengths:<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>128 bit and 256 bit keys</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Two plaintext lengths.</htm:b>One of the plaintext lengths shall be a non-zero integer multiple of 128 bits, if supported. The other plaintext length shall not be an integer multiple of 128 bits, if supported.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Three AAD lengths.</htm:b>One AAD length shall be 0, if supported. One AAD length shall be a non-zero integer multiple of 128 bits, if supported. One AAD length shall not be an integer multiple of 128 bits, if supported.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Two IV lengths.</htm:b>If 96 bit IV is supported, 96 bits shall be one of the two IV lengths tested.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the encrypt functionality using a set of 10 key, plaintext, AAD, and IV tuples for each combination of parameter lengths above and obtain the ciphertext value and tag that results from AES-GCM authenticated encrypt. Each supported tag length shall be tested at least once per set of 10. The IV value may be supplied by the evaluator or the implementation being tested, as long as it is known.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the decrypt functionality using a set of 10 key, ciphertext, tag, AAD, and IV 5-tuples for each combination of parameter lengths above and obtain a Pass/Fail result on authentication and the decrypted plaintext if Pass. The set shall include five tuples that Pass and five that Fail.<htm:br></htm:br><htm:br></htm:br>
                            The results from each test may either be obtained by the evaluator directly or by supplying the inputs to the implementer and receiving the results in response. To determine correctness, the evaluator shall compare the resulting values to those obtained by submitting the same inputs to a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:u>XTS-AES Test</htm:u></htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the encrypt functionality of XTS-AES for each combination of the following input parameter lengths:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>256 bit (for AES-128) and 512 bit (for AES-256) keys</htm:li>
                                <htm:li></htm:li><htm:b>Three data unit (i.e., plaintext) lengths.</htm:b> One of the data unit lengths shall be a non-zero integer multiple of 128 bits, if supported. One of the data unit lengths shall be an integer multiple of 128 bits, if supported. The third data unit length shall be either the longest supported data unit length or 2<htm:sup>16</htm:sup> bits, whichever is smaller.
                            </htm:ul><htm:br></htm:br><htm:br></htm:br>
                            using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and obtain the ciphertext that results from XTS-AES encrypt.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator may supply a data unit sequence number instead of the tweak value if the implementation supports it. The data unit sequence number is a base-10 number ranging between 0 and 255 that implementations convert to a tweak value internally.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the decrypt functionality of XTS-AES using the same test as for encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTS-AES decrypt.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:u>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP) Test</htm:u></htm:b>
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the authenticated encryption functionality of AES-KW for EACH combination of the following input parameter lengths:
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>128 and 256 bit key encryption keys (KEKs)</htm:li>
                                <htm:li><htm:b>Three plaintext lengths.</htm:b> One of the plaintext lengths shall be two semi-blocks (128 bits). One of the plaintext lengths shall be three semi-blocks (192 bits). The third data unit length shall be the longest supported plaintext length less than or equal to 64 semi-blocks (4096 bits).</htm:li>
                            </htm:ul>
                            using a set of 100 key and plaintext pairs and obtain the ciphertext that results from AES-KW authenticated encryption. To determine correctness, the evaluator shall use the AES-KW authenticated-encryption function of a known good implementation.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the authenticated-decryption functionality of AES-KW using the same test as for authenticated-encryption, replacing plaintext values with ciphertext values and AES-KW authenticated-encryption with AES-KW authenticated-decryption.
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the authenticated-encryption functionality of AES-KWP using the same test as for AES-KW authenticated-encryption with the following change in the three plaintext lengths:
                            <htm:br></htm:br><htm:br></htm:br>
                            One plaintext length shall be one octet. One plaintext length shall be 20 octets (160 bits).
                            <htm:br></htm:br><htm:br></htm:br>
                            One plaintext length shall be the longest supported plaintext length less than or equal to 512 octets (4096 bits).
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall test the authenticated-decryption functionality of AES-KWP using the same test as for AES-KWP authenticated-encryption, replacing plaintext values with ciphertext values and AES-KWP authenticated-encryption with AES-KWP authenticated-decryption.
                            <htm:br></htm:br><htm:br></htm:br>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_COP.1(2)" name="Cryptographic Operation (Hashing)" status="threshold">
                    <f-element id="FCS_COP.1.1(2)">
                        <title>The <abbr linkend="TSF"/> shall perform [cryptographic hashing] in accordance with a specified cryptographic algorithm 
                            <selectables>
                                <selectable>SHA-1</selectable>
                                <selectable>SHA-256</selectable>
                                <selectable>SHA-384</selectable>
                                <selectable>SHA-512</selectable>
                            </selectables> and message digest sizes 
                            <selectables>
                                <selectable>160</selectable>
                                <selectable>256</selectable>
                                <selectable>384</selectable>
                                <selectable>512 bits</selectable>
                            </selectables> that meet the following: [FIPS PUB 180-4, “Secure Hash Standard”].
                        </title>
                        <note role="application">
                            The <abbr linkend="TSF"/> shall provide the audit records in a manner suitable for the user to interpret the information. Per NIST SP 800-131A, SHA-1 for generating digital signatures is no longer allowed, and SHA-1 for verification of digital signatures is strongly discouraged as there may be risk in accepting these signatures. It is expected that vendors will implement SHA-2 algorithms in accordance with SP 800-131A.
                            <htm:br></htm:br><htm:br></htm:br>
                            The intent of this requirement is to specify the hashing function. The hash selection shall support the message digest size selection. The hash selection should be consistent with the overall strength of the algorithm used (for example, SHA 256 for 128-bit keys).
                            <htm:br></htm:br><htm:br></htm:br>
                        </note>
                        <aactivity>
                            The evaluator checks the AGD documents to determine that any configuration that is required to be done to configure the functionality for the required hash sizes is present. The evaluator shall check that the association of the hash function with other <abbr linkend="TSF"/> cryptographic functions (for example, the digital signature verification function) is documented in the <abbr linkend="TSS"/>.
                            <htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="TSF"/> hashing functions can be implemented in one of two modes. The first mode is the byteoriented mode. In this mode the <abbr linkend="TSF"/> only hashes messages that are an integral number of bytes in length; i.e., the length (in bits) of the message to be hashed is divisible by 8. The second mode is the bitoriented mode. In this mode the <abbr linkend="TSF"/> hashes messages of arbitrary length. As there are different tests for each mode, an indication is given in the following sections for the bitoriented vs. the byteoriented testmacs.
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform all of the following tests for each hash algorithm implemented by the <abbr linkend="TSF"/> and used to satisfy the requirements of this PP.
                            <htm:br></htm:br><htm:br></htm:br>
                            Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Short Messages Test Bit-oriented Mode</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluators devise an input set consisting of m+1 messages, where m is the block length of the hash algorithm. The length of the messages range sequentially from 0 to m bits. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the <abbr linkend="TSF"/>.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Short Messages Test Byte-oriented Mode</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluators devise an input set consisting of m/8+1 messages, where m is the block length of the hash algorithm. The length of the messages range sequentially from 0 to m/8 bytes, with each message being an integral number of bytes. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the <abbr linkend="TSF"/>.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Selected Long Messages Test Bit-oriented Mode</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluators devise an input set consisting of m messages, where m is the block length 
                            of the hash algorithm. The length of the ith message is 512 + 99*i, where 
                            1 &#2264; i &#2264; m <!--   1 ≤ i ≤ m -->. The message text shall be pseudo-randomly 
                            generated. The evaluators compute the message digest for each of the messages and ensure 
                            that the correct result is produced when the messages are provided to the <abbr linkend="TSF"/>.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Selected Long Messages Test Byte-oriented Mode</htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluators devise an input set consisting of m/8 messages, 
                            where m is the block length of the hash algorithm. The length of the ith message 
                            is 512 + 8*99*i, where 1 &#2264; i &#2264; m/8 <!--   1 ≤ i ≤ m/8-->. 
                            The message text shall be pseudo-randomly generated. The evaluators compute the message 
                            digest for each of the messages and ensure that the correct result is produced when 
                            the messages are provided to the <abbr linkend="TSF"/>.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>Pseudo-randomly Generated Messages Test</htm:b><htm:br></htm:br><htm:br></htm:br>
                            This test is for byte-oriented implementations only. The evaluators randomly generate a 
                            seed that is n bits long, where n is the length of the message digest produced by the 
                            hash function to be tested. The evaluators then formulate a set of 100 messages and 
                            associated digests by following the algorithm provided in Figure 1 of [SHAVS]. The 
                            evaluators then ensure that the correct result is produced when the messages are 
                            provided to the <abbr linkend="TSF"/>.<htm:br></htm:br><htm:br></htm:br>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_COP.1(3)" name="Cryptographic Operation (Signature Algorithms)" status="threshold">
                    <f-element id="FCS_COP.1.1(3)">
                        <title>The <abbr linkend="TSF"/> shall perform [<htm:i>cryptographic signature services (generation and verification)</htm:i>] in accordance with a specified cryptographic algorithm
                            <selectables linebreak="yes">
                                <selectable>RSA schemes using cryptographic key sizes [2048-bit or greater] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 4]</selectable>
                                <selectable>ECDSA schemes using [“NIST curves” P-256, P-384 and
                                    <selectables>
                                        <selectable>P-521</selectable>
                                        <selectable>no other curves</selectable>
                                    </selectables>] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 5]
                                </selectable>
                            </selectables>.
                        </title>
                        <note role="application">The <abbr linkend="ST"/> Author should choose the algorithm implemented to perform digital signatures; if more than one algorithm is available, this requirement should be iterated to specify the functionality. For the algorithm chosen, the <abbr linkend="ST"/> author should make the appropriate assignments/selections to specify the parameters that are implemented for that algorithm.
                            </note>
                        <aactivity>Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>ECDSA Algorithm Tests</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:i>ECDSA FIPS 186-4 Signature Generation Test</htm:i></htm:b><htm:br></htm:br><htm:br></htm:br>
                            For each supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator shall generate 10 1024-bit long messages and obtain for each message a public key and the resulting signature values R and S. To determine correctness, the evaluator shall use the signature verification function of a known good implementation.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:i>ECDSA FIPS 186-4 Signature Verification Test</htm:i></htm:b><htm:br></htm:br><htm:br></htm:br>
                            For each supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator shall generate a set of 10 1024-bit message, public key and signature tuples and modify one of the values (message, public key or signature) in five of the 10 tuples. The evaluator shall obtain in response a set of 10 PASS/FAIL values.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b>RSA Signature Algorithm Tests</htm:b><htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:i>Signature Generation Test</htm:i></htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify the implementation of RSA Signature Generation by the <abbr linkend="TOE"/> using the Signature Generation Test. To conduct this test, the evaluator shall generate or obtain 10 messages from a trusted reference implementation for each modulus size/SHA combination supported by the <abbr linkend="TSF"/>. The evaluator shall have the <abbr linkend="TOE"/> use their private key and modulus value to sign these messages.
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify the correctness of the <abbr linkend="TSF"/>’s signature using a known good implementation and the associated public keys to verify the signatures.
                            <htm:br></htm:br><htm:br></htm:br>
                            <htm:b><htm:i>Signature Verification Test</htm:i></htm:b><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the Signature Verification test to verify the ability of the <abbr linkend="TOE"/> to recognize another party’s valid and invalid signatures. The evaluator shall inject errors into the test vectors produced during the Signature Verification Test by introducing errors in some of the public keys e, messages, IR format, and/or signatures. The <abbr linkend="TOE"/> attempts to verify the signatures and returns success or failure.
                            <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall use these test vectors to emulate the signature verification test using the corresponding parameters and verify that the <abbr linkend="TOE"/> detects these errors.
                        </aactivity>
                    </f-element>
                </f-component>                
                
                <f-component id="FCS_COP.1(4)" name="Cryptographic Operation (Keyed Hash algorithms)" status="threshold">
                    <f-element id="FCS_COP.1.1(4)">
                        <title>The <abbr linkend="TSF"/> shall perform [<htm:i>keyed-hash message authentication</htm:i>] in accordance with a specified cryptographic algorithm 
                            <selectables>
                                <selectable>HMAC-SHA-1</selectable>
                                <selectable>HMAC-SHA-256</selectable>
                                <selectable>HMAC-SHA-384</selectable>
                                <selectable>HMAC-SHA-512</selectable>
                            </selectables>
                            and cryptographic key sizes 
                            <assignable>key size (in bits) used in HMAC</assignable> and message digest sizes 
                            <selectables>
                                <selectable>160</selectable>
                                <selectable>256</selectable>
                                <selectable>384</selectable>
                                <selectable>512 bits</selectable>
                            </selectables>
                            that meet the following: 
                            [<htm:b><htm:i>FIPS Pub 198-1, "The Keyed-Hash Message Authentication Code, and FIPS Pub 180-4, “Secure Hash Standard"</htm:i></htm:b>].
                        </title>
                        <note role="application">The selection in this requirement must be consistent with the key size specified for the size of the keys used in conjunction with the keyed-hash message authentication.</note>
                        <aactivity>
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure that it specifies the following values used by the HMAC function: key length, hash function used, block size, and output MAC length used.<htm:br></htm:br><htm:br></htm:br>
                            Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br><htm:br></htm:br>
                            For each of the supported parameter sets, the evaluator shall compose 15 sets of test data. Each set shall consist of a key and message data. The evaluator shall have the <abbr linkend="TSF"/> generate HMAC tags for these sets of test data. The resulting MAC tags shall be compared to the result of generating HMAC tags with the same key and IV using a known good implementation.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_ENT_EXT.1" name="Extended: Entropy for Virtual Machines" status="threshold">
                    <f-element id="FCS_ENT_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide a mechanism to make available to <abbr linkend="VM"/>s entropy that meets FCS_RBG_EXT.1 through 
                            <selectables>
                                <selectable>Hypercall interface</selectable>
                                <selectable>virtual device interface</selectable>
                                <selectable>passthrough access to hardware entropy source</selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="FCS_ENT_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall provide independent entropy across multiple <abbr linkend="VM"/>s.
                        </title>
                        <note role="application">
                            This requirement ensures that sufficient entropy is available to any <abbr linkend="VM"/> that requires it. The entropy need not provide high-quality entropy for every possible method that a <abbr linkend="VM"/> might acquire it. The <abbr linkend="VMM"/> must, however, provide some means for <abbr linkend="VM"/>s to get sufficient entropy. For example, the <abbr linkend="VMM"/> can provide an interface that returns entropy to a Guest <abbr linkend="VM"/>. Alternatively, the <abbr linkend="VMM"/> could provide pass-through access to entropy sources provided by the host platform.<htm:br></htm:br><htm:br></htm:br>
                            This requirement allows for three general ways of providing entropy to guests: 1) The VS can provide a Hypercall accessible to <abbr linkend="VM"/>-aware guests, 2) access to a virtualized device that provides entropy, or 3) pass-through access to a hardware entropy source (including a source of random numbers). In all cases, it is possible that the guest is made <abbr linkend="VM"/>-aware through installation of software or drivers. For the second and third cases, it is possible that the guest could be <abbr linkend="VM"/>-unaware. There is no requirement that the <abbr linkend="TOE"/> provide entropy sources as expected by <abbr linkend="VM"/>-unaware guests. That is, the <abbr linkend="TOE"/> does not have to anticipate every way a guest might try to acquire entropy as long as it supplies a mechanism that can be used by <abbr linkend="VM"/>-aware guests, or provides access to a standard mechanism that a <abbr linkend="VM"/>-unaware guest would use.<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="ST"/> author should select “Hypercall interface” if the <abbr linkend="TSF"/> provides an API function through which guest-resident software can obtain entropy or random numbers. The <abbr linkend="ST"/> author should select “virtual device interface” if the <abbr linkend="TSF"/> presents a virtual device interface to the Guest OS through which it can obtain entropy or random numbers. Such an interface could present a virtualized real device, such as a TPM, that can be accessed by <abbr linkend="VM"/>-unaware guests, or a virtualized fictional device that would require the Guest OS to be <abbr linkend="VM"/>-aware. The <abbr linkend="ST"/> author should select “passthrough access to hardware entropy source” if the <abbr linkend="TSF"/> permits Guest <abbr linkend="VM"/>s to have direct access to hardware entropy or random number source on the platform. The <abbr linkend="ST"/> author should select all items that are appropriate.<htm:br></htm:br><htm:br></htm:br>
                            For FCS_ENT_EXT.1.2, the <abbr linkend="VMM"/> must ensure that the provision of entropy to one <abbr linkend="VM"/> cannot affect the quality of entropy provided to another <abbr linkend="VM"/> on the same platform.
                        </note>
                            <aactivity>
                                The evaluator shall verify that the <abbr linkend="TSS"/> describes how the <abbr linkend="TOE"/> provides entropy to Guest <abbr linkend="VM"/>s, and how to access the interface to acquire entropy or random numbers. The evaluator shall verify that the <abbr linkend="TSS"/> describes the mechanisms for ensuring that one <abbr linkend="VM"/> does not affect the entropy acquired by another <abbr linkend="VM"/>. The evaluator shall perform the following tests:
                             <testlist>
                                 <test>The evaluator shall invoke entropy from each Guest <abbr linkend="VM"/>. The evaluator shall verify that each <abbr linkend="VM"/> acquires values from the interface.</test>
                                 <test>The evaluator shall invoke entropy from multiple <abbr linkend="VM"/>s as nearly simultaneously as practicable. The evaluator shall verify that the entropy used in one <abbr linkend="VM"/> is not identical to that invoked from the other <abbr linkend="VM"/>s.</test></testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                
                <f-component id="FCS_RBG_EXT.1" name="Cryptographic Operation (Random Bit Generation)"  status="threshold">
                    <f-element id="FCS_RBG_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall perform all deterministic random bit generation services in accordance with NIST Special Publication 800-90A using 
                            <selectables>
                                <selectable>Hash_DRBG (any)</selectable>
                                <selectable>HMAC_DRBG (any)</selectable>
                                <selectable>CTR_DRBG (AES)</selectable>
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FCS_RBG_EXT.1.2">
                        <title>The deterministic RBG shall be seeded by an entropy source that accumulates entropy from 
                            <selectables>
                                <selectable>a software-based noise source</selectable>
                                <selectable>a hardware-based noise source</selectable>
                            </selectables> with a minimum of 
                            <selectables>
                                <selectable>128 bits</selectable>
                                <selectable>192 bits</selectable>
                                <selectable>256 bits</selectable>
                            </selectables> of entropy at least equal to the greatest security strength according to NIST SP 800-57, of the keys and hashes that it will generate.
                        </title>
                        <note role="application">NIST SP 800-90A contains three different methods of generating random numbers; each of these, in turn, depends on underlying cryptographic primitives (hash functions/ciphers). The <abbr linkend="ST"/> author will select the function used, and include the specific underlying cryptographic primitives used in the requirement. While any of the identified hash functions (SHA-1, SHA-224, SHA-256, SHA-384, SHA-44 512) <!-- here check this 512 -->are allowed for Hash_DRBG or HMAC_DRBG, only AES-based implementations for CTR_DRBG are allowed.<htm:br></htm:br><htm:br></htm:br>
                            If the key length for the AES implementation used here is different than that used to encrypt the user data, then FCS_COP.1 may have to be adjusted or iterated to reflect the different key length. For the selection in FCS_RBG_EXT.1.2, the <abbr linkend="ST"/> author selects the minimum number of bits of entropy that is used to seed the RBG.
                        </note>
                        <aactivity>
                            Documentation shall be produced—and the evaluator shall perform the activities—in accordance with Annex D, Entropy Documentation and Assessment.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall also perform the following tests, depending on the standard to which the RBG conforms.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform 15 trials for the RBG implementation. If the RBG is configurable, the evaluator shall perform 15 trials for each configuration. The evaluator shall also confirm that the operational guidance contains appropriate instructions for configuring the RBG functionality.<htm:br></htm:br><htm:br></htm:br>
                            If the RBG has prediction resistance enabled, each trial consists of (1) instantiate drbg, (2) generate the first block of random bits (3) generate a second block of random bits (4) uninstantiate. The evaluator verifies that the second block of random bits is the expected value. The evaluator shall generate eight input values for each trial. The first is a count (0 – 14). The next three are entropy input, nonce, and personalization string for the instantiate operation. The next two are additional input and entropy input for the first call to generate. The final two are additional input and entropy input for the second call to generate. These values are randomly generated. “generate one block of random bits” means to generate random bits with number of returned bits equal to the Output Block Length (as defined in NIST SP 800-90A).<htm:br></htm:br><htm:br></htm:br>
                            If the RBG does not have prediction resistance, each trial consists of (1) instantiate drbg, (2) generate the first block of random bits (3) reseed, (4) generate a second block of random bits (5) uninstantiate. The evaluator verifies that the second block of random bits is the expected value. The evaluator shall generate eight input values for each trial. The first is a count (0 – 14). The next three are entropy input, nonce, and personalization string for the instantiate operation. The fifth value is additional input to the first call to generate. The sixth and seventh are additional input and entropy input to the call to re-seed. The final value is additional input to the second generate call.<htm:br></htm:br><htm:br></htm:br>
                            The following paragraphs contain more information on some of the input values to be generated/selected by the evaluator.<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>Entropy input: the length of the entropy input value must equal the seed length</htm:li>
                                <htm:li>Nonce: If a nonce is supported (CTR_DRBG with no df does not use a nonce), the nonce bit length is one-half the seed length.
                                    Personalization string: The length of the personalization string must be &lt;= seed length. If the implementation only supports one personalization string length, then the same length can be used for both values. If more than one string length is support, the evaluator shall use personalization strings of two different lengths. If the implementation does not use a personalization string, no value needs to be supplied.</htm:li>
                                <htm:li>Additional input: the additional input bit lengths have the same defaults and restrictions as the personalization string lengths.</htm:li>
                            </htm:ul> 
                        </aactivity>
                    </f-element>
                </f-component>
            <f-component id="FCS_HTTPS_EXT.1" name="HTTPS Protocol"  status="sel-based">
                    <selection-depends req="FTP_ITC_EXT.1.1"/><!-- HERE check this -->
                    <f-element id="FCS_HTTPS_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall implement the HTTPS protocol that complies with RFC 2818.
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author must provide enough detail to determine how the implementation is complying with the standard(s) identified; this can be done either by adding elements to this component, or by additional detail in the <abbr linkend="TSS"/>.</note>
                    </f-element>
                    <f-element id="FCS_HTTPS_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall implement HTTPS using TLS.
                        </title>
                        <aactivity>The evaluator shall check the <abbr linkend="TSS"/> to ensure that it is clear on how HTTPS uses TLS to establish an administrative session, focusing on any client authentication required by the TLS protocol vs. security administrator authentication which may be done at a different level of the processing stack. Testing for this activity is done as part of the TLS testing; this may result in additional testing if the TLS tests are done at the TLS protocol level.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_IPSEC_EXT.1" name="IPsec Protocol"  status="sel-based">
                    <selection-depends req="FTP_ITC_EXT.1.1"/><!-- HERE check this -->
                    <f-element id="FCS_IPSEC_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall implement the IPsec architecture as specified in RFC 4301.
                        </title>
                        <note role="application">RFC 4301 calls for an IPsec implementation to protect IP traffic through the use of a Security Policy Database (SPD). The SPD is used to define how IP packets are to be handled: PROTECT the packet (e.g., encrypt the packet), BYPASS the IPsec services (e.g., no encryption), or DISCARD the packet (e.g., drop the packet). The SPD can be implemented in various ways, including router access control lists, firewall rulesets, a “traditional” SPD, etc. Regardless of the implementation details, there is a notion of a “rule” that a packet is “matched” against and a resulting action that takes place.<htm:br></htm:br><htm:br></htm:br>
                            While there must be a means to order the rules, a general approach to ordering is not mandated, as long as the SPD can distinguish the IP packets and apply the rules accordingly. There may be multiple SPDs (one for each network interface), but this is not required.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> and determine that it describes what takes place when a packet is processed by the <abbr linkend="TOE"/>, e.g., the algorithm used to process the packet. The <abbr linkend="TSS"/> describes how the SPD is implemented and the rules for processing both inbound and outbound packets in terms of the IPsec policy. The <abbr linkend="TSS"/> describes the rules that are available and the resulting actions available after matching a rule. The <abbr linkend="TSS"/> describes how those rules and actions form the SPD in terms of the BYPASS (e.g., no encryption), DISCARD (e.g., drop the packet), and PROTECT (e.g., encrypt the packet) actions defined in RFC 4301.<htm:br></htm:br><htm:br></htm:br>
                            As noted in section 4.4.1 of RFC 4301, the processing of entries in the SPD is non-trivial and the evaluator shall determine that the description in the <abbr linkend="TSS"/> is sufficient to determine which rules will be applied given the rule structure implemented by the <abbr linkend="TOE"/>. For example, if the <abbr linkend="TOE"/> allows specification of ranges, conditional rules, etc., the evaluator shall determine that the description of rule processing (for both inbound and outbound packets) is sufficient to determine the action that will be applied, especially in the case where two different rules may apply. This description shall cover both the initial packets (that is, no SA is established on the interface or for that particular packet) as well as packets that are part of an established SA.<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the operational guidance to verify it instructs the Administrator how to construct entries into the SPD that specify a rule for processing a packet. The description includes all three cases – a rule that ensures packets are encrypted/decrypted, dropped, and flow through the <abbr linkend="TOE"/> without being encrypted. The evaluator shall determine that the description in the operational guidance is consistent with the description in the <abbr linkend="TSS"/>, and that the level of detail in the operational guidance is sufficient to allow the administrator to set up the SPD in an unambiguous fashion. This includes a discussion of how ordering of rules impacts the processing of an IP packet.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator uses the operational guidance to configure the <abbr linkend="TOE"/> to carry out the following tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall configure the SPD such that there is a rule for dropping a packet, encrypting a packet, and allowing a packet to flow in plaintext. The selectors used in the construction of the rule shall be different such that the evaluator can generate a packet and send packets to the gateway with the appropriate fields (fields that are used by the rule - e.g., the IP addresses, TCP/UDP ports) in the packet header. The evaluator performs both positive and negative test cases for each type of rule (e.g., a packet that matches the rule and another that does not match the rule). The evaluator observes via the audit trail, and packet captures that the <abbr linkend="TOE"/> exhibited the expected behavior: appropriate packets were dropped, allowed to flow without modification, encrypted by the IPsec implementation.</test>
                                <test>The evaluator shall devise several tests that cover a variety of scenarios for packet processing. As with Test 1, the evaluator ensures both positive and negative test cases are constructed. These scenarios shall exercise the range of possibilities for SPD entries and processing modes as outlined in the <abbr linkend="TSS"/> and operational guidance. Potential areas to cover include rules with overlapping ranges and conflicting entries, inbound and outbound packets, and packets that establish SAs as well as packets that belong to established SAs. The evaluator shall verify, via the audit trail and packet captures, for each scenario that the expected behavior is exhibited, and is consistent with both the <abbr linkend="TSS"/> and the operational guidance.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall have a nominal, final entry in the SPD that matches anything that is otherwise unmatched, and discards it.
                        </title>
                        <aactivity>The assurance activity for this element is performed in conjunction with the activities for FCS_IPSEC_EXT.1.1.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator uses the operational guidance to configure the <abbr linkend="TOE"/> to carry out the following tests:
                            <testlist>
                                <test>The evaluator shall configure the SPD such that there is a rule for dropping a packet, encrypting a packet, and allowing a packet to flow in plaintext. The evaluator may use the SPD that was created for verification of FCS_IPSEC_EXT.1.1. The evaluator shall construct a network packet that matches the rule to allow the packet to flow in plaintext and send that packet. The evaluator should observe that the network packet is passed to the proper destination interface with no modification. The evaluator shall then modify a field in the packet header; such that it no longer matches the evaluator-created entries (there may be a “<abbr linkend="TOE"/>/platform created” final entry that discards packets that do not match any previous entries). The evaluator sends the packet, and observes that the packet was dropped.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.3">
                        <title>The <abbr linkend="TSF"/> shall implement transport mode and 
                            <selectables linebreak="yes">
                                <selectable>tunnel mode</selectable>
                                <selectable>no other mode</selectable>
                            </selectables>.
                        </title>
                        <aactivity>The evaluator checks the <abbr linkend="TSS"/> to ensure it states that the VPN can be established to operate in tunnel mode and/or transport mode (as identified in FCS_IPSEC_EXT.1.3).<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall confirm that the operational guidance contains instructions on how to configure the connection in each mode selected.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test(s) based on the selections chosen:
                            <testlist>
                                <test>(conditional): If tunnel mode is selected, the evaluator uses the operational guidance to configure the <abbr linkend="TOE"/>/platform to operate in tunnel mode and also configures a VPN peer to operate in tunnel mode. The evaluator configures the <abbr linkend="TOE"/>/platform and the VPN peer to use any of the allowable cryptographic algorithms, authentication methods, etc. to ensure an allowable SA can be negotiated. The evaluator shall then initiate a connection from the <abbr linkend="TOE"/>/Platform to the VPN peer. The evaluator observes (for example, in the audit trail and the captured packets) that a successful connection was established using the tunnel mode.</test>
                                <test>The evaluator uses the operational guidance to configure the <abbr linkend="TOE"/>/platform to operate in transport mode and also configures a VPN peer to operate in transport mode. The evaluator configures the <abbr linkend="TOE"/>/platform and the VPN peer to use any of the allowed cryptographic algorithms, authentication methods, etc. to ensure an allowable SA can be negotiated. The evaluator then initiates a connection from the <abbr linkend="TOE"/>/platform to connect to the VPN peer. The evaluator observes (for example, in the audit trail and the captured packets) that a successful connection was established using the transport mode.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.4">
                        <title>The <abbr linkend="TSF"/> shall implement the IPsec protocol ESP as defined by RFC 4303 using the cryptographic algorithms AES-CBC-128, AES-CBC-256 (both specified by RFC 3602) and 
                            <selectables>
                                <selectable>AES-GCM-128 (specified in RFC 4106)</selectable>
                                <selectable>AES-GCM-256 (specified in RFC 4106)</selectable>
                                <selectable>no other algorithms</selectable>
                            </selectables> together with a Secure Hash Algorithm (SHA)-based HMAC.
                        </title>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to verify that the algorithms AES-CBC-128 and AES-CBC-256 are implemented. If the <abbr linkend="ST"/> author has selected either AES-GCM-128 or AES-GCM-256 in the requirement, then the evaluator verifies the <abbr linkend="TSS"/> describes these as well. In addition, the evaluator ensures that the SHA-based HMAC algorithm conforms to the algorithms specified in FCS_COP.1(4) Cryptographic Operations (for keyed-hash message authentication).<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator checks the operational guidance to ensure it provides instructions on how to configure the <abbr linkend="TOE"/>/platform to use the algorithms, and if either AES-GCM-128 or AES-GCM-256 have been selected the guidance instructs how to use these as well.<htm:br></htm:br><htm:br></htm:br>
                            <testlist>The evaluator shall configure the <abbr linkend="TOE"/>/platform as indicated in the operational guidance configuring the <abbr linkend="TOE"/>/platform to use each of the supported algorithms, attempt to establish a connection using ESP, and verify that the attempt succeeds.
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.5">
                        <title>The <abbr linkend="TSF"/> shall implement the protocol: <htm:br></htm:br><htm:br></htm:br>
                            <selectables linebreak="yes">
                                <selectable>IKEv1, using Main Mode for Phase 1 exchanges, as defined in RFCs 2407, 2408, 2409, RFC 4109, <selectables>
                                    <selectable>no other RFCs for extended sequence numbers</selectable>
                                    <selectable>RFC 4304 for extended sequence numbers</selectable>
                                </selectables>  and 
                                    <selectables>
                                        <selectable>no other RFCs for hash functions</selectable>
                                        <selectable>RFC 4868 for hash functions</selectable>
                                    </selectables> </selectable>
                               
                                <selectable>IKEv2 as defined in RFC 5996 and 
                                    <selectables>
                                        <selectable>with no support for NAT traversal</selectable>
                                        <selectable>with mandatory support for NAT traversal as specified in RFC 5996, section 2.23)</selectable>
                                    </selectables> and 
                                    <selectables>
                                        <selectable>no other RFCs for hash functions</selectable>
                                        <selectable>RFC 4868 for hash functions</selectable>
                                    </selectables>.</selectable>
                            </selectables>
                            
                        </title>
                        <note role="application">If the <abbr linkend="TOE"/> implements SHA-2 hash algorithms for IKEv1 or IKEv2, the <abbr linkend="ST"/> author shall select RFC 4868. If the <abbr linkend="ST"/> author selects IKEv1, FCS_IPSEC_EXT.1.15 must also be included in the <abbr linkend="ST"/>.</note>
                        <aactivity><abbr linkend="TSS"/>
                            The evaluator shall examine the <abbr linkend="TSS"/> to verify that IKEv1 and/or IKEv2 are implemented. If IKEv1 is claimed, the evaluator shall examine the <abbr linkend="TSS"/> to ensure that, in the description of the IPsec protocol, it states that aggressive mode is not used for IKEv1 Phase 1 exchanges, and that only main mode is used. It may be that this is a configurable option.<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall check the operational guidance to ensure it instructs the administrator how to configure the <abbr linkend="TOE"/>/platform to use IKEv1 and/or IKEv2 (as selected), and uses the guidance to configure the <abbr linkend="TOE"/>/platform to perform NAT traversal for the following test (if selected). If IKEv1 is claimed and the use of main mode requires configuration of the <abbr linkend="TOE"/>/platform prior to its operation, the evaluator shall check the operational guidance to ensure that instructions for this configuration are contained within that guidance.<htm:br></htm:br><htm:br></htm:br>
                            Tests are performed in conjunction with the other IPsec evaluation activities with the exception of the activities below:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>(conditional): If the <abbr linkend="TOE"/> claims IKEv1, the evaluator shall configure the <abbr linkend="TOE"/>/platform as indicated in the operational guidance (if applicable) and attempt to establish a connection using an IKEv1 Phase 1 connection in aggressive mode. This attempt should fail. The evaluator should then show that main mode exchanges are supported.</test>
                                <test>(conditional): The evaluator shall configure the <abbr linkend="TOE"/>/platform so that it will perform NAT traversal processing as described in the <abbr linkend="TSS"/> and RFC 5996, section 2.23. The evaluator shall initiate an IPsec connection and determine that the NAT is successfully traversed.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.6">
                        <title>The <abbr linkend="TSF"/> shall ensure the encrypted payload in the 
                            <selectables>
                                <selectable>IKEv1</selectable>
                                <selectable>IKEv2</selectable>
                            </selectables> protocol uses the cryptographic algorithms AES-CBC-128, AES-CBC-256 as specified in RFC 3602 and 
                            <selectables>
                                <selectable>AES-GCM-128</selectable>
                                <selectable>AES-GCM-256 as specified in RFC 5282</selectable>
                                <selectable>no other algorithm</selectable>
                            </selectables>.
                        </title>
                        <note role="application">AES-GCM-128 and AES-GCM-256 may only be selected if IKEv2 is also selected, as there is no RFC defining AES-GCM for IKEv1.</note>
                        <aactivity>The evaluator shall ensure the <abbr linkend="TSS"/> identifies the algorithms used for encrypting the IKEv1 and/or IKEv2 payload, and that the algorithms AES-CBC-128, AES-CBC-256 are specified, and if others are chosen in the selection of the requirement, those are included in the <abbr linkend="TSS"/> discussion.<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator ensures that the operational guidance describes the configuration of the mandated algorithms, as well as any additional algorithms selected in the requirement. The guidance is then used to configure the <abbr linkend="TOE"/>/platform to perform the following test for each ciphersuite selected.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall configure the <abbr linkend="TOE"/>/platform to use the ciphersuite under test to encrypt the IKEv1 and/or IKEv2 payload and establish a connection with a peer device, which is configured to only accept the payload encrypted using the indicated ciphersuite. The evaluator will confirm the algorithm was that used in the negotiation.
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.7">
                        <title>The <abbr linkend="TSF"/> shall ensure that 
                            <selectables linebreak="yes">
                                <selectable>IKEv1 Phase 1 SA lifetimes can be configured by an Administrator based on 
                                    <selectables linebreak="yes">
                                        <selectable>number of packets/bytes</selectable>
                                        <selectable>length of time, where the time values can be configured within 
                                            <assignable>integer range including 24</assignable> hours</selectable>
                                    </selectables>
                                    </selectable>
                                
                                <selectable>IKEv2 SA lifetimes can be configured by an Administrator based on 
                                    <selectables linebreak="yes">
                                        <selectable>number of packets/bytes</selectable>
                                        <selectable>length of time, where the time values can be configured within 
                                            <assignable>integer range including 24</assignable> hours</selectable>
                                    </selectables>
                                </selectable>
                            </selectables>
                            .
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author chooses either the IKEv1 requirements or IKEv2 requirements (or both, depending on the selection in FCS_IPSEC_EXT.1.5). The <abbr linkend="ST"/> author chooses either packet/volume-based lifetimes or time-based lifetimes. This requirement must be accomplished by providing Security Administrator-configurable lifetimes (with appropriate instructions in documents mandated by AGD_OPE). Hardcoded limits are not acceptable. In general, instructions for setting the parameters of the implementation, including lifetime of the SAs, should be included in the operational guidance generated for AGD_OPE.</note>
                        <aactivity>Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify that the values for SA lifetimes can be configured and that the instructions for doing so are located in the operational guidance. If time-based limits are supported, the evaluator ensures that the Administrator is able to configure Phase 1 SA values for 24 hours. Currently there are no values mandated for the number of packets or number of bytes, the evaluator just ensures that this can be configured if selected in the requirement.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            When testing this functionality, the evaluator needs to ensure that both sides are configured appropriately. From the RFC “A difference between IKEv1 and IKEv2 is that in IKEv1 SA lifetimes were negotiated. In IKEv2, each end of the SA is responsible for enforcing its own lifetime policy on the SA and rekeying the SA when necessary. If the two ends have different lifetime policies, the end with the shorter lifetime will end up always being the one to request the rekeying. If the two ends have the same lifetime policies, it is possible that both will initiate a rekeying at the same time (which will result in redundant SAs). To reduce the probability of this happening, the timing of rekeying requests SHOULD be jittered.”<htm:br></htm:br><htm:br></htm:br>
                            Each of the following tests shall be performed for each version of IKE selected in the FCS_IPSEC_EXT.1.5 protocol selection:
                            <testlist>
                                <test>(Conditional): The evaluator shall configure a maximum lifetime in terms of the number of packets (or bytes) allowed following the operational guidance. The evaluator shall configure a test peer with a packet/byte lifetime that exceeds the lifetime of the <abbr linkend="TOE"/>. The evaluator shall establish an SA between the <abbr linkend="TOE"/> and the test peer, and determine that once the allowed number of packets (or bytes) through this SA is exceeded, a new SA is negotiated. The evaluator shall verify that the <abbr linkend="TOE"/> initiates a Phase 1 negotiation.</test>
                                <test>(Conditional): The evaluator shall configure a maximum lifetime of 24 hours for the Phase 1 SA following the operational guidance. The evaluator shall configure a test peer with a lifetime that exceeds the lifetime of the <abbr linkend="TOE"/>. The evaluator shall establish an SA between the <abbr linkend="TOE"/> and the test peer, maintain the Phase 1 SA for 24 hours, and determine that once 24 hours has elapsed, a new Phase 1 SA is negotiated. The evaluator shall verify that the <abbr linkend="TOE"/> initiates a Phase 1 negotiation.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.8">
                        <title>The <abbr linkend="TSF"/> shall ensure that 
                            <selectables linebreak="yes">
                                <selectable>IKEv1 Phase 2 SA lifetimes can be configured by an Administrator based on 
                                    <selectables linebreak="yes">
                                        <selectable>number of packets/bytes</selectable>
                                        <selectable>length of time, where the time values can be configured within 
                                            <assignable>integer range including 8</assignable> hours</selectable>
                                    </selectables>
                                    </selectable>
                                <selectable>IKEv2 Child SA lifetimes can be configured by an Administrator based on 
                                    <selectables linebreak="yes">
                                        <selectable>number of packets/bytes</selectable>
                                        <selectable>length of time, where the time values can be configured within 
                                            <assignable>integer range including 8</assignable> hours</selectable>
                                    </selectables>
                                    </selectable>
                            </selectables>
                         </title>
                        <note role="application">The <abbr linkend="ST"/> author chooses either the IKEv1 requirements or IKEv2 requirements (or both, depending on the selection in FCS_IPSEC_EXT.1.5). The <abbr linkend="ST"/> author chooses either packet/volume-based lifetimes or time-based lifetimes. This requirement must be accomplished by providing Security Administrator-configurable lifetimes (with appropriate instructions in documents mandated by AGD_OPE). Hardcoded limits are not acceptable. In general, instructions for setting the parameters of the implementation, including lifetime of the SAs, should be included in the operational guidance generated for AGD_OPE.</note>
                        <aactivity>Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall verify that the values for SA lifetimes can be configured and that the instructions for doing so are located in the operational guidance. If time-based limits are supported, the evaluator ensures that the Administrator is able to configure Phase 2 SA values for 8 hours. Currently there are no values mandated for the number of packets or number of bytes, the evaluator just ensures that this can be configured if selected in the requirement.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            When testing this functionality, the evaluator needs to ensure that both sides are configured appropriately. From the RFC “A difference between IKEv1 and IKEv2 is that in IKEv1 SA lifetimes were negotiated. In IKEv2, each end of the SA is responsible for enforcing its own lifetime policy on the SA and rekeying the SA when necessary. If the two ends have different lifetime policies, the end with the shorter lifetime will end up always being the one to request the rekeying. If the two ends have the same lifetime policies, it is possible that both will initiate a rekeying at the same time (which will result in redundant SAs). To reduce the probability of this happening, the timing of rekeying requests SHOULD be jittered.”<htm:br></htm:br><htm:br></htm:br>
                            Each of the following tests shall be performed for each version of IKE selected in the FCS_IPSEC_EXT.1.5 protocol selection:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>(Conditional): The evaluator shall configure a maximum lifetime in terms of the number of packets (or bytes) allowed following the operational guidance. The evaluator shall configure a test peer with a packet/byte lifetime that exceeds the lifetime of the <abbr linkend="TOE"/>. The evaluator shall establish an SA between the <abbr linkend="TOE"/> and the test peer, and determine that once the allowed number of packets (or bytes) through this SA is exceeded, a new SA is negotiated. The evaluator shall verify that the <abbr linkend="TOE"/> initiates a Phase 2 negotiation.</test>
                                <test>Test 2 (Conditional): The evaluator shall configure a maximum lifetime of 8 hours for the Phase 2 SA following the operational guidance. The evaluator shall configure a test peer with a lifetime that exceeds the lifetime of the <abbr linkend="TOE"/>. The evaluator shall establish an SA between the <abbr linkend="TOE"/> and the test peer, maintain the Phase 1 SA for 8 hours, and determine that once 8 hours has elapsed, a new Phase 2 SA is negotiated. The evaluator shall verify that the <abbr linkend="TOE"/> initiates a Phase 2 negotiation.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.9">
                        <title>The <abbr linkend="TSF"/> shall generate the secret value x used in the IKE Diffie-Hellman key exchange (“x” in g^x mod p) using the random bit generator specified in FCS_RBG_EXT.1, and having a length of at least <assignable> (one or more) number(s) of bits that is at least twice the security strength of the negotiated Diffie-Hellman group</assignable> bits.
                        </title>
                        <note role="application">For DH groups 19 and 20, the "x" value is the point multiplier for the generator point G.<htm:br></htm:br><htm:br></htm:br>
                            Since the implementation may allow different Diffie-Hellman groups to be negotiated for use in forming the SAs, the assignment in FCS_IPSEC_EXT.1.9 may contain multiple values. For each DH group supported, the <abbr linkend="ST"/> author consults Table 2 in NIST SP 800-57 “Recommendation for Key Management –Part 1: General” to determine the security strength (“bits of security”) associated with the DH group. Each unique value is then used to fill in the assignment. For example, suppose the implementation supports DH group 14 (2048-bit MODP) and group 20 (ECDH using NIST curve P-384). From Table 2, the bits of security value for group 14 is 112, and for group 20 it is 192.</note>
                        <aactivity>The evaluator shall check to ensure that, for each DH group supported, the <abbr linkend="TSS"/> describes the process for generating "x" (as defined in FCS_IPSEC_EXT.1.). The evaluator shall verify that the <abbr linkend="TSS"/> indicates that the random number generated that meets the requirements in this PP is used, and that the length of "x" meets the stipulations in the requirement.
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.10">
                        <title>The <abbr linkend="TSF"/> shall generate nonces used in 
                            <selectables>
                                <selectable>IKEv1</selectable>
                                <selectable>IKEv2</selectable>
                            </selectables> exchanges of length 
                            <selectables linebreak="yes">
                                <selectable><assignable>security strength associated with the negotiated Diffie-Hellman group</assignable></selectable>
                                <selectable>at least 128 bits in size and at least half the output size of the negotiated pseudorandom function (PRF) hash</selectable>
                            </selectables>.
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author must select the second option for nonce lengths if IKEv2 is also selected (as this is mandated in RFC 5996). The <abbr linkend="ST"/> author may select either option for IKEv1.<htm:br></htm:br><htm:br></htm:br>
                            For the first option for nonce lengths, since the implementation may allow different Diffie-Hellman groups to be negotiated for use in forming the SAs, the assignment in FCS_IPSEC_EXT.1. may contain multiple values. For each DH group supported, the <abbr linkend="ST"/> author consults Table 2 in NIST SP 800-57 “Recommendation for Key Management –Part 1: General” to determine the security strength (“bits of security”) associated with the DH group. Each unique value is then used to fill in the assignment. For example, suppose the implementation supports DH group 14 (2048-bit MODP) and group 20 (ECDH using NIST curve P-384). From Table 2, the bits of security value for group 14 is 112, and for group 20 it is 192.<htm:br></htm:br><htm:br></htm:br>
                            Because nonces may be exchanged before the DH group is negotiated, the nonce used should be large enough to support all <abbr linkend="TOE"/>-chosen proposals in the exchange.</note>
                        <aactivity>
                            <testlist>
                                <test>(conditional) If the first selection is chosen, the evaluator shall check to ensure that, for each DH group supported, the <abbr linkend="TSS"/> describes the process for generating each nonce. The evaluator shall verify that the <abbr linkend="TSS"/> indicates that the random number generated that meets the requirements in this PP is used, and that the length of the nonces meet the stipulations in the requirement.</test>
                                <test>(conditional) If the second selection is chosen, the evaluator shall check to ensure that, for each PRF hash supported, the <abbr linkend="TSS"/> describes the process for generating each nonce. The evaluator shall verify that the <abbr linkend="TSS"/> indicates that the random number generated that meets the requirements in this PP is used, and that the length of the nonces meet the stipulations in the requirement.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.11">
                        <title>The <abbr linkend="TSF"/> shall ensure that all IKE protocols implement DH Groups 14 (2048-bit MODP), and 
                            <selectables>
                                <selectable>19 (256-bit Random ECP)</selectable>
                                <selectable>5 (1536-bit MODP)</selectable>
                                <selectable>24 (2048-bit MODP with 256-bit POS)</selectable>
                                <selectable>20 (384-bit Random ECP)</selectable>
                                <selectable>no other DH groups</selectable>
                            </selectables>.
                        </title>
                        <note role="application">The selection is used to specify additional DH groups supported. This applies to IKEv1 and IKEv2 exchanges. It should be noted that if any additional DH groups are specified, they must comply with the requirements (in terms of the ephemeral keys that are established) listed in FCS_CKM.1.</note>
                        <aactivity>The evaluator shall check to ensure that the DH groups specified in the requirement are listed as being supported in the <abbr linkend="TSS"/>. If there is more than one DH group supported, the evaluator checks to ensure the <abbr linkend="TSS"/> describes how a particular DH group is specified/negotiated with a peer.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            For each supported DH group, the evaluator shall test to ensure that all supported IKE protocols can be successfully completed using that particular DH group.
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.12">
                        <title>The <abbr linkend="TSF"/> shall be able to ensure by default that the strength of the symmetric algorithm (in terms of the number of bits in the key) negotiated to protect the 
                            <selectables>
                                <selectable>IKEv1 Phase 1</selectable>
                                <selectable>IKEv2 IKE_SA</selectable>
                            </selectables> connection is greater than or equal to the strength of the symmetric algorithm (in terms of the number of bits in the key) negotiated to protect the 
                            <selectables>
                                <selectable>IKEv1 Phase 2</selectable>
                                <selectable>IKEv2 CHILD_SA</selectable>
                            </selectables> connection.
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author chooses either or both of the IKE selections based on what is implemented by the <abbr linkend="TOE"/>. Obviously, the IKE version(s) chosen should be consistent not only in this element, but with other choices for other elements in this component. While it is acceptable for this capability to be configurable, the default configuration in the evaluated configuration (either "out of the box" or by configuration guidance in the AGD documentation) must enable this functionality.</note>
                        <aactivity>The evaluator shall check that the <abbr linkend="TSS"/> describes the potential strengths (in terms of the number of bits in the symmetric key) of the algorithms that are allowed for the IKE and ESP exchanges. The <abbr linkend="TSS"/> shall also describe the checks that are done when negotiating IKEv1 Phase 2 and/or IKEv2 CHILD_SA suites to ensure that the strength (in terms of the number of bits of key in the symmetric algorithm) of the negotiated algorithm is less than or equal to that of the IKE SA this is protecting the negotiation.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            The evaluator simply follows the guidance to configure the <abbr linkend="TOE"/>/platform to perform the following tests.
                            <testlist>
                                <test>This test shall be performed for each version of IKE supported. The evaluator shall successfully negotiate an IPsec connection using each of the supported algorithms and hash functions identified in the requirements.</test>
                                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an SA for ESP that selects an encryption algorithm with more strength than that being used for the IKE SA (i.e., symmetric algorithm with a key size larger than that being used for the IKE SA). Such attempts should fail.</test>
                                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an IKE SA using an algorithm that is not one of the supported algorithms and hash functions identified in the requirements. Such an attempt should fail.</test>
                                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an SA for ESP (assumes the proper parameters where used to establish the IKE SA) that selects an encryption algorithm that is not identified in FCS_IPSEC_EXT.1.4. Such an attempt should fail.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.13">
                        <title>The <abbr linkend="TSF"/> shall ensure that all IKE protocols perform peer authentication using a 
                            <selectables>
                                <selectable>RSA</selectable>
                                <selectable>ECDSA</selectable>
                            </selectables> that use X.509v3 certificates that conform to RFC 4945 and 
                            <selectables>
                                <selectable>Pre-shared Keys</selectable>
                                <selectable>no other method</selectable>
                            </selectables>.
                        </title>
                        <note role="application">At least one public-key-based Peer Authentication method is required in order to conform to this PP; one or more of the public key schemes is chosen by the <abbr linkend="ST"/> author to reflect what is implemented. The <abbr linkend="ST"/> author also ensures that appropriate FCS requirements reflecting the algorithms used (and key generation capabilities, if provided) are listed to support those methods. Note that the <abbr linkend="TSS"/> will elaborate on the way in which these algorithms are to be used (for example, 2409 specifies three authentication methods using public keys; each one supported will be described in the <abbr linkend="TSS"/>).</note>
                        <aactivity>The evaluator ensures that the <abbr linkend="TSS"/> identifies RSA and/or ECDSA as being used to perform peer authentication. The description shall be consistent with the algorithms as specified in FCS_COP.1(2) Cryptographic Operations (for cryptographic signature).<htm:br></htm:br><htm:br></htm:br>
                            If pre-shared keys are chosen in the selection, the evaluator shall check to ensure that the <abbr linkend="TSS"/> describes how pre-shared keys are established and used in authentication of IPsec connections. The evaluator shall check that the operational guidance describes how pre-shared keys are to be generated and established. The description in the <abbr linkend="TSS"/> and the operational guidance shall also indicate how pre-shared key establishment is accomplished for <abbr linkend="TOE"/>s that can generate a pre-shared key as well as <abbr linkend="TOE"/>s that simply use a pre-shared key.<htm:br></htm:br><htm:br></htm:br>
                            Operational Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator ensures the operational guidance describes how to set up the <abbr linkend="TOE"/> to use certificates with RSA and/or ECDSA signatures and public keys.<htm:br></htm:br><htm:br></htm:br>
                            In order to construct the environment and configure the <abbr linkend="TOE"/> for the following tests, the evaluator will ensure that the operational guidance describes how to configure the <abbr linkend="TOE"/> to connect to a trusted CA, and ensure a valid certificate for that CA is loaded into the <abbr linkend="TOE"/> and marked “trusted”.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            For efficiency sake, the testing that is performed may be combined with the testing for FIA_X509_EXT.1, FIA_X509_EXT.2 (for IPsec connections), and FCS_IPSEC_EXT.1.1. The following tests shall be repeated for each peer authentication selected in the FCS_IPSEC_EXT.1.1 selection above:
                            <testlist>
                                <test>The evaluator shall configure the <abbr linkend="TOE"/> to use a private key and associated certificate signed by a trusted CA and shall establish an IPsec connection with the peer.</test>
                                <test>[conditional]: The evaluator shall generate a pre-shared key off-<abbr linkend="TOE"/> and use it, as indicated in the operational guidance, to establish an IPsec connection with the peer.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.14">
                        <title>The <abbr linkend="TSF"/> shall support peer identifiers of the following types: 
                            <selectables>
                                <selectable>IP address</selectable>
                                <selectable>Fully Qualified Domain Name (FQDN)</selectable>
                                <selectable>user FQDN</selectable>
                                <selectable>Distinguished Name (DN)</selectable>
                            </selectables> and 
                            <selectables>
                                <selectable>no other reference identifier type</selectable>
                                <selectable><assignable>other supported reference identifier types</assignable></selectable>
                            </selectables>
                        </title>
                        <note role="application">The <abbr linkend="TOE"/> must support at least one of the following identifier types: IP address, Fully Qualified Domain Name (FQDN), user FQDN, or Distinguished Name (DN). In the future, the <abbr linkend="TOE"/> will be required to support all of these identifier types. The <abbr linkend="TOE"/> is expected to support as many IP address formats (IPv4 and IPv6) as IP versions supported by the <abbr linkend="TOE"/> in general. The <abbr linkend="ST"/> author may assign additional supported identifier types in the second selection.</note>
                        <aactivity>The assurance activities for this element are performed in conjunction with the assurance activities for the next element.
                        </aactivity>
                    </f-element>
                    <f-element id="FCS_IPSEC_EXT.1.15">
                        <title>The <abbr linkend="TSF"/> shall not establish an SA if the presented identifier does not match the configured reference identifier of the peer.
                        </title>
                        <note role="application">At this time, only the comparison between the presented identifier in the peer’s certificate and the peer’s reference identifier is mandated by the testing below. However, in the future, this requirement will address two aspects of the peer certificate validation: 1) comparison of the peer’s ID payload to the peer’s certificate which are both presented identifiers, as required by RFC 4945 and 2) verification that the peer identified by the ID payload and the certificate is the peer expected by the <abbr linkend="TOE"/> (per the reference identifier). At that time, the <abbr linkend="TOE"/> will be required to demonstrate both aspects (i.e. that the <abbr linkend="TOE"/> enforces that the peer’s ID payload matches the peer’s certificate which both match configured peer reference identifiers).<htm:br></htm:br><htm:br></htm:br>
                            Excluding the DN identifier type (which is necessarily the Subject DN in the peer certificate), the <abbr linkend="TOE"/> may support the identifier in either the Common Name or Subject Alternative Name (SAN) or both. If both are supported, the preferred logic is to compare the reference identifier to a presented SAN, and only if the peer’s certificate does not contain a SAN, to fall back to a comparison against the Common Name. In the future, the <abbr linkend="TOE"/> will be required to compare the reference identifier to the presented identifier in the SAN only, ignoring the Common Name.<htm:br></htm:br><htm:br></htm:br>
                            The configuration of the peer reference identifier is addressed by FMT_MOF_EXT.1.2 in the selected EP.</note>
                        <aactivity>
                            <abbr linkend="TSS"/><htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall ensure that the <abbr linkend="TSS"/> describes how the <abbr linkend="TOE"/> compares the peer’s presented identifier to the reference identifier. This description shall include whether the certificate presented identifier is compared to the ID payload presented identifier, which field(s) of the certificate are used as the presented identifier (DN, Common Name, or SAN), and, if multiple fields are supported, the logical order comparison. If the <abbr linkend="ST"/> author assigned an additional identifier type, the <abbr linkend="TSS"/> description shall also include a description of that type and the method by which that type is compared to the peer’s presented certificate.<htm:br></htm:br><htm:br></htm:br>
                            Guidance<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall ensure that the operational guidance includes the configuration of the reference identifier(s) for the peer.<htm:br></htm:br><htm:br></htm:br>
                            Tests<htm:br></htm:br><htm:br></htm:br>
                            For each supported identifier type (excluding DNs), the evaluator shall repeat the following tests:
                            <testlist>
                                <test>For each field of the certificate supported for comparison, the evaluator shall configure the peer’s reference identifier on the <abbr linkend="TOE"/> (per the administrative guidance) to match the field in the peer’s presented certificate and shall verify that the IKE authentication succeeds.</test>
                                <test>For each field of the certificate support for comparison, the evaluator shall configure the peer’s reference identifier on the <abbr linkend="TOE"/> (per the administrative guidance) to not match the field in the peer’s presented certificate and shall verify that the IKE authentication fails.</test>
                                <test>(conditional) If, according to the <abbr linkend="TSS"/>, the <abbr linkend="TOE"/> supports both Common Name and SAN certificate fields and uses the preferred logic outlined in the Application Note, the tests above with the Common Name field shall be performed using peer certificates with no SAN extension. Additionally, the evaluator shall configure the peer’s reference identifier on the <abbr linkend="TOE"/> to not match the SAN in the peer’s presented certificate but to match the Common Name in the peer’s presented certificate, and verify that the IKE authentication fails.</test>
                                <test>(conditional) If the <abbr linkend="TOE"/> supports DN identifier types, the evaluator shall configure the peer’s reference identifier on the <abbr linkend="TOE"/> (per the administrative guidance) to match the subject DN in the peer’s presented certificate and shall verify that the IKE authentication succeeds. To demonstrate a bit-wise comparison of the DN, the evaluator shall change a single bit in the DN (preferably, in an Object Identifier (OID) in the DN) and verify that the IKE authentication fails.</test>
                                <test>(conditional) If the <abbr linkend="TOE"/> supports both IPv4 and IPv6 and supports IP address identifier types, the evaluator must repeat test 1 and 2 with both IPv4 address identifiers and IPv6 identifiers. Additionally, the evaluator shall verify that the <abbr linkend="TOE"/> verifies that the IP header matches the identifiers by setting the presented identifiers and the reference identifier with the same IP address that differs from the actual IP address of the peer in the IP headers and verifying that the IKE authentication fails.</test>
                                <test>(conditional) If, according to the <abbr linkend="TSS"/>, the <abbr linkend="TOE"/> performs comparisons between the peer’s ID payload and the peer’s certificate, the evaluator shall repeat the following test for each combination of supported identifier types and supported certificate fields (as above). The evaluator shall configure the peer to present a different ID payload than the field in the peer’s presented certificate and verify that the <abbr linkend="TOE"/> fails to authenticate the IKE peer.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection id="fdp" title="User Data Protection">
                <f-component id="FDP_HBI_EXT.1" name="Hardware-Based Isolation Mechanisms"  status="threshold">
                    <f-element id="FDP_HBI_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall use 
                            <selectables>
                                <selectable>no mechanism</selectable>
                                <selectable><assignable>list of platform-provided, hardware-based mechanisms</assignable></selectable>
                            </selectables> to constrain a Guest <abbr linkend="VM"/>’s direct access to the following physical devices: 
                            <selectables>
                                <selectable>no devices</selectable>
                                <selectable><assignable> physical devices to which the <abbr linkend="VMM"/> allows Guest <abbr linkend="VM"/>s physical access</assignable></selectable>
                            </selectables>.
                            
                        </title>
                        <note role="application">The <abbr linkend="TSF"/> must use available hardware-based isolation mechanisms to constrain <abbr linkend="VM"/>s when <abbr linkend="VM"/>s have direct access to physical devices. “Direct access” in this context means that the <abbr linkend="VM"/> can read or write device memory or access device I/O ports without the <abbr linkend="VMM"/> being able to intercept and validate every transaction.</note>
                        <aactivity>The evaluator shall verify that the operational guidance contains instructions on how to ensure that the platform-provided, hardware-based mechanisms are enabled.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall ensure that the <abbr linkend="TSS"/> provides evidence that hardware-based isolation mechanisms are used to constrain <abbr linkend="VM"/>s when <abbr linkend="VM"/>s have direct access to physical devices, including an explanation of the conditions under which the <abbr linkend="TSF"/> invokes these protections.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_PPR_EXT.1" name="Physical Platform Resource Controls"  status="threshold">
                    <f-element id="FDP_PPR_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall allow an authorized administrator to control Guest <abbr linkend="VM"/> access to the following physical platform resources: <assignable>list of physical platform resources the <abbr linkend="VMM"/> is able to control access to</assignable>.
                        </title>
                    </f-element>
                    <f-element id="FDP_PPR_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall explicitly deny all Guest <abbr linkend="VM"/>s access to the following physical platform resources: 
                            <selectables>
                                <selectable>no physical platform resources</selectable>
                                <selectable><assignable>list of physical platform resources to which access is explicitly denied</assignable></selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="FDP_PPR_EXT.1.3">
                        <title>The <abbr linkend="TSF"/> shall explicitly allow all Guest <abbr linkend="VM"/>s access to the following physical platform resources: 
                            <selectables>
                                <selectable>no physical platform resources</selectable>
                                <selectable><assignable>list of physical platform resources to which access is always allowed</assignable></selectable>
                            </selectables>.
                        </title>
                        <note role="application">
                            This requirement specifies that the <abbr linkend="VMM"/> controls access to physical platform resources, and indicates that it must be configurable, but does not specify the means by which that is done. The <abbr linkend="ST"/> author should list the physical platform resources that can be configured for Guest <abbr linkend="VM"/> access by the administrator. Guest <abbr linkend="VM"/>s may not be allowed direct access to certain physical resources; those resources are listed in the second element. If there are no such resources, the <abbr linkend="ST"/> author selects "no physical platform resources". Likewise, any resources to which all Guest <abbr linkend="VM"/>s automatically have access to are listed in the third element; if there are no such resources, then "no physical platform resources" is selected.
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to determine that it describes the mechanism by which the <abbr linkend="VMM"/> controls a Guest <abbr linkend="VM"/>'s access to physical platform resources is described. This description shall cover all of the physical platforms allowed in the evaluated configuration by the <abbr linkend="ST"/>. This description shall include how the <abbr linkend="VMM"/> distinguishes among Guest <abbr linkend="VM"/>s, and how each physical platform resource that is controllable (that is, listed in the assignment statement in the first element) is identified. The evaluator shall ensure that the <abbr linkend="TSS"/> describes how the Guest <abbr linkend="VM"/> is associated with each physical resources, and how other Guest <abbr linkend="VM"/>s cannot access a physical resource without being granted explicit access. For <abbr linkend="TOE"/>s that implement a robust interface (other than just "allow access" or "deny access"), the evaluator shall ensure that the <abbr linkend="TSS"/> describes the possible operations or modes of access between a Guest <abbr linkend="VM"/>s and physical platform resources.<htm:br></htm:br><htm:br></htm:br>
                            If physical resources are listed in the second element, the evaluator shall examine the <abbr linkend="TSS"/> and operational guidance to determine that there appears to be no way to configure those resources for access by a Guest <abbr linkend="VM"/>. The evaluator shall document in the evaluation report their analysis of why the controls offered to configure access to physical resources can't be used to specify access to the resources identified in the second element (for example, if the interface offers a drop-down list of resources to assign, and the denied resources are not included on that list, that would be sufficient justification in the evaluation report).<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the operational guidance to determine that it describes how an administrator is able to configure access to physical platform resources for Guest <abbr linkend="VM"/>s for each platform allowed in the evaluated configuration according to the <abbr linkend="ST"/>. The evaluator shall also determine that the operational guidance identifies those resources listed in the second and third elements of the component and notes that access to these resources is explicitly denied/allowed, respectively.<htm:br></htm:br><htm:br></htm:br>
                            Using the operational guidance, the evaluator shall perform the following tests for each physical platform identified in the <abbr linkend="ST"/>:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>For each physical platform resource identified in the first element, the evaluator shall configure a Guest <abbr linkend="VM"/> to have access to that resource and show that the Guest <abbr linkend="VM"/> is able to successfully access that resource.</test>
                                <test>For each physical platform resource identified in the first element, the evaluator shall configure the system such that a Guest <abbr linkend="VM"/> does not have access to that resource and show that the Guest <abbr linkend="VM"/> is unable to successfully access that resource.</test>
                                <test>[conditional]: For <abbr linkend="TOE"/>s that have a robust control interface, the evaluator shall exercise each element of the interface as described in the <abbr linkend="TSS"/> and the operational guidance to ensure that the behavior described in the operational guidance is exhibited.</test>
                                <test>[conditional]: If the <abbr linkend="TOE"/> explicitly denies access to certain physical resources, the evaluator shall attempt to access each listed (in FDP_PPR_EXT.1.2) physical resource from a Guest <abbr linkend="VM"/> and observe that access is denied.</test>
                                <test>[conditional]: If the <abbr linkend="TOE"/> explicitly allows access to certain physical resources, the evaluator shall attempt to access each listed (in FDP_PPR_EXT.1.3) physical resource from a Guest <abbr linkend="VM"/> and observe that the access is allowed. If the operational guidance specifies that access is allowed simultaneously by more than one Guest <abbr linkend="VM"/>, the evaluator shall attempt to access each resource listed from more than one Guest <abbr linkend="VM"/> and show that access is allowed.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_RIP_EXT.1" name="Residual Information in Memory"  status="threshold">
                    <f-element id="FDP_RIP_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall ensure that any previous information content of physical memory is cleared prior to allocation to a Guest <abbr linkend="VM"/>.
                        </title>
                   
                        <note role="application">Physical memory must be zeroed before it is made accessible to a <abbr linkend="VM"/> for general use by a Guest OS.<htm:br></htm:br><htm:br></htm:br>
                            The purpose of this requirement is to ensure that a <abbr linkend="VM"/> does not receive memory containing data previously used by another <abbr linkend="VM"/> or the host.<htm:br></htm:br><htm:br></htm:br>
                            “For general use” means for use by the Guest OS in its page tables for running applications or system software.<htm:br></htm:br><htm:br></htm:br>
                            This does not apply to pages shared by design or policy between <abbr linkend="VM"/>s or between the <abbr linkend="VMM"/>s and <abbr linkend="VM"/>s, such as read-only OS pages or pages used for virtual device buffers.
                        </note>
                        <aactivity>The evaluator shall ensure that the <abbr linkend="TSS"/> documents the process used for clearing physical memory prior to allocation to a Guest <abbr linkend="VM"/>, providing details on when and how this is performed. Additionally, the evaluator shall ensure that the <abbr linkend="TSS"/> documents the conditions under which physical memory is not cleared prior to allocation to a Guest <abbr linkend="VM"/>, and describes when and how the memory is cleared.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_RIP_EXT.2" name="Residual Information on Disk"  status="threshold">
                    <f-element id="FDP_RIP_EXT.2.1">
                        <title>The <abbr linkend="TSF"/> shall ensure that any previous information content of physical disk storage is cleared prior to allocation to a Guest <abbr linkend="VM"/>.
                        </title>
                        <note role="application">Disk storage must be zeroed before it is made accessible to a <abbr linkend="VM"/> for use by a Guest OS.<htm:br></htm:br><htm:br></htm:br>
                            The purpose of this requirement is to ensure that a <abbr linkend="VM"/> does not receive disk storage containing data previously used by another <abbr linkend="VM"/> or the host.<htm:br></htm:br><htm:br></htm:br>
                            This does not apply to disk-resident files shared by design or policy between <abbr linkend="VM"/>s or between the <abbr linkend="VMM"/>s and <abbr linkend="VM"/>s, such as read-only data files or files used for inter-VM data transfers permitted by policy. </note>
                        <aactivity>The evaluator shall ensure that the <abbr linkend="TSS"/> documents the conditions under which physical disk storage is not cleared prior to allocation to a Guest <abbr linkend="VM"/>. The evaluator shall also ensure that the <abbr linkend="TSS"/> documents the metadata used in its virtual disk files. <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>On the host, the evaluator creates a file that is more than half the size of a connected physical storage device (or multiple files whose individual sizes add up to more than half the size of the storage media).  This file (or files) shall be filled entirely with a non-zero value.  Then, the
                                    file (or files) shall be released (freed for use but not cleared).  Next, the evaluator (as a <abbr linkend="VS"/> Administrator) creates a virtual disk at least that large on the same physical storage device and connects it to a powered-off <abbr linkend="VM"/>.  Then, from outside the 
                                    Guest <abbr linkend="VM"/>, scan through and check that all the non-metadata (as documented in the <abbr linkend="TSS"/>) in the file corresponding to that virtual disk is set to zero.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_VMS_EXT.1" name="VM Separation"  status="threshold">
                    <f-element id="FDP_VMS_EXT.1.1">
                        <title>The VS shall provide the following mechanisms for transferring data between Guest <abbr linkend="VM"/>s: 
                            <selectables linebreak="yes">
                                <selectable>no mechanism</selectable>
                                <selectable>virtual networking</selectable>
                                <selectable><assignable>other inter-VM data sharing mechanisms</assignable></selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="FDP_VMS_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall allow Administrators to configure these mechanisms to 
                            <selectables>
                                <selectable>enable</selectable>
                                <selectable>disable</selectable>
                            </selectables> the transfer of data between Guest <abbr linkend="VM"/>s.
                        </title>
                    </f-element>
                    <f-element id="FDP_VMS_EXT.1.3">
                        <title>The VS shall ensure that no Guest <abbr linkend="VM"/> is able to read or transfer data to or from another Guest <abbr linkend="VM"/> except through the mechanisms listed in FDP_VMS_EXT.1.1.
                        </title>
                        <note role="application">
                            The fundamental requirement of a Virtualization System is the ability to enforce separation between information domains implemented as Virtual Machines and Virtual Networks. The intent of this requirement is to ensure that <abbr linkend="VM"/>s, <abbr linkend="VMM"/>s, and the Virtualization System as a whole is implemented with this fundamental requirement in mind.<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="ST"/> author should select “no mechanism” in the unlikely event that the VS implements no mechanisms for transferring data between Guest <abbr linkend="VM"/>s. Otherwise, the <abbr linkend="ST"/> author should select “virtual networking” and identify all other mechanisms through which data can be transferred between Guest <abbr linkend="VM"/>s. This should be the same list of mechanisms supplied for FMT_MSA_EXT.1.<htm:br></htm:br><htm:br></htm:br>
                            Examples of non-network inter-VM sharing mechanisms are:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ul>
                                <htm:li>User interface-based mechanisms, such as copy-paste and drag-and-drop</htm:li>
                                <htm:li>Shared virtual or physical devices</htm:li>
                                <htm:li>API-based mechanisms such as Hypercalls</htm:li>
                            </htm:ul>
                            For data transfer mechanisms implemented in terms of Hypercall functions, FDP_VMS_EXT.1.2 is met if FPT_HCL_EXT.1.2 is met for those Hypercall functions (VM access to Hypercall functions is configurable).<htm:br></htm:br><htm:br></htm:br>
                            For data transfer mechanisms that use shared physical devices, FDP_VMS_EXT.1.2 is met if the device is listed in and meets FDP_PPR_EXT.1.1 (VM access to the physical device is configurable).<htm:br></htm:br><htm:br></htm:br>
                            For data transfer mechanisms that use virtual networking, FDP_VMS_EXT.1.2 is met if FDP_VNC_EXT.1.1 is met (VM access to virtual networks is configurable).<htm:br></htm:br><htm:br></htm:br>
                            FDP_VMS_EXT.1.3 is an attestation requirement. The vendor must attest that data cannot be transferred between Guest <abbr linkend="VM"/>s except through the configurable mechanisms documented in FDP_VMS_EXT.1.1. The vendor must attest that there are no design or implementation flaws that permit the above mechanisms to be bypassed or defeated, or for data to be transferred through a different, undocumented mechanism.
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to verify that it documents all inter-VM communications mechanisms (as defined above), including how the mechanisms are configured, how they are invoked, and how they are disabled.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following tests for each documented inter-VM communications channel:
                            <testlist>
                                <test>
                                    <htm:ol type="a">
                                        <htm:li>Create two <abbr linkend="VM"/>s, the first with the inter-VM communications channel currently being tested enabled, and the second with the inter-VM communications channel currently being tested disabled.</htm:li>
                                        <htm:li>Test that communications cannot be passed between the <abbr linkend="VM"/>s through the channel.</htm:li>
                                        <htm:li>As an Administrator, enable inter-VM communications between the <abbr linkend="VM"/>s on the second <abbr linkend="VM"/>.</htm:li>
                                        <htm:li>Test that communications can be passed through the inter-VM channel.</htm:li>
                                        <htm:li>As an Administrator again, disable inter-VM communications between the two <abbr linkend="VM"/>s.</htm:li>
                                        <htm:li>Test that communications can no longer be passed through the channel.</htm:li>
                                    </htm:ol>
                                    FDP_VMS_EXT.1.2 is met if communication is successful in step (d) and unsuccessful in step (f).<htm:br></htm:br><htm:br></htm:br>
                                    
                                </test>
                            </testlist>
                                    FMT_MSA_EXT.1.1 is met if communication is unsuccessful in step (b). FMT_MSA_EXT.1.2 is met if communication is successful in step (d). Additionally, FMT_MSA_EXT.1 requires that the evaluator verifies that the <abbr linkend="TSS"/> documents the inter-VM communications mechanisms as described above.
                                
                                
                                
                            The evaluator must ensure that the <abbr linkend="ST"/> includes the following statement attesting that there are no other ways for data to be transferred between <abbr linkend="VM"/>s other than those listed in FDP_VMS_EXT.1.1:<htm:br></htm:br><htm:br></htm:br>
                            A Guest <abbr linkend="VM"/> cannot access the data of another Guest <abbr linkend="VM"/>, or transfer data to another Guest <abbr linkend="VM"/> other than through the mechanisms described in FDP_VMS_EXT.1.1 when expressly enabled by an authorized Administrator. There are no design or implementation flaws that permit the above mechanisms to be bypassed or defeated, or for data to be transferred through undocumented mechanisms. This claim does not apply to covert channels or architectural side-channels.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_VNC_EXT.1" name="Virtual Networking Components"  status="threshold">
                    <f-element id="FDP_VNC_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall allow Administrators to configure virtual networking components to connect <abbr linkend="VM"/>s to each other, and to physical networks.
                        </title>
                    </f-element>
                    <f-element id="FDP_VNC_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall ensure that network traffic visible to a Guest <abbr linkend="VM"/> on a virtual network--or virtual segment of a physical network--is visible only to Guest <abbr linkend="VM"/>s configured to be on that virtual network or segment.
                        </title>
                        <note role="application">
                            Virtual networks must be isolated from one another to provide assurance commensurate with that provided by physically separate networks. It must not be possible for data to cross between properly configured virtual networks regardless of whether the traffic originated from a local Guest <abbr linkend="VM"/> or a remote host.<htm:br></htm:br><htm:br></htm:br>
                            Unprivileged users must not be able to connect <abbr linkend="VM"/>s to each other or to external networks.<htm:br></htm:br><htm:br></htm:br>
                            FDP_VNC_EXT.1.2 is an attestation requirement. The vendor must attest that traffic traversing a virtual network is visible only to Guest <abbr linkend="VM"/>s that are configured by an Administrator to be members of that virtual network, and that there are no design or implementation flaws that permit the virtual networking configuration to be bypassed or defeated, or for data to be transferred through undocumented mechanisms.
                        </note>
                        <aactivity>The evaluator must ensure that the <abbr linkend="TSS"/> and Operational Guidance describes how to create virtualized networks and connect <abbr linkend="VM"/>s to each other and to physical networks.
                            <testlist>
                                <test>The evaluator shall assume the role of the Administrator and attempt to configure a <abbr linkend="VM"/> to connect to a network component. The evaluator shall verify that the attempt is successful. The evaluator shall then assume the role of an unprivileged user and attempt the same connection. If the attempt fails, or there is no way for an unprivileged user to configure <abbr linkend="VM"/> network connections, the requirement is met.</test>
                                <test>The evaluator shall assume the role of the Administrator and attempt to configure a <abbr linkend="VM"/> to connect to a physical network. The evaluator shall verify that the attempt is successful. The evaluator shall then assume the role of an unprivileged user and make the same attempt. If the attempt fails, or there is no way for an unprivileged user to configure <abbr linkend="VM"/> network connections, the requirement is met.</test>
                            </testlist>
                            The evaluator must ensure that the <abbr linkend="ST"/> includes the following statement attesting that virtual network traffic is visible only to <abbr linkend="VM"/>s configured to be on that virtual network:<htm:br></htm:br><htm:br></htm:br>
                            “Traffic traversing a virtual network is visible only to Guest <abbr linkend="VM"/>s that are configured by an Administrator to be members of that virtual network. There are no design or implementation flaws that permit the virtual networking configuration to be bypassed or defeated, or for data to be transferred through undocumented mechanisms. This claim does not apply to covert channels or architectural side-channels.”
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection id="fia" title="Identification and Authentication">
                <f-component id="FIA_AFL_EXT.1" name="Authentication Failure Handling"  status="threshold">
                    <f-element id="FIA_AFL_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall detect when 
                            <selectables linebreak="yes">
                                <selectable><assignable>a positive integer number</assignable></selectable>
                                <selectable>an administrator configurable positive integer within a 
                                    <assignable>range of acceptable values</assignable></selectable>
                            </selectables>
                            
                            unsuccessful authentication attempts occur related to Administrators attempting to authenticate remotely using a
                            <selectables>
                                <selectable>password</selectable>
                                <selectable>PIN</selectable>.
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FIA_AFL_EXT.1.2">
                        <title>When the defined number of unsuccessful authentication attempts has been met, the <abbr linkend="TSF"/>
                            shall: 
                            <selectables>
                                <selectable>prevent the offending Administrator from successfully establishing remote session using
                                    any authentication method that involves a password or PIN until
                                    <assignable>action to unlock</assignable> is taken by an Administrator</selectable>
                                <selectable>prevent the offending Administrator from successfully establishing remote session using
                                    any authentication method that involves a password or PIN until an Administrator defined time
                                    period has elapsed</selectable>
                            </selectables>
                        </title>
                        <note role="application">The action to be taken shall be populated in the selection of the <abbr linkend="ST"/>
                            and defined in the Administrator guidance.<htm:br></htm:br><htm:br></htm:br>
                            This requirement applies to a defined number of successive unsuccessful remote password or PIN-based
                            authentication attempts and does not apply to local Administrative access. Compliant TOEs may optionally
                            include cryptographic authentication failures and local authentication failures in the number of
                            unsuccessful authentication attempts.
                        </note>
                        <aactivity>The evaluator shall perform the following tests for each credential selected in FIA_AFL_EXT.1.1:
                            <testlist>
                                <test>The evaluator will set an Administrator-configurable threshold n for failed attempts, or note the ST-specified assignment.</test>
                                <testlist>
                                    <test>The evaluator will attempt to authenticate remotely with the credential n-1 times. The evaluator will then attempt to authenticate
                                        using a good credential and verify that authentication is successful.</test>
                                    <test> The evaluator will make n attempts to authenticate using a bad credential. The evaluator
                                        will then attempt to authenticate using a good credential and verify that the attempt is
                                        unsuccessful. Note that the authentication attempts and lockouts must also be logged as
                                        specified in FAU_GEN.1.</test>
                                    <test>After reaching the limit for unsuccessful authentication attempts the evaluator will proceed
                                        as follows:</test>
                                </testlist>


                                <test>The evaluator will attempt to authenticate repeatedly to the system with a known bad password. Once the defined number of failed authentication attempts has been reached the evaluator will ensure that the account that was being used for testing has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that an event has been logged to the security event log detailing that the account has had these actions applied.</test>
                                <test>The evaluator will attempt to authenticate repeatedly to the system with a known bad certificate. Once the defined number of failed authentication attempts has been reached the evaluator will ensure that the account that was being used for testing has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that an event has been logged to the security event log detailing that the account has had these actions applied.</test>
                                <test>The evaluator will attempt to authenticate repeatedly to the system using both a bad password and a bad certificate. Once the defined number of failed authentication attempts has been reached the evaluator will ensure that the account that was being used for testing has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that an event has been logged to the security event log detailing that the account has had these actions applied.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_UAU.5" name="Multiple Authentication Mechanisms"  status="threshold">
                    <f-element id="FIA_UAU.5.1">
                        <title>The <abbr linkend="TSF"/> shall provide the following authentication mechanisms: 
                            <selectables linebreak="yes">
                                <selectable>authentication based on username and password</selectable>
                                <selectable>authentication based on username and a PIN that releases an asymmetric key stored in OE-protected storage</selectable>
                                <selectable>authentication based on X.509 certificates</selectable>
                                <selectable>authentication based on an SSH public key credential]
                                    to support Administrator authentication</selectable>
                            </selectables>
                            
                        </title>
                        <note role="application">Selection of ‘authentication based on username and password’ requires that FIA_PMG_EXT.1 be included in the <abbr linkend="ST"/>. This also requires that the <abbr linkend="ST"/> include a management function for password management. If the <abbr linkend="ST"/> author selects ‘authentication based on an SSH public-key credential’, the <abbr linkend="TSF"/> shall be validated against the Extended Package for Secure Shell.<htm:br></htm:br><htm:br></htm:br>
                            PINs used to access OE-protected storage are set and managed by the OE-protected storage mechanism. Thus requirements on PIN management are outside the scope of the <abbr linkend="TOE"/>.
                        </note>
                    </f-element>
                    <f-element id="FIA_UAU.5.2">
                        <title>The <abbr linkend="TSF"/> shall authenticate any Administrator’s claimed identity according to the <assignable>rules describing how the multiple authentication mechanisms provide authentication</assignable>.
                        </title>
                        <aactivity>If ‘username and password authentication‘ is selected, the evaluator will configure the VS with a known username and password and conduct the following tests:
                            <testlist>
                                <test>The evaluator will attempt to authenticate to the VS using the known username and password. The evaluator will ensure that the authentication attempt is successful.</test>
                                <test>The evaluator will attempt to authenticate to the VS using the known username but an incorrect password. The evaluator will ensure that the authentication attempt is unsuccessful.</test>
                            </testlist>
                            If ‘username and PIN that releases an asymmetric key‘ is selected, the evaluator will examine the <abbr linkend="TSS"/> for guidance on supported protected storage and will then configure the <abbr linkend="TOE"/> or OE to establish a PIN which enables release of the asymmetric key from the protected storage (such as a TPM, a hardware token, or isolated execution environment) with which the VS can interface. The evaluator will then conduct the following tests:
                            <testlist>
                                <test>The evaluator will attempt to authenticate to the VS using the known user name and PIN. The evaluator will ensure that the authentication attempt is successful.</test>
                                <test>The evaluator will attempt to authenticate to the VS using the known user name but an incorrect PIN. The evaluator will ensure that the authentication attempt is unsuccessful.</test>
                            </testlist>
                            If ‘X.509 certificate authentication‘ is selected, the evaluator will generate an X.509v3 certificate for an Administrator user with the Client Authentication Enhanced Key Usage field set. The evaluator will provision the VS for authentication with the X.509v3 certificate. The evaluator will ensure that the certificates are validated by the VS as per FIA_X509_EXT.1.1 and then conduct the following tests:
                            <testlist>
                                <test>The evaluator will attempt to authenticate to the VS using the X.509v3 certificate. The evaluator will ensure that the authentication attempt is successful.</test>
                                <test>The evaluator will generate a second certificate identical to the first except for the public key and any values derived from the public key. The evaluator will attempt to authenticate to the VS with this certificate. The evaluator will ensure that the authentication attempt is unsuccessful.</test>
                            </testlist>
                            If ‘SSH public-key credential authentication‘ is selected, the evaluator shall generate a public-private host key pair on the <abbr linkend="TOE"/> using RSA or ECDSA, and a second public-private key pair on a remote client. The evaluator shall provision the VS with the client public key for authentication over SSH, and conduct the following tests:
                            <testlist>
                                <test>The evaluator will attempt to authenticate to the VS using a message signed by the client private key that corresponds to provisioned client public key. The evaluator will ensure that the authentication attempt is successful.</test>
                                <test>The evaluator will generate a second client key pair and will attempt to authenticate to the VS with the private key over SSH without first provisioning the VS to support the new key pair. The evaluator will ensure that the authentication attempt is unsuccessful.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_UIA_EXT.1" name="Administrator Identification and Authentication"  status="threshold">
                    <f-element id="">
                        <title>The <abbr linkend="TSF"/> shall require Administrators to be successfully identified and authenticated using one of the methods in FIA_UAU.5 before allowing any <abbr linkend="TSF"/>-mediated management function to be performed by that Administrator.
                        </title>
                        <note role="application">Users do not have to authenticate, only Administrators need to authenticate.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to determine that it describes the logon process for each logon method (local, remote (HTTPS, SSH, etc.)) supported for the product. This description shall contain information pertaining to the credentials allowed/used, any protocol transactions that take place, and what constitutes a “successful logon”. The evaluator shall examine the operational guidance to determine that any necessary preparatory steps (e.g., establishing credential material such as pre-shared keys, tunnels, certificates, etc.) to logging in are described. For each supported the login method, the evaluator shall ensure the operational guidance provides clear instructions for successfully logging on. If configuration is necessary to ensure the services provided before login are limited, the evaluator shall determine that the operational guidance provides sufficient instruction on limiting the allowed services.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_PMG_EXT.1" name="Password Management"  status="sel-based">
                    <selection-depends req="FIA_UAU.5.1"/><!-- HERE check this -->
                    <f-element id="FIA_PMG_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide the following password management capabilities for administrative passwords:
                            <htm:ol type="a">
                                <htm:li>Passwords shall be able to be composed of any combination of upper and lower case characters, digits, and the following special characters: 
                                    <selectables>
                                        <selectable>“!”</selectable>
                                        <selectable>“@”</selectable>
                                        <selectable>“#”</selectable>
                                        <selectable>“$”</selectable>
                                        <selectable>“%”</selectable>
                                        <selectable>“^”</selectable>
                                        <selectable>“&amp; ”</selectable>
                                        <selectable>“*”</selectable>
                                        <selectable>“(“</selectable>
                                        <selectable>“)”</selectable>
                                        <selectable><assignable>other characters</assignable></selectable>
                                    </selectables></htm:li>
                                <htm:li>Minimum password length shall be configurable</htm:li>
                                <htm:li>Passwords of at least 15 characters in length shall be supported</htm:li>
                            </htm:ol>
                        </title>
                        <note role="application">The <abbr linkend="ST"/> author selects the special characters that are supported by the <abbr linkend="TOE"/>; they may optionally list additional special characters supported using the assignment. “Administrative passwords” refers to passwords used by administrators to gain access to the Management Subsystem.</note>
                        <aactivity>
                            The evaluator shall examine the operational guidelines to determine that it provides guidance to security administrators in the composition of strong passwords, and that it provides instructions on setting the minimum password length. The evaluator shall also perform the following tests. Note that one or more of these tests may be performed with a single test case.
                            <testlist>
                                <test>The evaluator shall compose passwords that either meet the requirements, or fail to meet the requirements, in some way. For each password, the evaluator shall verify that the <abbr linkend="TOE"/> supports the password. While the evaluator is not required (nor is it feasible) to test all possible combinations of passwords, the evaluator shall ensure that all characters, rule characteristics, and a minimum length listed in the requirement are supported, and justify the subset of those characters chosen for testing.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_X509_EXT.1" name="X.509 Certificate Validation"  status="sel-based">
                    <selection-depends req="FIA_UAU.5.2"/><!-- HERE check this -->
                    <f-element id="FIA_X509_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall validate certificates in accordance with the following rules:
                            <htm:ul>
                                <htm:li>RFC 5280 certificate validation and certificate path validation</htm:li>
                                <htm:li>The certificate path must terminate with a trusted certificate</htm:li>
                                <htm:li>The <abbr linkend="TSF"/> shall validate a certificate path by ensuring the presence of the basicConstraints extension and that the CA flag is set to TRUE for all CA certificates</htm:li>
                                <htm:li>
                                    The <abbr linkend="TSF"/> shall validate the revocation status of the certificate using 
                                    <selectables>
                                        <selectable>the Online Certificate Status Protocol (OCSP) as specified in RFC 2560</selectable>
                                        <selectable>a Certificate Revocation List (CRL) as specified in RFC 5759</selectable>
                                    </selectables>
                                </htm:li>
                                <htm:li>
                                    The <abbr linkend="TSF"/> shall validate the extendedKeyUsage field according to the following rules:
                                    <htm:ul>
                                        <htm:li>Certificates used for trusted updates and executable code integrity verification shall have the Code Signing purpose (id-kp 3 with OID 1.3.6.1.5.5.7.3.3) in the extendedKeyUsage field</htm:li>
                                        <htm:li>Server certificates presented for TLS shall have the Server Authentication purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the extendedKeyUsage field</htm:li>
                                        <htm:li>Client certificates presented for TLS shall have the Client Authentication purpose (id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the extendedKeyUsage field</htm:li>
                                        <htm:li>OCSP certificates presented for OCSP responses shall have the OCSP Signing purpose (id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the extendedKeyUsage field</htm:li>
                                    </htm:ul>
                                </htm:li>
                            </htm:ul>
                        </title>
                        <note role="application">This SFR must be included in the <abbr linkend="ST"/> if the selection for FPT_TUD_EXT.1.3 is “digital signature mechanism,” or if the selection for FTP_ITC_EXT.1 includes “IPsec,” “TLS,” or “TLS/HTTPS.”<htm:br></htm:br><htm:br></htm:br>
                            FIA_X509_EXT.1.1 lists the rules for validating certificates. The <abbr linkend="ST"/> author shall select whether revocation status is verified using OCSP or CRLs. FIA_X509_EXT.2 requires that certificates are used for IPsec; this use requires that the extendedKeyUsage rules are verified. Certificates may optionally be used for SSH, TLS and HTTPS and, if implemented, must be validated to contain the corresponding extendedKeyUsage.<htm:br></htm:br><htm:br></htm:br>
                            Regardless of the selection of <abbr linkend="TSF"/> or <abbr linkend="TOE"/> platform, the validation is expected to end in a trusted root CA certificate in a root store managed by the platform.</note>
                    </f-element>
                    <f-element id="FIA_X509_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall only treat a certificate as a CA certificate if the basicConstraints extension is present and the CA flag is set to TRUE.
                        </title>
                        <note role="application">This requirement applies to certificates that are used and processed by the <abbr linkend="TSF"/> and restricts the certificates that may be added as trusted CA certificates.</note>
                        <aactivity>The evaluator shall ensure the <abbr linkend="TSS"/> describes where the check of validity of the certificates takes place. The evaluator ensures the <abbr linkend="TSS"/> also provides a description of the certificate path validation algorithm.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the <abbr linkend="TSS"/> to confirm that it describes the behavior of the <abbr linkend="TOE"/> when a connection cannot be established during the validity check of a certificate used in establishing a trusted channel. If the requirement that the administrator is able to specify the default action, then the evaluator shall ensure that the operational guidance contains instructions on how this configuration action is performed.<htm:br></htm:br><htm:br></htm:br>
                            The tests described must be performed in conjunction with the other Certificate Services assurance activities, including the use cases in FIA_X509_EXT.2.1. The tests for the extendedKeyUsage rules are performed in conjunction with the uses that require those rules.<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall demonstrate that validating a certificate without a valid certification path results in the function (application validation, trusted channel setup, or trusted software update) failing. The evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                                <test>The evaluator shall demonstrate that validating an expired certificate results in the function failing.</test>
                                <test>The evaluator shall test that the <abbr linkend="TOE"/> can properly handle revoked certificates –conditional on whether CRL or OCSP is selected; if both are selected, and then a test is performed for each method. The evaluator has to only test one up in the trust chain (future revisions may require to ensure the validation is done up the entire chain). The evaluator shall ensure that a valid certificate is used, and that the validation function succeeds. The evaluator then attempts the test with a certificate that will be revoked (for each method chosen in the selection) to ensure when the certificate is no longer valid that the validation function fails.</test>
                                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the <abbr linkend="TOE"/>’s certificate does not contain the basicConstraints extension. The validation of the certificate path fails.</test>
                                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the <abbr linkend="TOE"/>’s certificate has the cA flag in the basicConstraints extension not set. The validation of the certificate path fails.</test>
                                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the <abbr linkend="TOE"/>’s certificate has the cA flag in the basicConstraints extension set to TRUE. The validation of the certificate path succeeds.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_X509_EXT.2" name="X.509 Certificate Authentication"  status="sel-based">
                    <selection-depends req="FPT_TUD_EXT.1.3"/><!-- HERE check this -->
                    <f-element id="FIA_X509_EXT.2.1">
                        <title>The <abbr linkend="TSF"/> shall use X.509v3 certificates as defined by RFC 5280 to support authentication for 
                            <selectables>
                                <selectable>IPsec</selectable>
                                <selectable>TLS</selectable>
                                <selectable>HTTPS</selectable>
                                <selectable>SSH</selectable>
                            </selectables>, and 
                            <selectables>
                                <selectable>code signing for system software updates</selectable>
                                <selectable>code signing for integrity verification</selectable>
                                <selectable><assignable>other uses</assignable></selectable>
                                <selectable>no additional uses</selectable>
                            </selectables>
                        </title>
                        <note role="application">This SFR must be included in the <abbr linkend="ST"/> if the selection for FPT_TUD_EXT.1.3 is “digital signature mechanism,” or if the selection for FTP_ITC_EXT.1 includes “IPsec,” “TLS,” or “TLS/HTTPS.”</note>
                    </f-element>
                    <f-element id="FIA_X509_EXT.2.2">
                        <title>When the <abbr linkend="TSF"/> cannot establish a connection to determine the validity of a certificate, the <abbr linkend="TSF"/> shall 
                            <selectables>
                                <selectable>allow the administrator to choose whether to accept the certificate in these cases</selectable>
                                <selectable>accept the certificate</selectable>
                                <selectable>not accept the certificate</selectable>
                            </selectables>.
                        </title>
                        <note role="application">Often a connection must be established to check the revocation status of a certificate - either to download a CRL or to perform a lookup using OCSP. The selection is used to describe the behavior in the event that such a connection cannot be established (for example, due to a network error). If the <abbr linkend="TOE"/> has determined the certificate valid according to all other rules in FIA_X509_EXT.1, the behavior indicated in the selection shall determine the validity. The <abbr linkend="TOE"/> must not accept the certificate if it fails any of the other validation rules in FIA_X509_EXT.1. If the administrator-configured option is selected by the <abbr linkend="ST"/> Author, the <abbr linkend="ST"/> Author must ensure that this is also defined as a management function that is provided by the <abbr linkend="TOE"/>.</note>
                        <aactivity>The evaluator shall check the <abbr linkend="TSS"/> to ensure that it describes how the <abbr linkend="TOE"/> chooses which certificates to use, and any necessary instructions in the administrative guidance for configuring the operating environment so that the <abbr linkend="TOE"/> can use the certificates.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the <abbr linkend="TSS"/> to confirm that it describes the behavior of the <abbr linkend="TOE"/> when a connection cannot be established during the validity check of a certificate used in establishing a trusted channel. If the requirement that the administrator is able to specify the default action, then the evaluator shall ensure that the operational guidance contains instructions on how this configuration action is performed.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform Test 1 for each function listed in FIA_X509_EXT.2.1 that requires the use of certificates:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. Using the administrative guidance, the evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                                <test>The evaluator shall demonstrate that using a valid certificate that requires certificate validation checking to be performed in at least some part by communicating with a non-<abbr linkend="TOE"/> IT entity. The evaluator shall then manipulate the environment so that the <abbr linkend="TOE"/> is unable to verify the validity of the certificate, and observe that the action selected in FIA_X509_EXT.2.2 is performed. If the selected action is administrator-configurable, then the evaluator shall follow the operational guidance to determine that all supported administrator-configurable options behave in their documented manner.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection id="fmt" title="Security Management">
                <f-component id="FMT_MSA_EXT.1" name="Default Data Sharing Configuration"  status="threshold">
                    <f-element id="FMT_MSA_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall by default enforce a policy prohibiting sharing of data between Guest <abbr linkend="VM"/>s using 
                            <selectables linebreak="yes">
                                <selectable>no mechanism</selectable>
                                <selectable>virtual networking</selectable>
                                <selectable><assignable>other inter-VM data sharing mechanisms</assignable></selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="FMT_MSA_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall allow Administrators to specify alternative initial configuration values to override the default values when a Guest <abbr linkend="VM"/> is created.
                        </title>
                        <note role="application">By default, the <abbr linkend="VMM"/> must enforce a policy prohibiting sharing of data between <abbr linkend="VM"/>s. The default policy applies to all mechanisms for sharing data between <abbr linkend="VM"/>s, including inter-VM communication channels, shared physical devices, shared virtual devices, and virtual networks. The default policy does not apply to covert channels and architectural side-channels.<htm:br></htm:br><htm:br></htm:br>
                            The <abbr linkend="ST"/> author should select “no mechanism” in the unlikely event that the VS implements no mechanisms for transferring data between Guest <abbr linkend="VM"/>s. Otherwise, the <abbr linkend="ST"/> author should select “virtual networking” and all other mechanisms through which data can be transferred between Guest <abbr linkend="VM"/>s. This should be the same list of mechanisms supplied in FDP_VMS_EXT.1.<htm:br></htm:br><htm:br></htm:br>
                            Examples of non-network inter-VM sharing mechanisms are:<htm:br></htm:br>
                            <htm:ul>
                                <htm:li>User interface-based mechanisms, such as copy-paste and drag-and-drop</htm:li>
                                <htm:li>Shared virtual or physical devices</htm:li>
                                <htm:li>API-based mechanisms such as Hypercalls</htm:li>
                            </htm:ul>.</note>
                        <aactivity>This requirement is met if FDP_VMS_EXT.1 is met.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FMT_SMO_EXT.1" name="Separation of Management and Operational Networks"  status="threshold">
                    <f-element id="FMT_SMO_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall support the configuration of separate management and operational networks through 
                            <selectables>
                                <selectable>physical means</selectable>
                                <selectable>logical means</selectable>
                                <selectable>trusted channel</selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="">
                        <title>
                        </title>
                        <note role="application">Management communications must be separate from user workloads. Administrative communications—including communications between physical hosts concerning load balancing, audit data, <abbr linkend="VM"/> startup and shutdown—must be separate from guest operational networks.<htm:br></htm:br><htm:br></htm:br>
                            “Physical means” refers to using separate physical networks for management and operational networks. For example, the machines in the management network are connected by separate cables plugged into separate and dedicated physical ports on each physical host.<htm:br></htm:br><htm:br></htm:br>
                            “Logical means” refers to using separate network cables to connect physical hosts together using general-purpose networking ports. The management and operational networks are kept separate within the hosts using separate virtualized networking components.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="ST"/> author selects “trusted channel”, then the protocols used for network separation must be selected in FTP_ITC_EXT.1.
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to verify that it describes how management and operational networks may be separated.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the operational guidance to verify that it details how to configure the VS with separate Management and Operational Networks.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall configure the management network as documented. If separation is cryptographic or logical, then the evaluator shall capture packets on the management network. If Guest network traffic is detected, the requirement is not met.
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection id="fpt" title="Protection of the TSF">
                <f-component id="FPT_DVD_EXT.1" name="Non-Existence of Disconnected Virtual Devices"  status="threshold">
                    <f-element id="FPT_DVD_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall limit a Guest <abbr linkend="VM"/>’s access to virtual devices to those that are present in the <abbr linkend="VM"/>’s current virtual hardware configuration.
                        </title>
                        <note role="application">The virtualized hardware abstraction implemented by a particular VS might include the virtualized interfaces for many different devices. Sometimes these devices are not present in a particular instantiation of a <abbr linkend="VM"/>. The interface for devices not present must not accessible by the <abbr linkend="VM"/>.<htm:br></htm:br><htm:br></htm:br>
                            Such interfaces include memory buffers and processor I/O ports.<htm:br></htm:br><htm:br></htm:br>
                            The purpose of this requirement is to reduce the attack surface of the <abbr linkend="VMM"/> by closing unused interfaces.</note>
                        <aactivity>The evaluator shall connect a device to a VM, then using a device driver running in the guest, scan the VM's processor I/O ports to ensure that the device's ports are present. (The device's interface should be documented in the TSS under FPT_VDP_EXT.1.) The evaluator shall remove the device from the VM and run the scan again. This requirement is met if the device's I/O ports are no longer present.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_EEM_EXT.1" name="Execution Environment Mitigations"  status="threshold">
                    <f-element id="FPT_EEM_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall take advantage of execution environment-based vulnerability mitigation mechanisms supported by the Platform such as: 
                            <selectables linebreak="yes">
                                <selectable>Address space randomization</selectable>
                                <selectable>Memory execution protection (e.g., DEP)</selectable>
                                <selectable>Stack buffer overflow protection</selectable>
                                <selectable>Heap corruption detection</selectable>
                                <selectable><assignable>other mechanisms</assignable></selectable>
                                <selectable>No mechanisms</selectable>
                            </selectables>
                        </title>
                        <note role="application">Processor manufacturers, compiler developers, and operating system vendors have developed execution environment-based mitigations that increase the cost to attackers by adding complexity to the task of compromising systems. Software can often take advantage of these mechanisms by using APIs provided by the operating system or by enabling the mechanism through compiler or linker options.<htm:br></htm:br><htm:br></htm:br>
                            This requirement does not mandate that these protections be enabled throughout the Virtualization System—only that they be enabled where they have likely impact. For example, code that receives and processes user input should take advantage of these mechanisms.<htm:br></htm:br><htm:br></htm:br>
                            For the selection, the <abbr linkend="ST"/> author selects the supported mechanism(s) and uses the assignment to include mechanisms not listed in the selection, if any.</note>
                        <aactivity>
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure that it states, for each platform listed in the <abbr linkend="ST"/>, the execution environment-based vulnerability mitigation mechanisms used by the <abbr linkend="TOE"/> on that platform. The evaluator shall ensure that the lists correspond to what is specified in FPT_EEM_EXT.1.1.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_HAS_EXT.1" name="Hardware Assists"  status="threshold">
                    <f-element id="FPT_HAS_EXT.1.1">
                        <title>The <abbr linkend="VMM"/> shall use <assignable>list of hardware-based virtualization assists</assignable> to reduce or eliminate the need for binary translation.
                        </title>
                    </f-element>
                    <f-element id="FPT_HAS_EXT.1.2">
                        <title>The <abbr linkend="VMM"/> shall use <assignable>list of hardware-based virtualization memory-handling assists</assignable> to reduce or eliminate the need for shadow page tables.
                        </title>
                        <note role="application">These hardware-assists help reduce the size and complexity of the <abbr linkend="VMM"/>, and thus, of the trusted computing base, by eliminating or reducing the need for paravirtualization or binary translation. Paravirtualization involves modifying guest software so that instructions that cannot be properly virtualized are never executed on the physical processor.<htm:br></htm:br><htm:br></htm:br>
                            For the assignment in FPT_HAS_EXT.1, the <abbr linkend="ST"/> author lists the hardware-based virtualization assists on all platforms included in the <abbr linkend="ST"/> that are used by the <abbr linkend="VMM"/> to reduce or eliminate the need for software-based binary translation. Examples for the x86 platform are Intel VT-x and AMD-V. “None” is an acceptable assignment for platforms that do not require virtualization assists in order to eliminate the need for binary translation. This must be documented in the <abbr linkend="TSS"/>.<htm:br></htm:br><htm:br></htm:br>
                            For the assignment in FPT_HAS_EXT.1.2, the <abbr linkend="ST"/> author lists the set of hardware-based virtualization memory-handling extensions for all platforms listed in the <abbr linkend="ST"/> that are used by the <abbr linkend="VMM"/> to reduce or eliminate the need for shadow page tables. Examples for the x86 platform are Intel EPT and AMD RVI. “None” is an acceptable assignment for platforms that do not require memory-handling assists in order to eliminate the need for shadow page tables. This must be documented in the <abbr linkend="TSS"/>.
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to ensure that it states, for each platform listed in the <abbr linkend="ST"/>, the hardware assists and memory-handling extensions used by the <abbr linkend="TOE"/> on that platform. The evaluator shall ensure that these lists correspond to what is specified in the applicable FPT_HAS_EXT component.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_HCL_EXT.1" name="Hypercall Controls"  status="threshold">
                    <f-element id="FPT_HCL_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide a Hypercall interface for Guest <abbr linkend="VM"/>s to use to invoke functionality provided by the <abbr linkend="VMM"/>.
                        </title>
                    </f-element>
                    <f-element id="FPT_HCL_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall allow administrators to configure any <abbr linkend="VM"/>’s Hypercall interface to disable access to individual functions, all functions, or groups of functions.
                        </title>
                    </f-element>
                    <f-element id="FPT_HCL_EXT.1.3">
                        <title>The <abbr linkend="TSF"/> shall permit exceptions to the configuration of the following Hypercall interface functions: <assignable>list of functions that are not subject to the configuration controls in FPT_HCL_EXT.1.2</assignable>.
                        </title>
                    </f-element>
                    <f-element id="FPT_HCL_EXT.1.4">
                        <title>The <abbr linkend="TSF"/> shall validate the parameters passed to the hypercall interface prior to execution of the <abbr linkend="VMM"/> functionality exposed by that interface.
                        </title>
                        <note role="application">The purpose of this requirement is to help ensure the integrity of the 
                            <abbr linkend="VMM"/> by defining the attack surface exposed to Guest VMs through Hypercalls,
                            testing the mechanisms for reducing that attack surface by disabling Hypercalls, and ensuring that
                            Hypercall parameters are properly validated prior to use by the <abbr linkend="VMM"/>.<htm:br></htm:br><htm:br></htm:br>
                            A Hypercall interface allows a set of <abbr linkend="VMM"/> functions to be invoked by software running within a <abbr linkend="VM"/>. Hypercall interfaces are used by virtualization-aware <abbr linkend="VM"/>s to communicate and exchange data with the <abbr linkend="VMM"/>. For example, a <abbr linkend="VM"/> could use a hypercall interface to get information about the real world, such as the time of day or the underlying hardware of the host system. A hypercall could also be used to transfer data between <abbr linkend="VM"/>s through a copy-paste mechanism. Because hypercall interfaces expose the <abbr linkend="VMM"/> to Guest <abbr linkend="VM"/>s, these interfaces constitute attack surface. In order to minimize attack surface, these interfaces must be limited to the minimum needed to support <abbr linkend="VM"/> functionality.<htm:br></htm:br><htm:br></htm:br>
                            For the selection in FPT_HCL_EXT.1.2, the <abbr linkend="ST"/> author selects the applicable actions that administrators can perform to configure functions supported by the interface.<htm:br></htm:br><htm:br></htm:br>
                            For the assignment in FPT_HCL_EXT.1.3, the <abbr linkend="ST"/> author lists the interface functions that cannot be configured per FPT_HCL_EXT.1.2.<htm:br></htm:br><htm:br></htm:br>
                            A vendor-provided test harness may reduce evaluation time.<htm:br></htm:br><htm:br></htm:br>
                            There is no expectation that the evaluator will need to review source code in order to accomplish the
                            Assurance Activity.  The evaluator documentation review should ensure that there are documented
                            Hypercall functions in the <abbr linkend="TSS"/>, that each documented Hypercall function contains the specified
                            information, and that there are not obvious or publicly known Hypercall functions missing.
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> or operational guidance to ensure it 
                            documentations all Hypercall functions at the level necessary for the evaluator to disable the functions
                            and run tests 1 and 2, below. Documentation must include, for each function, how to call the function, function
                            parameters and legal values, configuration settings for enabling/disabling the function, and conditions under
                            which the function can be disabled. The <abbr linkend="TSS"/> must also specify those functions that cannot be
                            disabled.  While there is no expectation that the evaluator will need to examine source code in order to
                            accomplish this Assurance Activity, the evaluator must ensure that there are no obvious or publicly known
                            Hypercall functions missing from the TSS. <htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the operational guidance to ensure it contains instructions for how to configure interface functions per FPT_HCL_EXT.1.2.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>For each configurable function that meets FPT_HCL_EXT.1.2, the evaluator shall follow the operational guidance to enable the function. The evaluator shall then attempt to call each function from within the <abbr linkend="VM"/>. If the call is allowed, then the test succeeds.</test>
                                <test>For each configurable function that meets FPT_HCL_EXT.1.2, the evaluator shall configure the <abbr linkend="TSF"/> to disable the function. The evaluator shall then attempt to call the function from within the <abbr linkend="VM"/>. If the call is blocked, then the test succeeds.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_RDM_EXT.1" name="Removable Devices and Media"  status="threshold">
                    <f-element id="FPT_RDM_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall implement controls for handling the transfer of virtual and physical removable media and virtual and physical removable media devices between information domains.
                        </title>
                    </f-element>
                    <f-element id="FPT_RDM_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall enforce the following rules when <assignable>virtual or physical removable media and virtual or physical removable media devices</assignable> are switched between information domains, then 
                            
                            <selectables linebreak="yes">
                                <selectable>the Administrator has granted explicit access for the media or device to be connected to the receiving domain</selectable>
                                <selectable>the media in a device that is being transferred is ejected prior to the receiving domain being allowed access to the device</selectable>
                                <selectable>the user of the receiving domain expressly authorizes the connection</selectable>
                                <selectable>the device or media that is being transferred is prevented from being accessed by the receiving domain</selectable>
                            </selectables>
                        </title>
                        <note role="application">
                            The purpose of these requirements is to ensure that <abbr linkend="VM"/>s are not given inadvertent access to information from different domains because of media or removable media devices left connected to physical machines.<htm:br></htm:br><htm:br></htm:br>
                            Removable media is media that can be ejected from a device, such as a compact disc, floppy disk, SD, or compact flash memory card.<htm:br></htm:br><htm:br></htm:br>
                            Removable media devices are removable devices that include media, such as USB flash drives and USB hard drives. Removable media devices can themselves contain removable media (e.g., USB CDROM drives).<htm:br></htm:br><htm:br></htm:br>
                            For purposes of this requirement, an Information Domain is:
                            <htm:ol type="a">
                                <htm:li>A <abbr linkend="VM"/> or collection of <abbr linkend="VM"/>s</htm:li>
                                <htm:li>The Virtualization System</htm:li>
                                <htm:li>Host OS</htm:li>
                                <htm:li>Management Subsystem</htm:li>
                            </htm:ol>
                            These requirements also apply to virtualized removable media—such as virtual CD drives that connect to ISO images—as well as physical media—such as CDROMs and USB flash drives. In the case of virtual CDROMs, virtual ejection of the virtual media is sufficient.<htm:br></htm:br><htm:br></htm:br>
                            In the first assignment, the <abbr linkend="ST"/> author lists all removable media and removable media devices (both virtual and real) that are supported by the <abbr linkend="TOE"/>. The <abbr linkend="ST"/> author then selects actions that are appropriate for all removable media and removable media devices (both virtual and real) that are being claimed in the assignment.<htm:br></htm:br><htm:br></htm:br>
                            For clarity, the <abbr linkend="ST"/> author may iterate this requirement so that like actions are grouped with the removable media or devices to which they apply (e.g., the first iteration could contain all devices for which media is ejected on a switch; the second iteration could contain all devices for which access is prevented on switch, etc.).
                        </note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to ensure it describes the association between the media or devices supported by the <abbr linkend="TOE"/> and the actions that can occur when switching information domains. The evaluator shall examine the operational guidance to ensure it documents how an administrator or user configures the behavior of each media or device.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test for each listed media or device:
                            <testlist>
                                <test>The evaluator shall configure two <abbr linkend="VM"/>s that are members of different information domains, with the media or device connected to one of the <abbr linkend="VM"/>s. The evaluator shall disconnect the media or device from the <abbr linkend="VM"/> and connect it to the other <abbr linkend="VM"/>. The evaluator shall verify that the action performed is consistent with the action assigned in the <abbr linkend="TSS"/>.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_TUD_EXT.1" name="Trusted Updates to the Virtualization System"  status="threshold">
                    <f-element id="FPT_TUD_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide administrators the ability to query the currently executed version of the <abbr linkend="TOE"/> firmware/software as well as the most recently installed version of the <abbr linkend="TOE"/> firmware/software.
                        </title>
                        <note role="application">
                            The version currently running (being executed) may not be the version most recently installed. For instance, maybe the update was installed but the system requires a reboot before this update will run. Therefore, it needs to be clear that the query should indicate both the most recently executed version as well as the most recently installed update.
                        </note>
                    </f-element>
                    <f-element id="FPT_TUD_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall provide administrators the ability to manually initiate updates to <abbr linkend="TOE"/> firmware/software and 
                            <selectables>
                                <selectable>automatic updates</selectable>
                                <selectable>no other update mechanism</selectable>
                            </selectables>.
                        </title>
                    </f-element>
                    <f-element id="FPT_TUD_EXT.1.3">
                        <title>The <abbr linkend="TSF"/> shall provide means to authenticate firmware/software updates to the <abbr linkend="TOE"/> using a 
                            <selectables>
                                <selectable>digital signature mechanism</selectable>
                                <selectable>published hash</selectable>
                            </selectables> prior to installing those updates.
                        </title>
                        <note role="application">The digital signature mechanism referenced in FPT_TUD_EXT.1.3 is one of the algorithms specified in FCS_COP.1(3).<htm:br></htm:br><htm:br></htm:br>
                            If certificates are used by the update verification mechanism, certificates are validated in accordance with FIA_X509_EXT.1 and should be selected in FIA_X509_EXT.2.1. Additionally, FPT_TUD_EXT.2 must be included in the <abbr linkend="ST"/>.<htm:br></htm:br><htm:br></htm:br>
                            “Update” in the context of this SFR refers to the process of replacing a non-volatile, system resident software component with another. The former is referred to as the NV image, and the latter is the update image. While the update image is typically newer than the NV image, this is not a requirement. There are legitimate cases where the system owner may want to rollback a component to an older version (e.g., when the component manufacturer releases a faulty update, or when the system relies on an undocumented feature no longer present in the update). Likewise, the owner may want to update with the same version as the NV image to recover from faulty storage.<htm:br></htm:br><htm:br></htm:br>
                            All discrete software components (e.g., applications, drivers, kernel, firmware) of the <abbr linkend="TSF"/>, should be digitally signed by the corresponding manufacturer and subsequently verified by the mechanism performing the update. Since it is recognized that components may be signed by different manufacturers, it is essential that the update process verify that both the update and NV images were produced by the same manufacturer (e.g., by comparing public keys) or signed by legitimate signing keys (e.g., successful verification of certificates when using X.509 certificates).<htm:br></htm:br><htm:br></htm:br>
                            The Digital Signature option is the preferred mechanism for authenticating updates. The Published Hash option will be removed from a future version of this PP.
                        </note>
                        <aactivity>The evaluator shall verify that the <abbr linkend="TSS"/> describes all <abbr linkend="TSF"/> software update mechanisms for updating the system software. Updates to the <abbr linkend="TOE"/> either have a hash associated with them, or are signed by an authorized source. The evaluator shall verify that the description includes either a digital signature or published hash verification of the software before installation and that installation fails if the verification fails. The evaluator shall verify that the <abbr linkend="TSS"/> describes the method by which the digital signature or published hash is verified to include how the candidate updates are obtained, the processing associated with verifying the update, and the actions that take place for both successful and unsuccessful verification. If digital signatures are used, the evaluator shall also ensure the definition of an authorized source is contained in the <abbr linkend="TSS"/>.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="ST"/> author indicates that a certificate-based mechanism is used for software update digital signature verification, the evaluator shall verify that the <abbr linkend="TSS"/> contains a description of how the certificates are contained on the device. The evaluator also ensures that the <abbr linkend="TSS"/> (or administrator guidance) describes how the certificates are installed/updated/selected, if necessary.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator performs the version verification activity to determine the current version of the product. The evaluator obtains a legitimate update using procedures described in the operational guidance and verifies that it is successfully installed on the <abbr linkend="TOE"/>. After the update, the evaluator performs the version verification activity again to verify the version correctly corresponds to that of the update.</test>
                                <test>The evaluator performs the version verification activity to determine the current version of the product. The evaluator obtains or produces illegitimate updates as defined below, and attempts to install them on the <abbr linkend="TOE"/>. The evaluator verifies that the <abbr linkend="TOE"/> rejects all of the illegitimate updates. The evaluator performs this test using all of the following forms of illegitimate updates:
                                    <htm:ol>
                                        <htm:li>A modified version (e.g., using a hex editor) of a legitimately signed or hashed update</htm:li>
                                        <htm:li>An image that has not been signed/hashed</htm:li>
                                        <htm:li>An image signed with an invalid hash or invalid signature (e.g., by using a different key as expected for creating the signature or by manual modification of a legitimate hash/signature)</htm:li>
                                    </htm:ol>
                                    </test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_TUD_EXT.2" name="Trusted Update Based on Certificates"  status="sel-based">
                    <selection-depends req="FIA_X509_EXT.2.1"/><!-- HERE check this -->
                    <f-element id="FPT_TUD_EXT.2.1">
                        <title>The <abbr linkend="TSF"/> shall not install an update if the code signing certificate is deemed invalid.
                        </title>
                        <note role="application">Certificates may optionally be used for code signing of system software updates (FPT_TUD_EXT.1.3). This element must be included in the <abbr linkend="ST"/> if certificates are used for validating updates. If “code signing for system software updates” is selected in FIA_X509_EXT.2.1, FPT_TUD_EXT.2 must be included in the <abbr linkend="ST"/>.<htm:br></htm:br><htm:br></htm:br>
                            Validity is determined by the certificate path, the expiration date, and the revocation status in accordance with FIA_X509_EXT.1.</note>
                        <aactivity>The assurance activity for this requirement is performed in conjunction with the assurance activity for FIA_X509_EXT.1 and FIA_X509_EXT.2.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_VDP_EXT.1" name="Virtual Device Parameters"  status="threshold">
                    <f-element id="FPT_VDP_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall provide interfaces for virtual devices implemented by the <abbr linkend="VMM"/> as part of the virtual hardware abstraction.
                        </title>
                    </f-element>
                    <f-element id="FPT_VDP_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall validate the parameters passed to the virtual device interface prior to execution of the <abbr linkend="VMM"/> functionality exposed by those interfaces.
                        </title>
                        <note role="application">The purpose of this requirement is to ensure that the <abbr linkend="VMM"/> is not vulnerable to compromise through the processing of malformed data passed to the virtual device interface from a Guest OS. The <abbr linkend="VMM"/> cannot assume that any data coming from a <abbr linkend="VM"/> is well-formed—even if the virtual device interface is unique to the Virtualization System and the data comes from a virtual device driver supplied by the Virtualization Vendor.<htm:br></htm:br><htm:br></htm:br>
                            FPT_VDP_EXT.1.2 is an attestation requirement. The vendor must attest that parameters passed from a <abbr linkend="VM"/> to a virtual device interface are not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform. The vendor must attest that there are no design or implementation flaws that permit the above.
                        </note>
                        <aactivity>
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure it documents all virtual device interfaces
                            at the virtual I/O port level, to specify port number (absolute or relative to a base), port name, and a
                            description of legal input values.  The documentation must be sufficient to enable the evaluator to
                            effectively run the tests in FPT_DVD_EXT.1.  The evaluator must ensure that there are no obvious or
                            publicly known virtual I/O ports missing from the <abbr linkend="TSS"/>.
                        </aactivity>
<!-- How do we specify AA Notes? 
-->
                        <note>
                            There is no expectation that evaluators will examine source code to verify the “all” part of the Assurance Activity.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the <abbr linkend="TSS"/> to ensure it documents all virtual device interfaces,
                            including I/O ports, protocols, and data formats.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator ensures that the <abbr linkend="ST"/> includes the following statement attesting that parameters passed from a Guest <abbr linkend="VM"/> to virtual device interfaces are thoroughly validated, that all values outside the legal values specified in the <abbr linkend="TSS"/> are rejected, and that any data passed to the virtual device interfaces is unable to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform:<htm:br></htm:br><htm:br></htm:br>
                            “Parameters passed from Guest <abbr linkend="VM"/>s to virtual device interfaces are thoroughly validated and all illegal values (as specified in the <abbr linkend="TSS"/>) are rejected. Additionally, parameters passed from Guest <abbr linkend="VM"/>s to virtual device interfaces are not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform. Thorough testing and architectural design reviews have been conducted to ensure the accuracy of these claims, and there are no design or implementation flaws that bypass or defeat the security of the virtual device interfaces.”
                        </note>
                    </f-element>
                </f-component>
                <f-component id="FPT_VIV_EXT.1" name="VMM Isolation from VMs"  status="threshold">
                    <f-element id="FPT_VIV_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> must ensure that software running in a <abbr linkend="VM"/> is not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform.
                        </title>
                    </f-element>
                    <f-element id="FPT_VIV_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> must ensure that a Guest <abbr linkend="VM"/> is unable to invoke platform code that runs at a privilege level equal to or exceeding that of the <abbr linkend="VMM"/> without involvement of the <abbr linkend="VMM"/>.
                        </title>
                        <note role="application">This requirement is intended to ensure that software running within a Guest <abbr linkend="VM"/> cannot compromise other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the platform. This requirement is not met if Guest <abbr linkend="VM"/> software—whatever its privilege level—can crash the Virtualization System or the Platform, or breakout of its virtual hardware abstraction to gain execution on the platform, within or outside of the context of the <abbr linkend="VMM"/>.<htm:br></htm:br><htm:br></htm:br>
                            This requirement is not violated if software running within a <abbr linkend="VM"/> can crash the Guest OS and there is no way for an attacker to gain execution in the <abbr linkend="VMM"/> or outside of the virtualized domain.<htm:br></htm:br><htm:br></htm:br>
                            FPT_VIV_EXT.1.2 addresses several specific mechanisms that must not be permitted to bypass the <abbr linkend="VMM"/> and invoke privileged code on the Platform.<htm:br></htm:br><htm:br></htm:br>
                            At a minimum, the <abbr linkend="TSF"/> should enforce the following:<htm:br></htm:br><htm:br></htm:br>
                            <htm:ol type="a">
                                <htm:li>On the x86 platform, a virtual System Management Interrupt (SMI) cannot invoke platform System Management Mode (SMM)</htm:li>
                                <htm:li>An attempt to update virtual firmware or virtual BIOS cannot cause physical platform firmware or physical platform BIOS to be modified</htm:li>
                                <htm:li>An attempt to update virtual firmware or virtual BIOS cannot cause the <abbr linkend="VMM"/> to be modified</htm:li>
                            </htm:ol>
                            Of the above, (a) does not apply to platforms that do not support SMM. The rationale behind activity (c) is that a firmware update of a single <abbr linkend="VM"/> must not affect other <abbr linkend="VM"/>s. So if multiple <abbr linkend="VM"/>s share the same firmware image as part of a common hardware abstraction, then the update of a single machine’s BIOS must not be allowed to change the common abstraction. The virtual hardware abstraction is part of the <abbr linkend="VMM"/>.<htm:br></htm:br><htm:br></htm:br>
                            This is an attestation requirement. The vendor must attest that software running in a <abbr linkend="VM"/> is not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform. The vendor must attest that there are no design or implementation flaws that permit the above.
                        </note>
                        <aactivity>The evaluator ensures that the <abbr linkend="ST"/> includes the following statement attesting that software running in a <abbr linkend="VM"/> is not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform:<htm:br></htm:br><htm:br></htm:br>
                            “Software running in a <abbr linkend="VM"/> is not able to degrade or disrupt the functioning of other <abbr linkend="VM"/>s, the <abbr linkend="VMM"/>, or the Platform. There are no design or implementation flaws that bypass or defeat <abbr linkend="VM"/> isolation.”
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_GVI_EXT.1" name="Guest VM Integrity"  status="optional">
                    <f-element id="FPT_GVI_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall verify the integrity of Guest <abbr linkend="VM"/>s through the following mechanisms: <assignable>list of Guest <abbr linkend="VM"/> integrity mechanisms</assignable>.
                        </title>
                        <note role="application">The primary purpose of this requirement is to identify and describe the mechanisms used to verify the integrity of Guest <abbr linkend="VM"/>s that have been 'imported' in some fashion, though these mechanisms could also be applied to all Guest <abbr linkend="VM"/>s, depending on the mechanism used. Importation for this requirement could include <abbr linkend="VM"/> migration (live or otherwise), the importation of virtual disk files that were previously exported, <abbr linkend="VM"/>s in shared storage, etc. It is possible that a trusted <abbr linkend="VM"/> could have been modified during the migration or import/export process, or <abbr linkend="VM"/>s could have been obtained from untrusted sources in the first place, so integrity checks on these <abbr linkend="VM"/>s can be a prudent measure to take. These integrity checks could be as thorough as making sure the entire <abbr linkend="VM"/> exactly matches a previously known <abbr linkend="VM"/> (by hash for example), or by simply checking certain configuration settings to ensure that the <abbr linkend="VM"/>'s configuration will not violate the security model of the VS.</note>
                        <aactivity>For each mechanism listed in the assignment, the evaluator shall ensure that the <abbr linkend="TSS"/> documents the mechanism, including how it verifies <abbr linkend="VM"/> integrity, which set of Guest <abbr linkend="VM"/>s it will check (all Guest <abbr linkend="VM"/>s, only migrated <abbr linkend="VM"/>s, etc.), when such checks occur (before <abbr linkend="VM"/> startup, immediately following importation/migration, on demand, etc.), and which actions are taken if a <abbr linkend="VM"/> fails the integrity check (or which range of actions are possible if the action is configurable).
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_DDI_EXT.1" name="Device Driver Isolation"  status="objective">
                    <f-element id="FPT_DDI_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall ensure that device drivers for physical devices are isolated from the <abbr linkend="VMM"/> and all other domains.
                        </title>
                    <note role="application">In order to function on physical hardware, the <abbr linkend="VMM"/> must have access to the device drivers for the physical platform on which it runs. These drivers are often written by third parties, and yet are effectively a part of the <abbr linkend="VMM"/>. Thus the integrity of the <abbr linkend="VMM"/> in part depends on the quality of third party code that the virtualization vendor has no control over. By encapsulating these drivers within one or more dedicated driver domains (e.g., Service <abbr linkend="VM"/> or <abbr linkend="VM"/>s) the damage of a driver failure or vulnerability can be contained within the domain, and would not compromise the <abbr linkend="VMM"/>. When driver domains have exclusive access to a physical device, hardware isolation mechanisms, such as Intel's VT-d, AMD's Input/Output Memory Management Unit (IOMMU), or ARM's System Memory Management Unit (MMU) should be used to ensure that operations performed by Direct Memory Access (DMA) hardware are properly constrained.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> documentation to verify that it describes the mechanism used for device driver isolation. If the <abbr linkend="TSS"/> document indicates that a hardware isolation mechanism is used, the evaluator shall verify that the <abbr linkend="TSS"/> documentation enumerates the hardware-isolated DMA-capable devices, and that it also provides a complete list of the accessible targets for memory transactions for each of those DMA-capable devices. (An example of information that might be included in the <abbr linkend="TSS"/> documentation: a listing of all pages belonging to the driver domain, the identification of a subset of the driver domain's pages that the driver domain has permitted the device access to, or the identification of a dedicated area of memory reserved for the device or driver domain).
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_IDV_EXT.1" name="Software Identification and Versions"  status="objective">
                    <f-element id="FPT_IDV_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall include software identification (SWID) tags that contain a SoftwareIdentity element and an Entity element as defined in ISO/IEC 19770-2:2009.
                        </title>
                    </f-element>
                    <f-element id="FPT_IDV_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall store SWIDs in a .swidtag file as defined in ISO/IEC 19770-2:2009.
                        </title>
                        <note role="application">SWID tags are XML files embedded within software that provide a standard method for IT departments to track and manage the software. The presence of SWIDs can greatly simplify the software management process and improve security by enhancing the ability of IT departments to manage updates.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to ensure it describes how SWID tags are implemented and the format of the tags. The evaluator shall verify that the format complies with FPT_IDV_EXT.1.1 and that SWIDs are stored in accordance with FPT_IDV_EXT.1.2.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test:
                            <testlist>
                                <test>The evaluator shall check for the existence of SWID tags in a .swidtag file. The evaluator shall open the file and verify that each SWID contains at least a SoftwareIdentity element and an Entity element.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component> 
                <f-component id="FPT_INT_EXT.1" name="Support for Introspection"  status="objective">
                    <f-element id="FPT_INT_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall support a mechanism for permitting the <abbr linkend="VMM"/> or privileged <abbr linkend="VM"/>s to access the internals of another <abbr linkend="VM"/> for purposes of introspection.
                        </title>
                        <note role="application">Introspection can be used to support malware and anomaly detection from outside of the guest environment. This not only helps protect the Guest OS, it also protects the VS by providing an opportunity for the VS to detect threats to itself that originate within <abbr linkend="VM"/>s, and that may attempt to break out of the <abbr linkend="VM"/> and compromise the <abbr linkend="VMM"/> or other <abbr linkend="VM"/>s.<htm:br></htm:br><htm:br></htm:br>
                            The hosting of malware detection software outside of the guest <abbr linkend="VM"/> helps protect the guest and helps ensure the integrity of the malware detection/antivirus software. This capability can be implemented in the <abbr linkend="VMM"/> itself, but ideally it should be hosted by a Service <abbr linkend="VM"/> so that it can be better contained and does not introduce bugs into the <abbr linkend="VMM"/>.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> documentation to verify that it describes the interface for <abbr linkend="VM"/> introspection and whether the introspection is performed by the <abbr linkend="VMM"/> or another <abbr linkend="VM"/>.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall examine the operational guidance to ensure that it contains instructions for configuration of the introspection mechanism.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FPT_ML_EXT.1" name="Measured Launch of Platform and VMM"  status="objective">
                    <f-element id="FPT_ML_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall support a measured launch of the Virtualization System. Measured components of the Virtualization system shall include the static executable image of the Hypervisor and:
                            <selectables linebreak="yes">
                                <selectable>Static executable images of the Management Subsystem</selectable>
                                <selectable><assignable>list of (static images of) Service <abbr linkend="VM"/>s</assignable></selectable>
                                <selectable><assignable>list of configuration files</assignable></selectable>
                                <selectable>no other components</selectable>
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FPT_ML_EXT.1.2">
                        <title>The <abbr linkend="TSF"/> shall make these measurements available to the Management Subsystem.
                        </title>
                        <note role="application">
                            A measured launch of the platform and Virtualization System, demonstrates that the proper <abbr linkend="TOE"/> software was loaded. A measured launch process employs verifiable integrity measurement mechanisms. For example, a VS may hash components such as: the hypervisor, service <abbr linkend="VM"/>s and/or the Management Subsystem. A measured launch process only allows components to be executed after the measurement has been recorded. An example process may add each component’s hash before it is executed so that the final hash reflects the evidence of a component’s state prior to execution. The measurement may be verified as the system boots, but this is not required.<htm:br></htm:br><htm:br></htm:br>
                            The Platform is outside of the <abbr linkend="TOE"/>. However, this requirement specifies that the VS must be capable of receiving Platform measurements if the Platform provides them. This requirement is requiring <abbr linkend="TOE"/> support for Platform measurements if provided; it is not placing a requirement on the Platform to take such measurements.<htm:br></htm:br><htm:br></htm:br>
                            If available, hardware should be used to store measurements in such a manner that they cannot be modified in any manner except to be extended. These measurements should be produced in a repeatable manner so that a third party can verify the measurements if given the inputs. Hardware devices, like Trusted Platform Modules (TPM), TrustZone, and MMU are some examples that may serve as foundations for storing and reporting measurements.<htm:br></htm:br><htm:br></htm:br>
                            Platforms with a root of trust for measurement (RTM) should initiate the measured launch process. This may include core BIOS or the chipset. The chipset is the preferred RTM, but core BIOS or other firmware is acceptable. In system without a traditional RTM, the first component that boots would be considered the RTM, this is not preferred.
                        </note>
                        <aactivity>The evaluator shall verify that the <abbr linkend="TSS"/> or Operational Guidance describes how integrity measurements are performed and made available to the Management Subsystem. The evaluator shall examine the operational guidance to verify that it documents how to access the measurements in the Management Subsystem.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following tests:<htm:br></htm:br><htm:br></htm:br>
                            <testlist>
                                <test>The evaluator shall start the VS, login as an Administrator, and verify that the measurements for the specified components are viewable in the Management Subsystem.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component> 
            </subsection>
            <subsection id="fta" title="TOE Access">
                <f-component id="FTA_TAB.1" name="TOE Access Banner"  status="threshold">
                    <f-element id="FTA_TAB.1.1">
                        <title>Before establishing an administrative user session, the <abbr linkend="TSF"/> shall display a
                            security Administrator-specifiedad advisory notice and consent warning message regarding
                            use of the <abbr linkend="TOE"/>.
                        </title>
                        <note role="application">
                            This requirement is intended to apply to interactive sessions between a human user and a TOE. IT
                            entities establishing connections or programmatic connections (e.g., remote procedure calls over
                            a network) are not required to be covered by this requirement.<htm:br></htm:br><htm:br></htm:br>
                        </note>
                    <aactivity>The evaluator shall configure the <abbr linkend="TOE"/> to display the advisory warning message “TEST TEST Warning Message TEST TEST”. The evaluator shall then log out and confirm that the advisory message is displayed before logging can occur.
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection id="ftp" title="Trusted Path/Channel">
                <f-component id="FTP_ITC_EXT.1" name="Trusted Channel Communications"  status="threshold">
                    <f-element id="FTP_ITC_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall use 
                            <selectables linebreak="yes">
                                <selectable id="tls">TLS as conforming to the <h:a href="https://www.niap-ccevs.org/pp/"><h:i>Package for Transport Layer Security</h:i></h:a></selectable>
                                <selectable>TLS/HTTPS as conforming to FCS_HTTPS_EXT.1</selectable>
                                <selectable>IPsec as conforming to FCS_IPSEC_EXT.1</selectable>
                                <selectable>SSH as conforming to the <h:a href="https://www.niap-ccevs.org/pp/"><h:i><abbr linkend="EP"/> for Secure Shell</h:i></h:a></selectable>
                            </selectables>
                            to provide a trusted communication channel between itself, and<htm:br></htm:br><htm:br></htm:br>
                            <htm:li>audit servers (as required by FAU_STG_EXT.1), and</htm:li>
                            <selectables linebreak="yes">
                                <selectable>remote administrators (as required by FTP_TRP.1.1 if selected in FMT_MOF_EXT.1.1 in the selected EP),</selectable>
                                <selectable>separation of management and operational networks (if selected in FMT_SMO_EXT.1),</selectable>
                                <selectable>[assignment: other capabilities],</selectable>
                                <selectable>no other capabilities]</selectable>
                            </selectables>
                            that is logically distinct from other communication paths and provides assured identification of its endpoints and protection of the communicated data from disclosure and detection of modification of the communicated data.
                        </title>
                        <note role="application">This PP does not mandate that a product implement TLS with mutual authentication; either FCS_TLSS_EXT.1 or FCS_TLSS_EXT.2 can be selected if the <abbr linkend="TOE"/> provides TLS server capabilities. However, if the product itself does include the capability to perform TLS with mutual authentication, it is expected that it be included within the <abbr linkend="TOE"/> boundary.<htm:br></htm:br><htm:br></htm:br>
                            If the <abbr linkend="ST"/> author selects SSH, the <abbr linkend="TSF"/> shall be validated against the Extended Package for Secure Shell. The <abbr linkend="ST"/> author must include the security functional requirements for the trusted channel protocol selected in FTP_ITC_EXT.1 in the main body of the <abbr linkend="ST"/>.<htm:br></htm:br><htm:br></htm:br>
                            If any trusted communication channels used by the <abbr linkend="TOE"/> rely on digital certificates and the certificate validation mechanism is implemented by the <abbr linkend="TOE"/>, FIA_X509_EXT.1 must be claimed in the <abbr linkend="ST"/>. Likewise, FIA_X509_EXT.2 must be claimed and should include the relevant selections for the authentication methods used based on the communication channels that are implemented by the <abbr linkend="TSF"/>.</note>
                        <aactivity>The evaluator will review the <abbr linkend="TSS"/> to determine that it lists all trusted channels the <abbr linkend="TOE"/> uses for remote communications, including both the external entities and/or remote users used for the channel as well as the protocol that is used for each.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator will configure the <abbr linkend="TOE"/> to communicate with each external IT entity and/or type of remote user identified in the <abbr linkend="TSS"/>. The evaluator will monitor network traffic while the VS performs communication with each of these destinations. The evaluator will ensure that for each session a trusted channel was established in conformance with the protocols identified in the selection.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FTP_UIF_EXT.1" name="User Interface: I/O Focus"  status="threshold">
                    <f-element id="FTP_UIF_EXT.1.1">
                        <title>The <abbr linkend="TSF"/> shall indicate to users which <abbr linkend="VM"/>, if any, has the current input focus.
                        </title>
                        <note role="application">This requirement applies to all users—whether User or Administrator.
                            In environments where multiple <abbr linkend="VM"/>s run at the same time, the user must have a way of knowing which <abbr linkend="VM"/> user input is directed to at any given moment. This is especially important in multiple-domain environments.<htm:br></htm:br><htm:br></htm:br>
                            In the case of a human user, this is usually a visual indicator. In the case of headless <abbr linkend="VM"/>s, the user is considered to be a program, but this program still needs to know which <abbr linkend="VM"/> it is sending input to; this would typically be accomplished through programmatic means.</note>
                        <aactivity>
                            <htm:ol>
                                <htm:li>The evaluator shall ensure that the <abbr linkend="TSS"/> lists the supported user input devices</htm:li>
                                <htm:li>The evaluator shall ensure that the operational guidance specifies how the current input focus is indicated to the user</htm:li>
                                <htm:li>For each supported input device, the evaluator shall demonstrate that the input from each device listed in the <abbr linkend="TSS"/> is directed to the <abbr linkend="VM"/> that is indicated to have the input focus</htm:li>
                            </htm:ol>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FTP_UIF_EXT.2" name="User Interface: Identification of VM"  status="threshold">
                    <f-element id="FTP_UIF_EXT.2.1">
                        <title>The <abbr linkend="TSF"/> shall support the unique identification of a <abbr linkend="VM"/>’s output display to users.
                        </title>
                        <note role="application">In environments where a user has access to more than one <abbr linkend="VM"/> at the same time, the user must be able to determine the identity of each <abbr linkend="VM"/> displayed in order to avoid inadvertent cross-domain data entry.<htm:br></htm:br><htm:br></htm:br>
                            There must be a mechanism for associating an identifier with a <abbr linkend="VM"/> so that an application or program displaying the <abbr linkend="VM"/> can identify the <abbr linkend="VM"/> to users. This is generally indicated visually for human users (e.g., a border around a <abbr linkend="VM"/>’s screen display) and programmatically for headless <abbr linkend="VM"/>s (e.g., an API function). The identification must be unique to the VS, but does not need to be universally unique.</note>
                        <aactivity>The evaluator shall ensure that the <abbr linkend="TSS"/> describes the mechanism for identifying <abbr linkend="VM"/>s to the user, how identities are assigned to <abbr linkend="VM"/>s, and how conflicts are prevented.<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall perform the following test:<htm:br></htm:br><htm:br></htm:br>
                            The evaluator shall attempt to create and start at least three Guest <abbr linkend="VM"/>s on a single display device where the evaluator attempts to assign two of the <abbr linkend="VM"/>s the same identifier. If the user interface displays different identifiers for each <abbr linkend="VM"/>, then the requirement is met. Likewise, the requirement is met if the system refuses to create or start a <abbr linkend="VM"/> when there is already a <abbr linkend="VM"/> with the same identifier.
                        </aactivity>
                    </f-element>
                </f-component>
                 <f-component id="FTP_TRP.1" name="Trusted Path"  status="sel-based">
                    <selection-depends req="FTP_ITC_EXT.1.1"/><!-- HERE check this -->
                    <f-element id="FTP_TRP.1.1">
                        <title>The <abbr linkend="TSF"/> shall use a trusted channel as specified in FTP_ITC_EXT.1 to provide a trusted communication path between itself and [remote] administrators that is logically distinct from other communication paths and provides assured identification of its end points and protection of the communicated data from [modification, disclosure].
                        </title>
                    </f-element>
                    <f-element id="FTP_TRP.1.2">
                        <title>The <abbr linkend="TSF"/> shall permit remote administrators to initiate communication via the trusted path.
                        </title>
                    </f-element><f-element id="FTP_TRP.1.3">
                        <title>The <abbr linkend="TSF"/> shall require the use of the trusted path for [all remote administration actions].
                        </title>
                        <note role="application">Protocols used to implement the remote administration trusted channel must be selected in FTP_ITC_EXT.1.<htm:br></htm:br><htm:br></htm:br>
                            This requirement ensures that authorized remote administrators initiate all communication with the <abbr linkend="TOE"/> via a trusted path, and that all communications with the <abbr linkend="TOE"/> by remote administrators is performed over this path. The data passed in this trusted communication channel are encrypted as defined the protocol chosen in the first selection. The <abbr linkend="ST"/> author chooses the mechanism or mechanisms supported by the <abbr linkend="TOE"/>, and then ensures that the detailed requirements in Annex B corresponding to their selection are copied to the <abbr linkend="ST"/> if not already present.</note>
                        <aactivity>The evaluator shall examine the <abbr linkend="TSS"/> to determine that the methods of remote <abbr linkend="TOE"/> administration are indicated, along with how those communications are protected. The evaluator shall also confirm that all protocols listed in the <abbr linkend="TSS"/> in support of <abbr linkend="TOE"/> administration are consistent with those specified in the requirement, and are included in the requirements in the <abbr linkend="ST"/>. The evaluator shall confirm that the operational guidance contains instructions for establishing the remote administrative sessions for each supported method. The evaluator shall also perform the following tests:
                            <testlist>
                                <test>The evaluators shall ensure that communications using each specified (in the operational guidance) remote administration method is tested during the course of the evaluation, setting up the connections as described in the operational guidance and ensuring that communication is successful.</test>
                                <test>For each method of remote administration supported, the evaluator shall follow the operational guidance to ensure that there is no available interface that can be used by a remote user to establish remote administrative sessions without invoking the trusted path.</test>
                                <test>The evaluator shall ensure, for each method of remote administration, the channel data is not sent in plaintext.</test>
                                <test>The evaluator shall ensure, for each method of remote administration, modification of the channel data is detected by the <abbr linkend="TOE"/>.</test>
                            </testlist>
                            Further assurance activities are associated with the specific protocols.
                        </aactivity>
                    </f-element>
                </f-component>                
            </subsection>
        </section>
        <section id="sar" title="TOE Security Assurance Requirements">
            The Security Objectives for the <abbr linkend="TOE"/> in Section 4 were constructed to address threats identified in Section 3.1. The Security Functional Requirements (SFRs) in Section 5.1 are a formal instantiation of the Security Objectives. The PP identifies the Security Assurance Requirements (SARs) to frame the extent to which the evaluator assesses the documentation applicable for the evaluation and performs independent testing.<htm:br></htm:br><htm:br></htm:br>
            This section lists the set of Security Assurance Requirements (SARs) from Part 3 of the Common Criteria for Information Technology Security Evaluation, Version 3.1, Revision 4 that are required in evaluations against this PP. Individual assurance activities to be performed are specified in both Section 5.1 as well as in this section.<htm:br></htm:br><htm:br></htm:br>
            After the <abbr linkend="ST"/> has been approved for evaluation, the Information Technology Security Evaluation Facility (ITSEF) will obtain the <abbr linkend="TOE"/>, supporting environmental IT, and the administrative/user guides for the <abbr linkend="TOE"/>. The ITSEF is expected to perform actions mandated by the <abbr linkend="CEM"/> for the ASE and ALC SARs. The ITSEF also performs the assurance activities contained within Section 5, which are intended to be an interpretation of the other <abbr linkend="CEM"/> assurance requirements as they apply to the specific technology instantiated in the <abbr linkend="TOE"/>. The assurance activities that are captured in Section 5 also provide clarification as to what the developer needs to provide to demonstrate the <abbr linkend="TOE"/> is compliant with the PP.
            <subsection id="ase" title="Class ASE: Security Target Evaluation">
                As per ASE activities defined in [<abbr linkend="CEM"/>] plus the <abbr linkend="TSS"/> assurance activities defined for any SFRs claimed by the <abbr linkend="TOE"/>.
            </subsection>
            <subsection id="adv" title="Class ADV: Development">
                The information about the <abbr linkend="TOE"/> is contained in the guidance documentation available to the end user as well as the <abbr linkend="TOE"/> Summary Specification (<abbr linkend="TSS"/>) portion of the <abbr linkend="ST"/>. The <abbr linkend="TOE"/> developer must concur with the description of the product that is contained in the <abbr linkend="TSS"/> as it relates to the functional requirements. The Assurance Activities contained in Section 5.2 should provide the <abbr linkend="ST"/> authors with sufficient information to determine the appropriate content for the <abbr linkend="TSS"/> section.
                <a-component id="ADV_FSP.1" name="Basic functional specification">
                    <group type="dev-action">
                        <a-element id="ADV_FSP.1.1D">
                            <title>The developer shall provide a functional specification.</title>
                        </a-element>
                        <a-element id="ADV_FSP.1.2D">
                            <title>The developer shall provide a tracing from the functional specification to the SFRs.</title>
                            <note role="developer"> 
                                As indicated in the introduction to this section, the functional specification is composed of the information contained in the AGD_OPR and AGD_PRE documentation, coupled with the information provided in the <abbr linkend="TSS"/> of the <abbr linkend="ST"/>. The assurance activities in the functional requirements point to evidence that should exist in the documentation and <abbr linkend="TSS"/> section; since these are directly associated with the SFRs, the tracing in element ADV_FSP.1.2D is implicitly already done and no additional documentation is necessary.</note> 
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="ADV_FSP.1.1C">
                            <title>The functional specification shall describe the purpose and method of use for each SFR-enforcing and SFR-supporting TSFI.</title>
                        </a-element>
                        <a-element id="ADV_FSP.1.2C">
                            <title>The functional specification shall identify all parameters associated with each SFR-enforcing and SFR-supporting TSFI.</title>
                        </a-element>
                        <a-element id="ADV_FSP.1.3C">
                            <title>The functional specification shall provide rationale for the implicit categorization of interfaces as SFR-non-interfering.</title>
                        </a-element>
                        <a-element id="ADV_FSP.1.4C">
                            <title>The tracing shall demonstrate that the SFRs trace to TSFIs in the functional specification.</title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="ADV_FSP.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                        </a-element>
                        <a-element id="ADV_FSP.1.2E">
                            <title>The evaluator shall determine that the functional specification is an accurate and complete instantiation of the SFRs.</title>
                            <note role="application">
                                There are no specific assurance activities associated with these SARs. The functional specification documentation is provided to support the evaluation activities described in Section 5.2, and other activities described for AGD, ATE, and AVA SARs. The requirements on the content of the functional specification information is implicitly assessed by virtue of the other assurance activities being performed; if the evaluator is unable to perform an activity because the there is insufficient interface information, then an adequate functional specification has not been provided.
                            </note>
                        </a-element>
                    </group>
                </a-component>
            </subsection>
            <subsection id="agd" title="Class AGD: Guidance Documents">
                The guidance documents will be provided with the developer’s security target. Guidance must include a description of how the authorized user verifies that the Operational Environment can fulfill its role for the security functionality. The documentation should be in an informal style and readable by an authorized user.<htm:br></htm:br><htm:br></htm:br>
                Guidance must be provided for every operational environment that the product supports as claimed in the <abbr linkend="ST"/>. This guidance includes
                <htm:ul>
                    <htm:li>instructions to successfully install the <abbr linkend="TOE"/> in that environment; and</htm:li>
                    <htm:li>instructions to manage the security of the <abbr linkend="TOE"/> as a product and as a component of the larger operational environment.</htm:li>
                </htm:ul>
                Guidance pertaining to particular security functionality is also provided; specific requirements on such guidance are contained in the assurance activities specified with individual SFRs where applicable.
                
                <a-component id="AGD_OPE.1" name="Operational User Guidance">
                    <group type="dev-action">
                        <a-element id="AGD_OPE.1.1D">
                            <title>The developer shall provide operational user guidance.
                            </title>
                            <note role="developer">
                                Rather than repeat information here, the developer should review the assurance activities for this component to ascertain the specifics of the guidance that the evaluators will be checking for. This will provide the necessary information for the preparation of acceptable guidance.</note>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="AGD_OPE.1.1C">
                            <title>The operational user guidance shall describe what the authorized user-accessible functions and privileges that should be controlled in a secure processing environment, including appropriate warnings.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.2C">
                            <title>The operational user guidance shall describe, for the authorized user, how to use the available interfaces provided by the <abbr linkend="TOE"/> in a secure manner.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.3C">
                            <title>The operational user guidance shall describe, for the authorized user, the available functions and interfaces, in particular all security parameters under the control of the user, indicating secure values as appropriate.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.4C">
                            <title>The operational user guidance shall, for the authorized user, clearly present each type of security-relevant event relative to the user-accessible functions that need to be performed, including changing the security characteristics of entities under the control of the <abbr linkend="TSF"/>.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.5C">
                            <title>The operational user guidance shall identify all possible modes of operation of the <abbr linkend="TOE"/> (including operation following failure or operational error), their consequences and implications for maintaining secure operation.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.6C">
                            <title>The operational user guidance shall, for the authorized user, describe the security measures to be followed in order to fulfill the security objectives for the operational environment as described in the <abbr linkend="ST"/>.</title>
                        </a-element>
                        <a-element id="AGD_OPE.1.7C">
                            <title>The operational user guidance shall be clear and reasonable.</title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="AGD_OPE.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                            <aactivity>
                                Some of the contents of the operational guidance will be verified by the assurance activities in Section 5.2 and evaluation of the <abbr linkend="TOE"/> according to the <abbr linkend="CEM"/>. The following additional information is also required.<htm:br></htm:br><htm:br></htm:br>
                                The operational guidance shall contain instructions for configuring the password characteristics, number of allowed authentication attempt failures, the lockout period times for inactivity, and the notice and consent warning that is to be provided when authenticating.<htm:br></htm:br><htm:br></htm:br>
                                The operational guidance shall contain step-by-step instructions suitable for use by an end-user of the Virtualization System to configure a new, out-of-the-box system into the configuration evaluated under this Protection Profile.<htm:br></htm:br><htm:br></htm:br>
                                The documentation shall describe the process for verifying updates to the <abbr linkend="TOE"/>, either by checking the hash or by verifying a digital signature. The evaluator shall verify that this process includes the following steps:
                                <htm:ul>
                                    <htm:li>Instructions for querying the current version of the <abbr linkend="TOE"/> software.</htm:li>
                                    <htm:li>For hashes, a description of where the hash for a given update can be obtained. For digital signatures, instructions for obtaining the certificate that will be used by the FCS_COP.1(2) mechanism to ensure that a signed update has been received from the certificate owner. This may be supplied with the product initially, or may be obtained by some other means.</htm:li>
                                    <htm:li>Instructions for obtaining the update itself. This should include instructions for making the update accessible to the <abbr linkend="TOE"/> (e.g., placement in a specific directory).</htm:li>
                                    <htm:li>Instructions for initiating the update process, as well as discerning whether the process was successful or unsuccessful. This includes generation of the hash/digital signature.</htm:li>
                                </htm:ul>
                            </aactivity>
                        </a-element>
                    </group>
                </a-component>
                <a-component id="AGD_PRE.1" name="Preparative procedures">
                    <group type="dev-action">
                        <a-element id="AGD_PRE.1.1D">
                            <title>The developer shall provide the <abbr linkend="TOE"/> including its preparative procedures.
                            </title>
                            <note role="developer">As with the operational guidance, the developer should look to the assurance activities to determine the required content with respect to preparative procedures.
                            </note>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="AGD_PRE.1.1C">
                            <title>The preparative procedures shall describe all the steps necessary for secure acceptance of the delivered <abbr linkend="TOE"/> in accordance with the developer’s delivery procedures.</title>
                        </a-element>
                        <a-element id="AGD_PRE.1.2C">
                            <title>The preparative procedures shall describe all the steps necessary for secure installation of the <abbr linkend="TOE"/> and for the secure preparation of the operational environment in accordance with the security objectives for the operational environment as described in the <abbr linkend="ST"/>.</title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element  id="AGD_PRE.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                        </a-element>
                        <a-element id="AGD_PRE.1.2E">
                            <title>The evaluator shall apply the preparative procedures to confirm that the <abbr linkend="TOE"/> can be prepared securely for operation.</title>
                            
                            <aactivity>
                                As indicated in the introduction above, there are significant expectations with respect to the documentation—especially when configuring the operational environment to support <abbr linkend="TOE"/> functional requirements. The evaluator shall check to ensure that the guidance provided for the <abbr linkend="TOE"/> adequately addresses all platforms (that is, combination of hardware and operating system) claimed for the <abbr linkend="TOE"/> in the <abbr linkend="ST"/>.<htm:br></htm:br><htm:br></htm:br>
                                The operational guidance shall contain step-by-step instructions suitable for use by an end-user of the Virtualization System to configure a new, out-of-the-box system into the configuration evaluated under this Protection Profile.
                            </aactivity>
                        </a-element>
                    </group>
                </a-component>               
            </subsection>
            <subsection id="alc" title="Class ALC: Life-Cycle Support">
                At the assurance level specified for <abbr linkend="TOE"/>s conformant to this PP, life-cycle support is limited to an examination of the <abbr linkend="TOE"/> vendor’s development and configuration management process in order to provide a baseline level of assurance that the <abbr linkend="TOE"/> itself is developed in a secure manner and that the developer has a well-defined process in place to deliver updates to mitigate known security flaws. This is a result of the critical role that a developer’s practices play in contributing to the overall trustworthiness of a product.
                <a-component id="ALC_CMC.1" name="Labeling of the TOE">
                     <group type="dev-action">
                        <a-element id="ALC_CMC.1.1D">
                            <title>The developer shall provide the <abbr linkend="TOE"/> and a reference for the <abbr linkend="TOE"/>.
                            </title>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="ALC_CMC.1.1C">
                            <title>The <abbr linkend="TOE"/> shall be labeled with its unique reference.
                            </title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="ALC_CMC.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                            </title>
                            <aactivity>The evaluator shall check the ST to ensure that it contains an identifier (such as a product
                                name/version number) that specifically identifies the version that meets the requirements of the ST.
                                Further, the evaluator shall check the AGD guidance and <addr linkend="TOE"/> samples received for testing to ensure
                                that the version number is consistent with that in the ST. If the vendor maintains a web site
                                advertising the TOE, the evaluator shall examine the information on the web site to ensure that
                                the information in the ST is sufficient to distinguish the product.
                            </aactivity>
                        </a-element>
                    </group>
                </a-component>                
                <a-component id="ALC_CMS.1" name="TOE CM coverage">
                    <group type="dev-action">
                        <a-element id="ALC_CMS.1.1D">
                            <title>The developer shall provide a configuration list for the <abbr linkend="TOE"/>.
                            </title>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="ALC_CMS.1.1C">
                            <title>The configuration list shall include the following: the <abbr linkend="TOE"/> itself; and the
                                evaluation evidence required by the SARs.
                            </title>
                        </a-element>
                        <a-element id="ALC_CMS.1.2C">
                            <title>The configuration list shall uniquely identify the configuration items.
                            </title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="ALC_CMS.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                            <aactivity>The evaluator shall ensure that the developer has identified (in public-facing development
                                guidance for their platform) one or more development environments appropriate for use in developing
                                applications for the developer’s platform. For each of these development environments, the developer
                                shall provide information on how to configure the environment to ensure that buffer overflow protection
                                mechanisms in the environment(s) are invoked (e.g., compiler and linker flags). The evaluator shall
                                ensure that this documentation also includes an indication of whether such protections are on by
                                default, or have to be specifically enabled.
                                The evaluator shall ensure that the TSF is uniquely identified (with respect to other products from
                                the TSF vendor), and that documentation provided by the developer in association with the requirements
                                in the ST is associated with the TSF  using this unique identification.
                            </aactivity>
                        </a-element>
                    </group>                    
                </a-component>                
                <a-component id="ALC_TSU_EXT" name="Timely Security Updates">
                    This component requires the <abbr linkend="TOE"/> developer, in conjunction with any other necessary parties, to provide information as to how the Virtualization System is updated to address security issues in a timely manner. The documentation describes the process of providing updates to the public from the time a security flaw is reported/discovered, to the time an update is released. This description includes the parties involved (e.g., the developer, hardware vendors) and the steps that are performed (e.g., developer testing), including worst case time periods, before an update is made available to the public.
                    <group type="dev-action">
                        <a-element id="ALC_TSU_EXT.1.1D">
                            <title>The developer shall provide a description in the <abbr linkend="TSS"/> of how timely security updates are made to the <abbr linkend="TOE"/>.</title>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="ALC_TSU_EXT.1.1C">
                            <title>The description shall include the process for creating and deploying security updates for the <abbr linkend="TOE"/> software/firmware.</title>
                        </a-element>
                        <a-element id="ALC_TSU_EXT.1.2C">
                            <title>The description shall express the time window as the length of time, in days, between public disclosure of a vulnerability and the public availability of security updates to the <abbr linkend="TOE"/>.</title>
                            <note role="application">
                                The total length of time may be presented as a summation of the periods of time that each party (e.g., <abbr linkend="TOE"/> developer, hardware vendor) on the critical path consumes. The time period until public availability per deployment mechanism may differ; each is described.</note>
                        </a-element>
                        <a-element id="ALC_TSU_EXT.1.3C">
                            <title>The description shall include the mechanisms publicly available for reporting security issues pertaining to the <abbr linkend="TOE"/>.</title>
                            <note role="application">
                                The reporting mechanism could include web sites, email addresses, and a means to protect the sensitive nature of the report (e.g., public keys that could be used to encrypt the details of a proof-of-concept exploit).</note>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="ALC_TSU_EXT.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                        </a-element>
                    </group>
                </a-component>                
             </subsection>
            <subsection id="ate" title="Class ATE: Tests">
                Testing is specified for functional aspects of the system as well as aspects that take advantage of design or implementation weaknesses. The former is done through ATE_IND family, while the latter is through the AVA_VAN family. At the assurance level specified in this PP, testing is based on advertised functionality and interfaces with dependency on the availability of design information. One of the primary outputs of the evaluation process is the test report as specified in the following requirements.
                <a-component id="ATE_IND.1" name="Independent Testing - Sample">
                    Testing is performed to confirm the functionality described in the <abbr linkend="TSS"/> as well as the administrative (including configuration and operation) documentation provided. The focus of the testing is to confirm that the requirements specified in Section 5.1 are being met, although some additional testing is specified for SARs in Section 5.2. The Assurance Activities identify the additional testing activities associated with these components. The evaluator produces a test report documenting the plan for and results of testing, as well as coverage arguments focused on the platform/<abbr linkend="TOE"/> combinations that are claiming conformance to this PP.
                    <group type="dev-action">
                        <a-element id="ATE_IND.1.1D">
                            <title>The developer shall provide the <abbr linkend="TOE"/> for testing.
                            </title>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="ATE_IND.1.1C">
                            <title>The <abbr linkend="TOE"/> shall be suitable for testing.
                            </title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="ATE_IND.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                        </a-element>
                        <a-element id="ATE_IND.1.2E">
                            <title>The evaluator shall test a subset of the <abbr linkend="TSF"/> to confirm that the <abbr linkend="TSF"/> operates as specified.
                            </title>
                            <aactivity>
                                The evaluator shall prepare a test plan and report documenting the testing aspects of the system. While it is not necessary to have one test case per test listed in an Assurance Activity, the evaluators must document in the test plan that each applicable testing requirement in the <abbr linkend="ST"/> is covered.<htm:br></htm:br><htm:br></htm:br>
                                The Test Plan identifies the platforms to be tested, and for those platforms not included in the test plan but included in the <abbr linkend="ST"/>, the test plan provides a justification for not testing the platforms. This justification must address the differences between the tested platforms and the untested platforms, and make an argument that the differences do not affect the testing to be performed. It is not sufficient to merely assert that the differences have no affect; rationale must be provided. If all platforms claimed in the <abbr linkend="ST"/> are tested, then no rationale is necessary.<htm:br></htm:br><htm:br></htm:br>
                                The test plan describes the composition of each platform to be tested, and any setup that is necessary beyond what is contained in the AGD documentation. It should be noted that the evaluators are expected to follow the AGD documentation for installation and setup of each platform either as part of a test or as a standard pre-test condition. This may include special test drivers or tools. For each driver or tool, an argument (not just an assertion) is provided that the driver or tool will not adversely affect the performance of the functionality by the <abbr linkend="TOE"/> and its platform. This also includes the configuration of cryptographic engines to be used. The cryptographic algorithms implemented by these engines are those specified by this PP and used by the cryptographic protocols being evaluated (IPsec, TLS/HTTPS, SSH).<htm:br></htm:br><htm:br></htm:br>
                                The test plan identifies high-level test objectives as well as the test procedures to be followed to achieve those objectives. These procedures include expected results. The test report (which could just be an annotated version of the test plan) details the activities that took place when the test procedures were executed, and includes the actual results of the tests. This shall be a cumulative account, so if there was a test run that resulted in a failure; a fix installed; and then a successful re-run of the test, the report would show a “fail” and “pass” result (and the supporting details), and not just the “pass” result.
                            </aactivity>
                        </a-element>
                    </group>
                </a-component>                
            </subsection>
            <subsection id="ava" title="Class AVA: Vulnerability Assessment">
                For the first generation of this Protection Profile, the evaluation lab is expected to survey open sources to learn what vulnerabilities have been discovered in these types of products. In most cases, these vulnerabilities will require sophistication beyond that of a basic attacker. Until penetration tools are created and uniformly distributed to the evaluation labs, evaluators will not be expected to test for these vulnerabilities in the <abbr linkend="TOE"/>. The labs will be expected to comment on the likelihood of these vulnerabilities given the documentation provided by the vendor. This information will be used in the development of penetration testing tools and for the development of future PPs.
                <a-component id="AVA_VAN.1" name="Vulnerability survey"> 
                    <group type="dev-action">
                        <a-element id="AVA_VAN.1.1D">
                            <title>The developer shall provide the <abbr linkend="TOE"/> for testing.
                            </title>
                        </a-element>
                    </group>
                    <group type="con-pres">
                        <a-element id="AVA_VAN.1.1C">
                            <title>The <abbr linkend="TOE"/> shall be suitable for testing.
                            </title>
                        </a-element>
                    </group>
                    <group type="eval-action">
                        <a-element id="AVA_VAN.1.1E">
                            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
                        </a-element>
                        <a-element id="AVA_VAN.1.2E">
                            <title>The evaluator shall perform a search of public domain sources to identify potential vulnerabilities in the <abbr linkend="TOE"/>.</title>
                        </a-element>
                        <a-element id="AVA_VAN.1.3E">
                            <title>The evaluator shall conduct penetration testing, based on the identified potential vulnerabilities, to determine that the <abbr linkend="TOE"/> is resistant to attacks performed by an attacker possessing Basic attack potential.</title>
                            <aactivity>As with ATE_IND the evaluator shall generate a report to document their findings with respect to this requirement. This report could physically be part of the overall test report mentioned in ATE_IND, or a separate document. The evaluator performs a search of public information to determine the vulnerabilities that have been found in virtualization in general, as well as those that pertain to the particular <abbr linkend="TOE"/>. The evaluator documents the sources consulted and the vulnerabilities found in the report. For each vulnerability found, the evaluator either provides a rationale with respect to its non-applicability or the evaluator formulates a test (using the guidelines provided in ATE_IND) to confirm the vulnerability, if suitable. Suitability is determined by assessing the attack vector needed to take advantage of the vulnerability. For example, if the vulnerability can be detected by pressing a key combination on boot-up, a test would be suitable at the assurance level of this PP. If exploiting the vulnerability requires expert skills and an electron microscope, for instance, then a test would not be suitable and an appropriate justification would be formulated.</aactivity>
                        </a-element>
                    </group>
                </a-component>           
            </subsection>
        </section>
    </chapter>
    
    <appendix id="opt" title="Optional Requirements">
        As indicated in Section 2, the baseline requirements (those that must be performed by the <abbr linkend="TOE"/>) are contained in the body of this PP. Additionally, there are three other types of requirements specified in Appendix A, Appendix B, and Appendix C. The first type (in this Appendix) are requirements that can be included in the <abbr linkend="ST"/>, but are not required in order for a <abbr linkend="TOE"/> to claim conformance to this PP. The second type (in Appendix B) are requirements based on selections in the body of the PP: if certain selections are made, then additional requirements in that appendix must be included. The third type (in Appendix C) are components that are not required in order to conform to this PP, but will be included in the baseline requirements in future versions of this PP, so adoption by vendors is encouraged. Note that the <abbr linkend="ST"/> author is responsible for ensuring that requirements that may be associated with those in Appendix A, Appendix B, and Appendix C but are not listed (e.g., FMT-type requirements) are also included in the <abbr linkend="ST"/>.<htm:br></htm:br><htm:br></htm:br>
        
        <htm:b>Auditable Events</htm:b><htm:br></htm:br><htm:br></htm:br>
        Depending on the specific requirements selected by the <abbr linkend="ST"/> author, the <abbr linkend="ST"/>/<abbr linkend="TOE"/> should include the appropriate auditable events from the table below in the <abbr linkend="ST"/> as part of the FAU_GEN.1 claim.<htm:br></htm:br><htm:br></htm:br>
        
        <!-- HERE table from page 78 -->
        <htm:table border="1">
            <htm:caption>Table 2: Auditable Events</htm:caption>
            <htm:TR class="header">
                <htm:TH>Requirement</htm:TH>
                <htm:TH>Auditable Events</htm:TH>
                <htm:TH>Additional Audit Record Contents</htm:TH>
            </htm:TR>
            <htm:tr>
                <htm:td>FAU_ARP.1</htm:td>
                <htm:td>Actions taken due to potential security violations</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FAU_SAA.1</htm:td>
                <htm:td>Enabling and disabling of any of the analysis mechanisms<htm:br></htm:br>
                    Automated responses performed by the <abbr linkend="TSF"/></htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FPT_GVI.1</htm:td>
                <htm:td>Actions taken due to failed integrity check.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
        </htm:table>
        
    </appendix>
    <appendix id="sel" title="Selection-Based Requirements">
        As indicated in the introduction to this PP, the baseline requirements (those that must be performed by the <abbr linkend="TOE"/> or its underlying platform) are contained in the body of the PP. There are additional requirements based on selections in the body of the PP: if certain selections are made, then additional requirements below will need to be included.<htm:br></htm:br><htm:br></htm:br>
        
        <htm:b>FAU_GEN.1 Auditable Events Table (Optional)</htm:b><htm:br></htm:br><htm:br></htm:br>
        The following additional auditable events may be claimed by the <abbr linkend="ST"/> author if “additional information
        defined in Table 3” is selected in FAU_GEN.1.  Any subset of Table 3, including individual entries, may be included in
        the <abbr linkend="ST"/>; it is not necessary to include the entirety of Table 3.<htm:br></htm:br><htm:br></htm:br>
        <htm:table border="1">
            <htm:caption>Table 3: Auditable Events</htm:caption>
            <htm:TR class="header">
                <htm:TH>Requirement</htm:TH>
                <htm:TH>Auditable Events</htm:TH>
                <htm:TH>Additional Audit Record Contents</htm:TH>
            </htm:TR>
            <htm:tr>
                <htm:td>FCS_HTTPS_EXT.1</htm:td>
                <htm:td>Failure to establish a HTTPS Session.<htm:br></htm:br>
                    Establishment/Termination of a HTTPS session.</htm:td>
                <htm:td>Reason for failure.<htm:br></htm:br>
                    Non-<abbr linkend="TOE"/> endpoint of connection (IP address) for both successes and failures.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FIA_UIA_EXT.1</htm:td>
                <htm:td>Administrator session start time and end time</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
        </htm:table>
        <htm:br></htm:br><htm:br></htm:br>
        
        <!-- HERE table from page 114 -->
        <htm:b>Auditable Events</htm:b><htm:br></htm:br><htm:br></htm:br>
        Depending on the specific requirements selected by the <abbr linkend="ST"/> author, the <abbr linkend="ST"/>/<abbr linkend="TOE"/> should include the appropriate auditable events from the table below in the <abbr linkend="ST"/> as part of the FAU_GEN.1 claim.<htm:br></htm:br><htm:br></htm:br>
        <htm:table border="1">
            <htm:caption>Table 4: Auditable Events</htm:caption>
            <htm:TR class="header">
                <htm:TH>Requirement</htm:TH>
                <htm:TH>Auditable Events</htm:TH>
                <htm:TH>Additional Audit Record Contents</htm:TH>
            </htm:TR>
            <htm:tr>
                <htm:td>FCS_IPSEC_EXT.1</htm:td>
                <htm:td>Failure to establish an IPsec SA.<htm:br></htm:br>
                    Establishment/Termination of an IPsec SA.</htm:td>
                <htm:td>Reason for failure.<htm:br></htm:br>
                    Non-<abbr linkend="TOE"/> endpoint of connection (IP address) for both successes and failures.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FIA_X509_EXT.1</htm:td>
                <htm:td>Failure to validate a certificate.</htm:td>
                <htm:td>Reason for failure.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FIA_X509_EXT.2</htm:td>
                <htm:td>None.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FIA_PMG_EXT.1</htm:td>
                <htm:td>None.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FPT_TUD_EXT.2</htm:td>
                <htm:td>None.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FTP_TRP.1</htm:td>
                <htm:td>Initiation of the trusted channel.<htm:br></htm:br>
                    Termination of the trusted channel.<htm:br></htm:br>
                    Failure of the trusted channel functions.</htm:td>
                <htm:td>User ID and remote source (IP address) if feasible.</htm:td>
            </htm:tr>
        </htm:table>
        
    </appendix>
    <appendix id="obj-req" title="Objective Requirements">
        This Annex includes requirements that specify security functionality which also addresses threats. The requirements are not currently mandated in the body of this PP as they describe security functionality not yet widely available in commercial technology. However, these requirements may be included in the <abbr linkend="ST"/> such that the <abbr linkend="TOE"/> is still conformant to this PP, and it is expected that they be included as soon as possible.<htm:br></htm:br><htm:br></htm:br>
        
        <htm:b>Auditable Events</htm:b>
        Depending on the specific objective SFRs that are claimed by the <abbr linkend="ST"/>/<abbr linkend="TOE"/>, the <abbr linkend="ST"/> author shall include the appropriate auditable events listed below in the claims made for FAU_GEN.1.<htm:br></htm:br><htm:br></htm:br>
        <!-- HERE table from page 118 -->
        <htm:table border="1">
            <htm:caption>Table 5: Auditable Events</htm:caption>
            <htm:TR class="header">
                <htm:TH>Requirement</htm:TH>
                <htm:TH>Auditable Events</htm:TH>
                <htm:TH>Additional Audit Record Contents</htm:TH>
            </htm:TR>
            <htm:tr>
                <htm:td>FPT_DDI_EXT.1</htm:td>
                <htm:td>None.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FPT_IDV_EXT.1</htm:td>
                <htm:td>None.</htm:td>
                <htm:td>None.</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FPT_INT_EXT.1</htm:td>
                <htm:td>Introspection initiated/enabled</htm:td>
                <htm:td>The <abbr linkend="VM"/> introspected</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FPT_ML_EXT.1</htm:td>
                <htm:td>Integrity measurements collected</htm:td>
                <htm:td>Integrity measurement values</htm:td>
            </htm:tr>
        </htm:table>
    </appendix>
    <appendix id="ent" title="Entropy Documentation and Assessment">
        <section id="design" title="Design Description">
            Documentation shall include the design of the entropy source as a whole, including the interaction of all entropy source components. It will describe the operation of the entropy source to include how it works, how entropy is produced, and how unprocessed (raw) data can be obtained from within the entropy source for testing purposes. The documentation should walk through the entropy source design indicating where the random comes from, where it is passed next, any post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how it is output from the entropy source. Any conditions placed on the process (e.g., blocking) should also be described in the entropy source design. Diagrams and examples are encouraged.<htm:br></htm:br><htm:br></htm:br>
            This design must also include a description of the content of the security boundary of the entropy source and a description of how the security boundary ensures that an adversary outside the boundary cannot affect the entropy rate.
        </section>
        <section id="justification" title="Entropy Justification">
            There should be a technical argument for where the unpredictability in the source comes from and why there is confidence in the entropy source exhibiting probabilistic behavior (an explanation of the probability distribution and justification for that distribution given the particular source is one way to describe this). This argument will include a description of the expected entropy rate and explain how you ensure that sufficient entropy is going into the <abbr linkend="TOE"/> randomizer seeding process. This discussion will be part of a justification for why the entropy source can be relied upon to produce bits with entropy.
        </section>
        <section id="oc" title="Operating Conditions">
            Documentation will also include the range of operating conditions under which the entropy source is expected to generate random data. It will clearly describe the measures that have been taken in the system design to ensure the entropy source continues to operate under those conditions. Similarly, documentation shall describe the conditions under which the entropy source is known to malfunction or become inconsistent. Methods used to detect failure or degradation of the source shall be included.
        </section>
        <section id="health" title="Health Testing">
            More specifically, all entropy source health tests and their rationale will be documented. This will include a description of the health tests, the rate and conditions under which each health test is performed (e.g., at startup, continuously, or on-demand), the expected results for each health test, and rationale indicating why each test is believed to be appropriate for detecting one or more failures in the entropy source.
        </section>
    </appendix>
    <appendix id="ref" title="References">
        <htm:table>
            <htm:tr>
                <htm:th>Identifier</htm:th>
                <htm:th>Title</htm:th>
            </htm:tr>
            <htm:tr>
                <htm:td>[<abbr linkend="CC"/>]</htm:td>
                <htm:td>Common Criteria for Information Technology Security Evaluation –
                    <htm:ul>
                        <htm:li>Part 1: Introduction and General Model, CCMB-2012-09-001, Version 3.1 Revision 4, September 2012</htm:li>
                        <htm:li>Part 2: Security Functional Components, CCMB-2012-09-002, Version 3.1 Revision 4, September 2012</htm:li>
                        <htm:li>Part 3: Security Assurance Components, CCMB-2012-09-003, Version 3.1 Revision 4, September 2012</htm:li>
                    </htm:ul>
                    </htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>[<abbr linkend="CEM"/>]</htm:td>
                <htm:td>Common Methodology for Information Technology Security Evaluation, Evaluation Methodology, CCMB-2012-09-004, Version 3.1 Revision 4, September 2012</htm:td>
            </htm:tr>
        </htm:table>
    </appendix>
    <appendix id="acro" title="Acronyms">
        <htm:table>
            <htm:tr>
                <htm:th>Acronym</htm:th>
                <htm:th>Meaning</htm:th>
            </htm:tr>
            <htm:tr>
                <htm:td>AES</htm:td>
                <htm:td>Advanced Encryption Standard</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="CC"/></htm:td>
                <htm:td>Common Criteria</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>CCEVS</htm:td>
                <htm:td>Common Criteria Evaluation and Validation Scheme</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>CCTL</htm:td>
                <htm:td>Common Criteria Testing Laboratory</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="CEM"/></htm:td>
                <htm:td>Common Evaluation Methodology</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>CPU</htm:td>
                <htm:td>Central Processing Unit</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>DEP</htm:td>
                <htm:td>Data Execution Prevention</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>DKM</htm:td>
                <htm:td>Derived Keying Material</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>DSS</htm:td>
                <htm:td>Digital Signature Standard</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>ECC</htm:td>
                <htm:td>Elliptic Curve Cryptography</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="EP"/></htm:td>
                <htm:td>Extended Package</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FIPS</htm:td>
                <htm:td>Federal Information Processing Standard</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>FFC</htm:td>
                <htm:td>Finite-Field Cryptography</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>ID</htm:td>
                <htm:td>Identification</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>IEC</htm:td>
                <htm:td>International Electrotechnical Commission</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>ISO</htm:td>
                <htm:td>International Organization for Standardization</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>IP</htm:td>
                <htm:td>Internet Protocol</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>IT</htm:td>
                <htm:td>Information Technology</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>ITSEF</htm:td>
                <htm:td>Information Technology Security Evaluation Facility</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>KDF</htm:td>
                <htm:td>Key Derivation Function</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>MAC</htm:td>
                <htm:td>Message Authentication Code</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>NIAP</htm:td>
                <htm:td>National Information Assurance Partnership</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>NIST</htm:td>
                <htm:td>National Institute of Standards and Technology</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>NVLAP</htm:td>
                <htm:td>National Voluntary Laboratory Accreditation Program</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>OS</htm:td>
                <htm:td>Operating System</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>PKV</htm:td>
                <htm:td>Public Key Verification</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>PP</htm:td>
                <htm:td>Protection Profile</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>RSA</htm:td>
                <htm:td>Rivest, Shamir, Adleman</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>SAR</htm:td>
                <htm:td>Security Assurance Requirement</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>SFR</htm:td>
                <htm:td>Security Functional Requirement</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>SP</htm:td>
                <htm:td>Special Publication</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>SPD</htm:td>
                <htm:td>Security Policy Database</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="SSP"/></htm:td>
                <htm:td>System Security Policy</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="ST"/></htm:td>
                <htm:td>Security Target</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>SWID</htm:td>
                <htm:td>Software Identification</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="TOE"/></htm:td>
                <htm:td>Target of Evaluation</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="TSF"/></htm:td>
                <htm:td><abbr linkend="TOE"/> Security Functionality</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="TSS"/></htm:td>
                <htm:td><abbr linkend="TOE"/> Summary Specification</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>TPM</htm:td>
                <htm:td>Trusted Platform Module</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>VM</htm:td>
                <htm:td>Virtual Machine</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td><abbr linkend="VMM"/></htm:td>
                <htm:td>Virtual Machine Manager</htm:td>
            </htm:tr>
            <htm:tr>
                <htm:td>VS</htm:td>
                <htm:td>Virtualization System</htm:td>
            </htm:tr>
        </htm:table>
    </appendix>
    <!-- 
      
      
      2<htm:sup>16</htm:sup>
      
        <f-component id="" name=""  status="threshold">
          <f-element id="">
            <title>
            </title>
            </f-element>
            <f-element id="">
            <title>
            </title>
            <note role="application"> </note>
            <aactivity>
                <testlist>
                <test></test>
                <test></test>
                </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        
      <selectables linebreak="yes">
              <selectable></selectable>
              <selectable></selectable>
            </selectables>
      <selectables>
              <selectable></selectable>
              <selectable></selectable>
            </selectables>      
        <f-component id="" name=""  status="threshold">
        <f-element id="">
          <title>
            </title>
          <note role="application"> </note>
          <aactivity>
                    <testlist>
                <test>
                <test>
                </testlist>
          </aactivity>
        </f-element>
        </f-component>     

    
    <htm:TR>
                                    <htm:TD>FIA_PMG_EXT.1</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                
                                <htm:TR>
                                    <htm:TD>FIA_X509_EXT.1</htm:TD>
                                    <htm:TD>Failure to validate a certificate.</htm:TD>
                                    <htm:TD>Reason for failure.</htm:TD>
                                </htm:TR>
                                <htm:TR>
                                    <htm:TD>FIA_X509_EXT.2</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                    <htm:TD>None.</htm:TD>
                                </htm:TR>
                                
                                
                                <htm:TR>
                                    <htm:TD>FMT_MOF_EXT.1</htm:TD>
                                    <htm:TD>
                                        Updates to the TOE.<htm:br></htm:br>
                                        Configuration changes (system, network, audit function, Guest VM time, etc.).<htm:br></htm:br>
                                        Start-up and shutdown of the TOE<htm:br></htm:br>
                                        VM Start/Stop/Suspend events.<htm:br></htm:br>
                                        Start and end of remote management session.
                                    </htm:TD>
                                    <htm:TD>Configuration changes.</htm:TD>
                                </htm:TR>
                                
                                
                                
                                
                                
                                
                                
    <htm:TR>
        <htm:TD>FTP_TRP.1</htm:TD>
        <htm:TD>Initiation of the trusted channel. Termination of the trusted channel. Failures of the trusted path functions</htm:TD>
        <htm:TD>User ID and remote source (IP Address) if feasible.</htm:TD>
    </htm:TR>
            -->
</PP>
